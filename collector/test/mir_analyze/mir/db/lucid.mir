// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const APP_INFO: AppInfo = {
    let mut _0: app_dirs::AppInfo;

    bb0: {
        _0 = AppInfo { name: const "lucid", author: const "LucidKV" };
        return;
    }
}

fn configuration::<impl at src/configuration.rs:16:10: 16:15>::fmt(_1: &Configuration, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 9];
    let _5: [&dyn std::fmt::Debug; 9];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &configuration::General;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &configuration::Authentication;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &configuration::Persistence;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &configuration::Encryption;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &configuration::ServerSentEvent;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &configuration::WebUI;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &configuration::Store;
    let mut _20: &dyn std::fmt::Debug;
    let _21: &configuration::Http;
    let mut _22: &dyn std::fmt::Debug;
    let _23: &&configuration::Logging;
    let _24: &configuration::Logging;
    let _25: &str;
    let mut _26: &[&str];
    let mut _27: &[&str; 9];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _27 = const _;
        _7 = &((*_1).0: configuration::General);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: configuration::Authentication);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: configuration::Persistence);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: configuration::Encryption);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: configuration::ServerSentEvent);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: configuration::WebUI);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _19 = &((*_1).6: configuration::Store);
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _21 = &((*_1).7: configuration::Http);
        _20 = _21 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _24 = &((*_1).8: configuration::Logging);
        _23 = &_24;
        _22 = _23 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _25 = const "Configuration";
        _26 = _27 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _25, move _26, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in configuration::<impl at src/configuration.rs:16:10: 16:15>::fmt: &[&str; 9] = {
    let mut _0: &[&str; 9];
    let mut _1: [&str; 9];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;

    bb0: {
        _3 = const "authentication";
        _2 = &(*_3);
        _5 = const "persistence";
        _4 = &(*_5);
        _7 = const "encryption";
        _6 = &(*_7);
        _9 = const "sse";
        _8 = &(*_9);
        _11 = const "webui";
        _10 = &(*_11);
        _13 = const "store";
        _12 = &(*_13);
        _15 = const "http";
        _14 = &(*_15);
        _17 = const "logging";
        _16 = &(*_17);
        _1 = [const "general", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:16:17: 16:22>::clone(_1: &Configuration) -> Configuration {
    debug self => _1;
    let mut _0: configuration::Configuration;
    let mut _2: configuration::General;
    let _3: &configuration::General;
    let mut _4: configuration::Authentication;
    let _5: &configuration::Authentication;
    let mut _6: configuration::Persistence;
    let _7: &configuration::Persistence;
    let mut _8: configuration::Encryption;
    let _9: &configuration::Encryption;
    let mut _10: configuration::ServerSentEvent;
    let _11: &configuration::ServerSentEvent;
    let mut _12: configuration::WebUI;
    let _13: &configuration::WebUI;
    let mut _14: configuration::Store;
    let _15: &configuration::Store;
    let mut _16: configuration::Http;
    let _17: &configuration::Http;
    let mut _18: configuration::Logging;
    let _19: &configuration::Logging;

    bb0: {
        _3 = &((*_1).0: configuration::General);
        _2 = <General as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: configuration::Authentication);
        _4 = <Authentication as Clone>::clone(_5) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _7 = &((*_1).2: configuration::Persistence);
        _6 = <Persistence as Clone>::clone(_7) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _9 = &((*_1).3: configuration::Encryption);
        _8 = <Encryption as Clone>::clone(_9) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _11 = &((*_1).4: configuration::ServerSentEvent);
        _10 = <configuration::ServerSentEvent as Clone>::clone(_11) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _13 = &((*_1).5: configuration::WebUI);
        _12 = <WebUI as Clone>::clone(_13) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _15 = &((*_1).6: configuration::Store);
        _14 = <Store as Clone>::clone(_15) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _17 = &((*_1).7: configuration::Http);
        _16 = <configuration::Http as Clone>::clone(_17) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _19 = &((*_1).8: configuration::Logging);
        _18 = <Logging as Clone>::clone(_19) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _0 = Configuration { general: move _2, authentication: move _4, persistence: move _6, encryption: move _8, sse: move _10, webui: move _12, store: move _14, http: move _16, logging: move _18 };
        return;
    }

    bb10 (cleanup): {
        drop(_8) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_6) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }
}

const _IMPL_SERIALIZE_FOR_Configuration: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:24: 16:33>::serialize(_1: &Configuration, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: (usize, bool);
    let mut _17: (usize, bool);
    let mut _18: (usize, bool);
    let mut _19: (usize, bool);
    let mut _20: (usize, bool);
    let mut _21: (usize, bool);
    let mut _22: (usize, bool);
    let mut _23: (usize, bool);
    let mut _24: (usize, bool);
    let mut _25: isize;
    let _26: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _27: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _28: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _29: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _30: &configuration::General;
    let mut _31: isize;
    let mut _33: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _34: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _35: &configuration::Authentication;
    let mut _36: isize;
    let mut _38: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _39: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _40: &configuration::Persistence;
    let mut _41: isize;
    let mut _43: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _44: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _45: &configuration::Encryption;
    let mut _46: isize;
    let mut _48: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _49: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _50: &configuration::ServerSentEvent;
    let mut _51: isize;
    let mut _53: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _54: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _55: &configuration::WebUI;
    let mut _56: isize;
    let mut _58: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _59: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _60: &configuration::Store;
    let mut _61: isize;
    let mut _63: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _64: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _65: &configuration::Http;
    let mut _66: isize;
    let mut _68: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _69: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _70: &configuration::Logging;
    let mut _71: isize;
    let mut _73: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _74: bool;
    let mut _75: bool;
    scope 1 {
        debug __serde_state => _3;
        let _32: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _37: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _42: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _47: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _52: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _57: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _62: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _67: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _72: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _32;
        }
        scope 6 {
            debug __val => const ();
        }
        scope 7 {
            debug __err => _37;
        }
        scope 8 {
            debug __val => const ();
        }
        scope 9 {
            debug __err => _42;
        }
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _47;
        }
        scope 12 {
            debug __val => const ();
        }
        scope 13 {
            debug __err => _52;
        }
        scope 14 {
            debug __val => const ();
        }
        scope 15 {
            debug __err => _57;
        }
        scope 16 {
            debug __val => const ();
        }
        scope 17 {
            debug __err => _62;
        }
        scope 18 {
            debug __val => const ();
        }
        scope 19 {
            debug __err => _67;
        }
        scope 20 {
            debug __val => const ();
        }
        scope 21 {
            debug __err => _72;
        }
    }
    scope 2 {
        debug __val => _26;
    }
    scope 3 {
        debug __err => _27;
    }

    bb0: {
        _74 = const false;
        _75 = const false;
        _75 = const true;
        _5 = move _2;
        _15 = const false as usize (IntToInt);
        _16 = CheckedAdd(_15, const 1_usize);
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 1_usize) -> [success: bb1, unwind: bb49];
    }

    bb1: {
        _14 = move (_16.0: usize);
        _17 = CheckedAdd(_14, const 1_usize);
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, const 1_usize) -> [success: bb2, unwind: bb49];
    }

    bb2: {
        _13 = move (_17.0: usize);
        _18 = CheckedAdd(_13, const 1_usize);
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const 1_usize) -> [success: bb3, unwind: bb49];
    }

    bb3: {
        _12 = move (_18.0: usize);
        _19 = CheckedAdd(_12, const 1_usize);
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, const 1_usize) -> [success: bb4, unwind: bb49];
    }

    bb4: {
        _11 = move (_19.0: usize);
        _20 = CheckedAdd(_11, const 1_usize);
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb5, unwind: bb49];
    }

    bb5: {
        _10 = move (_20.0: usize);
        _21 = CheckedAdd(_10, const 1_usize);
        assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_usize) -> [success: bb6, unwind: bb49];
    }

    bb6: {
        _9 = move (_21.0: usize);
        _22 = CheckedAdd(_9, const 1_usize);
        assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_usize) -> [success: bb7, unwind: bb49];
    }

    bb7: {
        _8 = move (_22.0: usize);
        _23 = CheckedAdd(_8, const 1_usize);
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const 1_usize) -> [success: bb8, unwind: bb49];
    }

    bb8: {
        _7 = move (_23.0: usize);
        _24 = CheckedAdd(_7, const 1_usize);
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb9, unwind: bb49];
    }

    bb9: {
        _6 = move (_24.0: usize);
        _75 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "Configuration", move _6) -> [return: bb10, unwind: bb49];
    }

    bb10: {
        _75 = const false;
        _25 = discriminant(_4);
        switchInt(move _25) -> [0: bb13, 1: bb11, otherwise: bb12];
    }

    bb11: {
        _27 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _27);
        goto -> bb43;
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _26 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _74 = const true;
        _3 = move _26;
        _29 = &mut _3;
        _30 = &((*_1).0: configuration::General);
        _28 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<General>(_29, const "general", _30) -> [return: bb14, unwind: bb47];
    }

    bb14: {
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb16, 1: bb15, otherwise: bb12];
    }

    bb15: {
        _32 = move ((_28 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _32);
        goto -> bb42;
    }

    bb16: {
        _34 = &mut _3;
        _35 = &((*_1).1: configuration::Authentication);
        _33 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Authentication>(_34, const "authentication", _35) -> [return: bb17, unwind: bb47];
    }

    bb17: {
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb19, 1: bb18, otherwise: bb12];
    }

    bb18: {
        _37 = move ((_33 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _37);
        goto -> bb42;
    }

    bb19: {
        _39 = &mut _3;
        _40 = &((*_1).2: configuration::Persistence);
        _38 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Persistence>(_39, const "persistence", _40) -> [return: bb20, unwind: bb47];
    }

    bb20: {
        _41 = discriminant(_38);
        switchInt(move _41) -> [0: bb22, 1: bb21, otherwise: bb12];
    }

    bb21: {
        _42 = move ((_38 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _42);
        goto -> bb42;
    }

    bb22: {
        _44 = &mut _3;
        _45 = &((*_1).3: configuration::Encryption);
        _43 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Encryption>(_44, const "encryption", _45) -> [return: bb23, unwind: bb47];
    }

    bb23: {
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb25, 1: bb24, otherwise: bb12];
    }

    bb24: {
        _47 = move ((_43 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _47);
        goto -> bb42;
    }

    bb25: {
        _49 = &mut _3;
        _50 = &((*_1).4: configuration::ServerSentEvent);
        _48 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<configuration::ServerSentEvent>(_49, const "sse", _50) -> [return: bb26, unwind: bb47];
    }

    bb26: {
        _51 = discriminant(_48);
        switchInt(move _51) -> [0: bb28, 1: bb27, otherwise: bb12];
    }

    bb27: {
        _52 = move ((_48 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _52);
        goto -> bb42;
    }

    bb28: {
        _54 = &mut _3;
        _55 = &((*_1).5: configuration::WebUI);
        _53 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<WebUI>(_54, const "webui", _55) -> [return: bb29, unwind: bb47];
    }

    bb29: {
        _56 = discriminant(_53);
        switchInt(move _56) -> [0: bb31, 1: bb30, otherwise: bb12];
    }

    bb30: {
        _57 = move ((_53 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _57);
        goto -> bb42;
    }

    bb31: {
        _59 = &mut _3;
        _60 = &((*_1).6: configuration::Store);
        _58 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Store>(_59, const "store", _60) -> [return: bb32, unwind: bb47];
    }

    bb32: {
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb34, 1: bb33, otherwise: bb12];
    }

    bb33: {
        _62 = move ((_58 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _62);
        goto -> bb42;
    }

    bb34: {
        _64 = &mut _3;
        _65 = &((*_1).7: configuration::Http);
        _63 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<configuration::Http>(_64, const "http", _65) -> [return: bb35, unwind: bb47];
    }

    bb35: {
        _66 = discriminant(_63);
        switchInt(move _66) -> [0: bb37, 1: bb36, otherwise: bb12];
    }

    bb36: {
        _67 = move ((_63 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _67);
        goto -> bb42;
    }

    bb37: {
        _69 = &mut _3;
        _70 = &((*_1).8: configuration::Logging);
        _68 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Logging>(_69, const "logging", _70) -> [return: bb38, unwind: bb47];
    }

    bb38: {
        _71 = discriminant(_68);
        switchInt(move _71) -> [0: bb40, 1: bb39, otherwise: bb12];
    }

    bb39: {
        _72 = move ((_68 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _72);
        goto -> bb42;
    }

    bb40: {
        _74 = const false;
        _73 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _73) -> [return: bb41, unwind: bb47];
    }

    bb41: {
        _74 = const false;
        goto -> bb44;
    }

    bb42: {
        drop(_3) -> [return: bb43, unwind continue];
    }

    bb43: {
        _74 = const false;
        goto -> bb44;
    }

    bb44: {
        return;
    }

    bb45 (cleanup): {
        resume;
    }

    bb46 (cleanup): {
        drop(_3) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_74) -> [0: bb45, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_5) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_75) -> [0: bb45, otherwise: bb48];
    }
}

const _IMPL_DESERIALIZE_FOR_Configuration: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize(_1: __D) -> Result<Configuration, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::Configuration, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Visitor<'_>>(move _1, const "Configuration", const _, const _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Configuration>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _8: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _9: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _10: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _11: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _12: __E;
    let mut _13: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _14: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _15: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, otherwise: bb1];
    }

    bb1: {
        _13 = Unexpected::<'_>::Unsigned(_2);
        _15 = const _;
        _14 = _15 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _12 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _13, move _14) -> [return: bb11, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb12;
    }

    bb3: {
        _4 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb12;
    }

    bb4: {
        _5 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb12;
    }

    bb5: {
        _6 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb12;
    }

    bb6: {
        _7 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field4;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb12;
    }

    bb7: {
        _8 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field5;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb12;
    }

    bb8: {
        _9 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field6;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb12;
    }

    bb9: {
        _10 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field7;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb12;
    }

    bb10: {
        _11 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field8;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb12;
    }

    bb11: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Err(move _12);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 9";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _13: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _14: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _15: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _16: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _17: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _18: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _19: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _20: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _21: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;

    bb0: {
        _11 = <str as PartialEq>::eq(_2, const "general") -> [return: bb27, unwind continue];
    }

    bb1: {
        _12 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb28;
    }

    bb2: {
        _10 = <str as PartialEq>::eq(_2, const "authentication") -> [return: bb26, unwind continue];
    }

    bb3: {
        _13 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb28;
    }

    bb4: {
        _9 = <str as PartialEq>::eq(_2, const "persistence") -> [return: bb25, unwind continue];
    }

    bb5: {
        _14 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb28;
    }

    bb6: {
        _8 = <str as PartialEq>::eq(_2, const "encryption") -> [return: bb24, unwind continue];
    }

    bb7: {
        _15 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb28;
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "sse") -> [return: bb23, unwind continue];
    }

    bb9: {
        _16 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field4;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb28;
    }

    bb10: {
        _6 = <str as PartialEq>::eq(_2, const "webui") -> [return: bb22, unwind continue];
    }

    bb11: {
        _17 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field5;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb28;
    }

    bb12: {
        _5 = <str as PartialEq>::eq(_2, const "store") -> [return: bb21, unwind continue];
    }

    bb13: {
        _18 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field6;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb28;
    }

    bb14: {
        _4 = <str as PartialEq>::eq(_2, const "http") -> [return: bb20, unwind continue];
    }

    bb15: {
        _19 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field7;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb28;
    }

    bb16: {
        _3 = <str as PartialEq>::eq(_2, const "logging") -> [return: bb19, unwind continue];
    }

    bb17: {
        _20 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field8;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb28;
    }

    bb18: {
        _21 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb28;
    }

    bb19: {
        switchInt(move _3) -> [0: bb18, otherwise: bb17];
    }

    bb20: {
        switchInt(move _4) -> [0: bb16, otherwise: bb15];
    }

    bb21: {
        switchInt(move _5) -> [0: bb14, otherwise: bb13];
    }

    bb22: {
        switchInt(move _6) -> [0: bb12, otherwise: bb11];
    }

    bb23: {
        switchInt(move _7) -> [0: bb10, otherwise: bb9];
    }

    bb24: {
        switchInt(move _8) -> [0: bb8, otherwise: bb7];
    }

    bb25: {
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb26: {
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb27: {
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb28: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _25: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _26: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _27: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _28: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _29: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _30: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _31: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _32: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
    let mut _33: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;

    bb0: {
        _21 = Len((*_2));
        _22 = const 7_usize;
        _23 = Eq(move _21, move _22);
        switchInt(move _23) -> [0: bb15, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [103: bb2, 108: bb9, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [101: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [110: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [101: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [114: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [97: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [108: bb72, otherwise: bb8];
    }

    bb8: {
        _33 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _33);
        goto -> bb81;
    }

    bb9: {
        switchInt((*_2)[1 of 7]) -> [111: bb10, otherwise: bb8];
    }

    bb10: {
        switchInt((*_2)[2 of 7]) -> [103: bb11, otherwise: bb8];
    }

    bb11: {
        switchInt((*_2)[3 of 7]) -> [103: bb12, otherwise: bb8];
    }

    bb12: {
        switchInt((*_2)[4 of 7]) -> [105: bb13, otherwise: bb8];
    }

    bb13: {
        switchInt((*_2)[5 of 7]) -> [110: bb14, otherwise: bb8];
    }

    bb14: {
        switchInt((*_2)[6 of 7]) -> [103: bb80, otherwise: bb8];
    }

    bb15: {
        _18 = Len((*_2));
        _19 = const 14_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb30, otherwise: bb16];
    }

    bb16: {
        switchInt((*_2)[0 of 14]) -> [97: bb17, otherwise: bb8];
    }

    bb17: {
        switchInt((*_2)[1 of 14]) -> [117: bb18, otherwise: bb8];
    }

    bb18: {
        switchInt((*_2)[2 of 14]) -> [116: bb19, otherwise: bb8];
    }

    bb19: {
        switchInt((*_2)[3 of 14]) -> [104: bb20, otherwise: bb8];
    }

    bb20: {
        switchInt((*_2)[4 of 14]) -> [101: bb21, otherwise: bb8];
    }

    bb21: {
        switchInt((*_2)[5 of 14]) -> [110: bb22, otherwise: bb8];
    }

    bb22: {
        switchInt((*_2)[6 of 14]) -> [116: bb23, otherwise: bb8];
    }

    bb23: {
        switchInt((*_2)[7 of 14]) -> [105: bb24, otherwise: bb8];
    }

    bb24: {
        switchInt((*_2)[8 of 14]) -> [99: bb25, otherwise: bb8];
    }

    bb25: {
        switchInt((*_2)[9 of 14]) -> [97: bb26, otherwise: bb8];
    }

    bb26: {
        switchInt((*_2)[10 of 14]) -> [116: bb27, otherwise: bb8];
    }

    bb27: {
        switchInt((*_2)[11 of 14]) -> [105: bb28, otherwise: bb8];
    }

    bb28: {
        switchInt((*_2)[12 of 14]) -> [111: bb29, otherwise: bb8];
    }

    bb29: {
        switchInt((*_2)[13 of 14]) -> [110: bb73, otherwise: bb8];
    }

    bb30: {
        _15 = Len((*_2));
        _16 = const 11_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb42, otherwise: bb31];
    }

    bb31: {
        switchInt((*_2)[0 of 11]) -> [112: bb32, otherwise: bb8];
    }

    bb32: {
        switchInt((*_2)[1 of 11]) -> [101: bb33, otherwise: bb8];
    }

    bb33: {
        switchInt((*_2)[2 of 11]) -> [114: bb34, otherwise: bb8];
    }

    bb34: {
        switchInt((*_2)[3 of 11]) -> [115: bb35, otherwise: bb8];
    }

    bb35: {
        switchInt((*_2)[4 of 11]) -> [105: bb36, otherwise: bb8];
    }

    bb36: {
        switchInt((*_2)[5 of 11]) -> [115: bb37, otherwise: bb8];
    }

    bb37: {
        switchInt((*_2)[6 of 11]) -> [116: bb38, otherwise: bb8];
    }

    bb38: {
        switchInt((*_2)[7 of 11]) -> [101: bb39, otherwise: bb8];
    }

    bb39: {
        switchInt((*_2)[8 of 11]) -> [110: bb40, otherwise: bb8];
    }

    bb40: {
        switchInt((*_2)[9 of 11]) -> [99: bb41, otherwise: bb8];
    }

    bb41: {
        switchInt((*_2)[10 of 11]) -> [101: bb74, otherwise: bb8];
    }

    bb42: {
        _12 = Len((*_2));
        _13 = const 10_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb53, otherwise: bb43];
    }

    bb43: {
        switchInt((*_2)[0 of 10]) -> [101: bb44, otherwise: bb8];
    }

    bb44: {
        switchInt((*_2)[1 of 10]) -> [110: bb45, otherwise: bb8];
    }

    bb45: {
        switchInt((*_2)[2 of 10]) -> [99: bb46, otherwise: bb8];
    }

    bb46: {
        switchInt((*_2)[3 of 10]) -> [114: bb47, otherwise: bb8];
    }

    bb47: {
        switchInt((*_2)[4 of 10]) -> [121: bb48, otherwise: bb8];
    }

    bb48: {
        switchInt((*_2)[5 of 10]) -> [112: bb49, otherwise: bb8];
    }

    bb49: {
        switchInt((*_2)[6 of 10]) -> [116: bb50, otherwise: bb8];
    }

    bb50: {
        switchInt((*_2)[7 of 10]) -> [105: bb51, otherwise: bb8];
    }

    bb51: {
        switchInt((*_2)[8 of 10]) -> [111: bb52, otherwise: bb8];
    }

    bb52: {
        switchInt((*_2)[9 of 10]) -> [110: bb75, otherwise: bb8];
    }

    bb53: {
        _9 = Len((*_2));
        _10 = const 3_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb57, otherwise: bb54];
    }

    bb54: {
        switchInt((*_2)[0 of 3]) -> [115: bb55, otherwise: bb8];
    }

    bb55: {
        switchInt((*_2)[1 of 3]) -> [115: bb56, otherwise: bb8];
    }

    bb56: {
        switchInt((*_2)[2 of 3]) -> [101: bb76, otherwise: bb8];
    }

    bb57: {
        _6 = Len((*_2));
        _7 = const 5_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb67, otherwise: bb58];
    }

    bb58: {
        switchInt((*_2)[0 of 5]) -> [119: bb59, 115: bb63, otherwise: bb8];
    }

    bb59: {
        switchInt((*_2)[1 of 5]) -> [101: bb60, otherwise: bb8];
    }

    bb60: {
        switchInt((*_2)[2 of 5]) -> [98: bb61, otherwise: bb8];
    }

    bb61: {
        switchInt((*_2)[3 of 5]) -> [117: bb62, otherwise: bb8];
    }

    bb62: {
        switchInt((*_2)[4 of 5]) -> [105: bb77, otherwise: bb8];
    }

    bb63: {
        switchInt((*_2)[1 of 5]) -> [116: bb64, otherwise: bb8];
    }

    bb64: {
        switchInt((*_2)[2 of 5]) -> [111: bb65, otherwise: bb8];
    }

    bb65: {
        switchInt((*_2)[3 of 5]) -> [114: bb66, otherwise: bb8];
    }

    bb66: {
        switchInt((*_2)[4 of 5]) -> [101: bb78, otherwise: bb8];
    }

    bb67: {
        _3 = Len((*_2));
        _4 = const 4_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb68];
    }

    bb68: {
        switchInt((*_2)[0 of 4]) -> [104: bb69, otherwise: bb8];
    }

    bb69: {
        switchInt((*_2)[1 of 4]) -> [116: bb70, otherwise: bb8];
    }

    bb70: {
        switchInt((*_2)[2 of 4]) -> [116: bb71, otherwise: bb8];
    }

    bb71: {
        switchInt((*_2)[3 of 4]) -> [112: bb79, otherwise: bb8];
    }

    bb72: {
        _24 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb81;
    }

    bb73: {
        _25 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb81;
    }

    bb74: {
        _26 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb81;
    }

    bb75: {
        _27 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb81;
    }

    bb76: {
        _28 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field4;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb81;
    }

    bb77: {
        _29 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field5;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb81;
    }

    bb78: {
        _30 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field6;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb81;
    }

    bb79: {
        _31 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field7;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb81;
    }

    bb80: {
        _32 = _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field::__field8;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, __E>::Ok(move _32);
        goto -> bb81;
    }

    bb81: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Configuration";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Visitor<'_>, _2: __A) -> Result<Configuration, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Configuration>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::Configuration, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: configuration::Configuration;
    let mut _5: std::result::Result<std::option::Option<configuration::General>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _6: &mut __A;
    let mut _7: isize;
    let mut _10: isize;
    let mut _12: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _13: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _15: std::result::Result<std::option::Option<configuration::Authentication>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _16: &mut __A;
    let mut _17: isize;
    let mut _20: isize;
    let mut _22: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _23: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _25: std::result::Result<std::option::Option<configuration::Persistence>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _26: &mut __A;
    let mut _27: isize;
    let mut _30: isize;
    let mut _32: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _33: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _35: std::result::Result<std::option::Option<configuration::Encryption>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _36: &mut __A;
    let mut _37: isize;
    let mut _40: isize;
    let mut _42: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _43: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _44: std::result::Result<std::option::Option<configuration::ServerSentEvent>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _45: &mut __A;
    let mut _46: isize;
    let mut _49: isize;
    let mut _51: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _52: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _53: std::result::Result<std::option::Option<configuration::WebUI>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _54: &mut __A;
    let mut _55: isize;
    let mut _58: isize;
    let mut _60: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _61: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _62: std::result::Result<std::option::Option<configuration::Store>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _63: &mut __A;
    let mut _64: isize;
    let mut _67: isize;
    let mut _69: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _70: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _71: std::result::Result<std::option::Option<configuration::Http>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _72: &mut __A;
    let mut _73: isize;
    let mut _76: isize;
    let mut _78: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _79: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _80: std::result::Result<std::option::Option<configuration::Logging>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _81: &mut __A;
    let mut _82: isize;
    let mut _85: isize;
    let mut _87: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _88: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _89: configuration::Configuration;
    let mut _90: configuration::General;
    let mut _91: configuration::Authentication;
    let mut _92: configuration::Persistence;
    let mut _93: configuration::Encryption;
    scope 1 {
        debug __default => _3;
        let _4: configuration::General;
        let _8: std::option::Option<configuration::General>;
        let _9: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _11: configuration::General;
        let mut _94: &&str;
        scope 2 {
            debug __field0 => _4;
            let _14: configuration::Authentication;
            let _18: std::option::Option<configuration::Authentication>;
            let _19: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
            let _21: configuration::Authentication;
            let mut _95: &&str;
            scope 6 {
                debug __field1 => _14;
                let _24: configuration::Persistence;
                let _28: std::option::Option<configuration::Persistence>;
                let _29: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                let _31: configuration::Persistence;
                let mut _96: &&str;
                scope 10 {
                    debug __field2 => _24;
                    let _34: configuration::Encryption;
                    let _38: std::option::Option<configuration::Encryption>;
                    let _39: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                    let _41: configuration::Encryption;
                    let mut _97: &&str;
                    scope 14 {
                        debug __field3 => _34;
                        let _47: std::option::Option<configuration::ServerSentEvent>;
                        let _48: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                        let _50: configuration::ServerSentEvent;
                        let mut _98: &&str;
                        scope 18 {
                            debug __field4 => _50;
                            let _56: std::option::Option<configuration::WebUI>;
                            let _57: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                            let _59: configuration::WebUI;
                            let mut _99: &&str;
                            scope 22 {
                                debug __field5 => _59;
                                let _65: std::option::Option<configuration::Store>;
                                let _66: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                                let _68: configuration::Store;
                                let mut _100: &&str;
                                scope 26 {
                                    debug __field6 => _68;
                                    let _74: std::option::Option<configuration::Http>;
                                    let _75: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                                    let _77: configuration::Http;
                                    let mut _101: &&str;
                                    scope 30 {
                                        debug __field7 => _77;
                                        let _83: std::option::Option<configuration::Logging>;
                                        let _84: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                                        let _86: configuration::Logging;
                                        let mut _102: &&str;
                                        scope 34 {
                                            debug __field8 => _86;
                                        }
                                        scope 35 {
                                            debug __val => _83;
                                        }
                                        scope 36 {
                                            debug __err => _84;
                                        }
                                        scope 37 {
                                            debug __value => _86;
                                        }
                                    }
                                    scope 31 {
                                        debug __val => _74;
                                    }
                                    scope 32 {
                                        debug __err => _75;
                                    }
                                    scope 33 {
                                        debug __value => _77;
                                    }
                                }
                                scope 27 {
                                    debug __val => _65;
                                }
                                scope 28 {
                                    debug __err => _66;
                                }
                                scope 29 {
                                    debug __value => _68;
                                }
                            }
                            scope 23 {
                                debug __val => _56;
                            }
                            scope 24 {
                                debug __err => _57;
                            }
                            scope 25 {
                                debug __value => _59;
                            }
                        }
                        scope 19 {
                            debug __val => _47;
                        }
                        scope 20 {
                            debug __err => _48;
                        }
                        scope 21 {
                            debug __value => _50;
                        }
                    }
                    scope 15 {
                        debug __val => _38;
                    }
                    scope 16 {
                        debug __err => _39;
                    }
                    scope 17 {
                        debug __value => _41;
                    }
                }
                scope 11 {
                    debug __val => _28;
                }
                scope 12 {
                    debug __err => _29;
                }
                scope 13 {
                    debug __value => _31;
                }
            }
            scope 7 {
                debug __val => _18;
            }
            scope 8 {
                debug __err => _19;
            }
            scope 9 {
                debug __value => _21;
            }
        }
        scope 3 {
            debug __val => _8;
        }
        scope 4 {
            debug __err => _9;
        }
        scope 5 {
            debug __value => _11;
        }
    }

    bb0: {
        _3 = <Configuration as Default>::default() -> [return: bb1, unwind: bb70];
    }

    bb1: {
        _6 = &mut _2;
        _5 = <__A as SeqAccess<'_>>::next_element::<General>(_6) -> [return: bb2, unwind: bb69];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_5 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _9);
        goto -> bb62;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Ok).0: std::option::Option<configuration::General>);
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb6, 1: bb7, otherwise: bb4];
    }

    bb6: {
        _94 = const _;
        _13 = _94 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _12 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _13) -> [return: bb8, unwind: bb69];
    }

    bb7: {
        _11 = move ((_8 as Some).0: configuration::General);
        _4 = move _11;
        _16 = &mut _2;
        _15 = <__A as SeqAccess<'_>>::next_element::<Authentication>(_16) -> [return: bb9, unwind: bb68];
    }

    bb8: {
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _12);
        goto -> bb62;
    }

    bb9: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb10, otherwise: bb4];
    }

    bb10: {
        _19 = move ((_15 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb61;
    }

    bb11: {
        _18 = move ((_15 as Ok).0: std::option::Option<configuration::Authentication>);
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _95 = const _;
        _23 = _95 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _22 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 1_usize, move _23) -> [return: bb14, unwind: bb68];
    }

    bb13: {
        _21 = move ((_18 as Some).0: configuration::Authentication);
        _14 = move _21;
        _26 = &mut _2;
        _25 = <__A as SeqAccess<'_>>::next_element::<Persistence>(_26) -> [return: bb15, unwind: bb67];
    }

    bb14: {
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _22);
        goto -> bb61;
    }

    bb15: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb17, 1: bb16, otherwise: bb4];
    }

    bb16: {
        _29 = move ((_25 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _29);
        goto -> bb60;
    }

    bb17: {
        _28 = move ((_25 as Ok).0: std::option::Option<configuration::Persistence>);
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        _96 = const _;
        _33 = _96 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _32 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 2_usize, move _33) -> [return: bb20, unwind: bb67];
    }

    bb19: {
        _31 = move ((_28 as Some).0: configuration::Persistence);
        _24 = move _31;
        _36 = &mut _2;
        _35 = <__A as SeqAccess<'_>>::next_element::<Encryption>(_36) -> [return: bb21, unwind: bb66];
    }

    bb20: {
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _32);
        goto -> bb60;
    }

    bb21: {
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb22, otherwise: bb4];
    }

    bb22: {
        _39 = move ((_35 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb59;
    }

    bb23: {
        _38 = move ((_35 as Ok).0: std::option::Option<configuration::Encryption>);
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        _97 = const _;
        _43 = _97 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _42 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 3_usize, move _43) -> [return: bb26, unwind: bb66];
    }

    bb25: {
        _41 = move ((_38 as Some).0: configuration::Encryption);
        _34 = move _41;
        _45 = &mut _2;
        _44 = <__A as SeqAccess<'_>>::next_element::<configuration::ServerSentEvent>(_45) -> [return: bb27, unwind: bb65];
    }

    bb26: {
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _42);
        goto -> bb59;
    }

    bb27: {
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb29, 1: bb28, otherwise: bb4];
    }

    bb28: {
        _48 = move ((_44 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb58;
    }

    bb29: {
        _47 = move ((_44 as Ok).0: std::option::Option<configuration::ServerSentEvent>);
        _49 = discriminant(_47);
        switchInt(move _49) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        _98 = const _;
        _52 = _98 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _51 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 4_usize, move _52) -> [return: bb32, unwind: bb65];
    }

    bb31: {
        _50 = move ((_47 as Some).0: configuration::ServerSentEvent);
        _54 = &mut _2;
        _53 = <__A as SeqAccess<'_>>::next_element::<WebUI>(_54) -> [return: bb33, unwind: bb65];
    }

    bb32: {
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _51);
        goto -> bb58;
    }

    bb33: {
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb35, 1: bb34, otherwise: bb4];
    }

    bb34: {
        _57 = move ((_53 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _57);
        goto -> bb58;
    }

    bb35: {
        _56 = move ((_53 as Ok).0: std::option::Option<configuration::WebUI>);
        _58 = discriminant(_56);
        switchInt(move _58) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        _99 = const _;
        _61 = _99 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _60 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 5_usize, move _61) -> [return: bb38, unwind: bb65];
    }

    bb37: {
        _59 = move ((_56 as Some).0: configuration::WebUI);
        _63 = &mut _2;
        _62 = <__A as SeqAccess<'_>>::next_element::<Store>(_63) -> [return: bb39, unwind: bb65];
    }

    bb38: {
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _60);
        goto -> bb58;
    }

    bb39: {
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb41, 1: bb40, otherwise: bb4];
    }

    bb40: {
        _66 = move ((_62 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _66);
        goto -> bb58;
    }

    bb41: {
        _65 = move ((_62 as Ok).0: std::option::Option<configuration::Store>);
        _67 = discriminant(_65);
        switchInt(move _67) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        _100 = const _;
        _70 = _100 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _69 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 6_usize, move _70) -> [return: bb44, unwind: bb65];
    }

    bb43: {
        _68 = move ((_65 as Some).0: configuration::Store);
        _72 = &mut _2;
        _71 = <__A as SeqAccess<'_>>::next_element::<configuration::Http>(_72) -> [return: bb45, unwind: bb65];
    }

    bb44: {
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _69);
        goto -> bb58;
    }

    bb45: {
        _73 = discriminant(_71);
        switchInt(move _73) -> [0: bb47, 1: bb46, otherwise: bb4];
    }

    bb46: {
        _75 = move ((_71 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _75);
        goto -> bb58;
    }

    bb47: {
        _74 = move ((_71 as Ok).0: std::option::Option<configuration::Http>);
        _76 = discriminant(_74);
        switchInt(move _76) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        _101 = const _;
        _79 = _101 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _78 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 7_usize, move _79) -> [return: bb50, unwind: bb65];
    }

    bb49: {
        _77 = move ((_74 as Some).0: configuration::Http);
        _81 = &mut _2;
        _80 = <__A as SeqAccess<'_>>::next_element::<Logging>(_81) -> [return: bb51, unwind: bb65];
    }

    bb50: {
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _78);
        goto -> bb58;
    }

    bb51: {
        _82 = discriminant(_80);
        switchInt(move _82) -> [0: bb53, 1: bb52, otherwise: bb4];
    }

    bb52: {
        _84 = move ((_80 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _84);
        goto -> bb58;
    }

    bb53: {
        _83 = move ((_80 as Ok).0: std::option::Option<configuration::Logging>);
        _85 = discriminant(_83);
        switchInt(move _85) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        _102 = const _;
        _88 = _102 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _87 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 8_usize, move _88) -> [return: bb56, unwind: bb65];
    }

    bb55: {
        _86 = move ((_83 as Some).0: configuration::Logging);
        _90 = move _4;
        _91 = move _14;
        _92 = move _24;
        _93 = move _34;
        _89 = Configuration { general: move _90, authentication: move _91, persistence: move _92, encryption: move _93, sse: move _50, webui: move _59, store: move _68, http: move _77, logging: move _86 };
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Ok(move _89);
        drop(_3) -> [return: bb57, unwind: bb70];
    }

    bb56: {
        _0 = Result::<Configuration, <__A as SeqAccess<'_>>::Error>::Err(move _87);
        goto -> bb58;
    }

    bb57: {
        drop(_2) -> [return: bb64, unwind continue];
    }

    bb58: {
        drop(_34) -> [return: bb59, unwind: bb66];
    }

    bb59: {
        drop(_24) -> [return: bb60, unwind: bb67];
    }

    bb60: {
        drop(_14) -> [return: bb61, unwind: bb68];
    }

    bb61: {
        drop(_4) -> [return: bb62, unwind: bb69];
    }

    bb62: {
        drop(_3) -> [return: bb63, unwind: bb70];
    }

    bb63: {
        drop(_2) -> [return: bb64, unwind continue];
    }

    bb64: {
        return;
    }

    bb65 (cleanup): {
        drop(_34) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_24) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_14) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_4) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_3) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_2) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Configuration with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Configuration with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Configuration with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Configuration with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Configuration with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Configuration with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Configuration with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[7] in _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Configuration with 9 elements";
        _0 = &_1;
        return;
    }
}

promoted[8] in _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Configuration with 9 elements";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::<impl at src/configuration.rs:16:35: 16:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Visitor<'_>, _2: __A) -> Result<Configuration, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Configuration>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::Configuration, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<configuration::General>;
    let mut _12: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: isize;
    let mut _20: bool;
    let _21: &std::option::Option<configuration::General>;
    let mut _22: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _23: std::option::Option<configuration::General>;
    let mut _24: std::result::Result<configuration::General, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _25: &mut __A;
    let mut _26: isize;
    let mut _29: bool;
    let _30: &std::option::Option<configuration::Authentication>;
    let mut _31: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _32: std::option::Option<configuration::Authentication>;
    let mut _33: std::result::Result<configuration::Authentication, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _34: &mut __A;
    let mut _35: isize;
    let mut _38: bool;
    let _39: &std::option::Option<configuration::Persistence>;
    let mut _40: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _41: std::option::Option<configuration::Persistence>;
    let mut _42: std::result::Result<configuration::Persistence, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _43: &mut __A;
    let mut _44: isize;
    let mut _47: bool;
    let _48: &std::option::Option<configuration::Encryption>;
    let mut _49: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _50: std::option::Option<configuration::Encryption>;
    let mut _51: std::result::Result<configuration::Encryption, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: bool;
    let _57: &std::option::Option<configuration::ServerSentEvent>;
    let mut _58: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _59: std::option::Option<configuration::ServerSentEvent>;
    let mut _60: std::result::Result<configuration::ServerSentEvent, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: isize;
    let mut _65: bool;
    let _66: &std::option::Option<configuration::WebUI>;
    let mut _67: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _68: std::option::Option<configuration::WebUI>;
    let mut _69: std::result::Result<configuration::WebUI, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _70: &mut __A;
    let mut _71: isize;
    let mut _74: bool;
    let _75: &std::option::Option<configuration::Store>;
    let mut _76: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _77: std::option::Option<configuration::Store>;
    let mut _78: std::result::Result<configuration::Store, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _79: &mut __A;
    let mut _80: isize;
    let mut _83: bool;
    let _84: &std::option::Option<configuration::Http>;
    let mut _85: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _86: std::option::Option<configuration::Http>;
    let mut _87: std::result::Result<configuration::Http, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _88: &mut __A;
    let mut _89: isize;
    let mut _92: bool;
    let _93: &std::option::Option<configuration::Logging>;
    let mut _94: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _95: std::option::Option<configuration::Logging>;
    let mut _96: std::result::Result<configuration::Logging, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _97: &mut __A;
    let mut _98: isize;
    let mut _101: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _102: &mut __A;
    let mut _103: isize;
    let mut _107: isize;
    let mut _110: isize;
    let mut _113: isize;
    let mut _116: isize;
    let mut _119: isize;
    let mut _122: isize;
    let mut _125: isize;
    let mut _128: isize;
    let mut _131: isize;
    let mut _133: configuration::Configuration;
    let mut _134: configuration::General;
    let mut _135: configuration::Authentication;
    let mut _136: configuration::Persistence;
    let mut _137: configuration::Encryption;
    let mut _138: configuration::ServerSentEvent;
    let mut _139: configuration::WebUI;
    let mut _140: configuration::Store;
    let mut _141: configuration::Http;
    let mut _142: configuration::Logging;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: bool;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: bool;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<configuration::Authentication>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<configuration::Persistence>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<configuration::Encryption>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<configuration::ServerSentEvent>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<configuration::WebUI>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<configuration::Store>;
                            scope 7 {
                                debug __field6 => _9;
                                let mut _10: std::option::Option<configuration::Http>;
                                scope 8 {
                                    debug __field7 => _10;
                                    let mut _11: std::option::Option<configuration::Logging>;
                                    scope 9 {
                                        debug __field8 => _11;
                                        let _105: configuration::Configuration;
                                        scope 10 {
                                            debug __key => _18;
                                            let _15: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field>;
                                            let _16: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                            let _18: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field;
                                            let _27: configuration::General;
                                            let _28: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                            let _36: configuration::Authentication;
                                            let _37: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                            let _45: configuration::Persistence;
                                            let _46: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                            let _54: configuration::Encryption;
                                            let _55: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                            let _63: configuration::ServerSentEvent;
                                            let _64: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                            let _72: configuration::WebUI;
                                            let _73: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                            let _81: configuration::Store;
                                            let _82: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                            let _90: configuration::Http;
                                            let _91: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                            let _99: configuration::Logging;
                                            let _100: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                            let _104: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                            scope 11 {
                                                debug __val => _15;
                                            }
                                            scope 12 {
                                                debug __err => _16;
                                            }
                                            scope 13 {
                                                debug __val => _27;
                                            }
                                            scope 14 {
                                                debug __err => _28;
                                            }
                                            scope 15 {
                                                debug __val => _36;
                                            }
                                            scope 16 {
                                                debug __err => _37;
                                            }
                                            scope 17 {
                                                debug __val => _45;
                                            }
                                            scope 18 {
                                                debug __err => _46;
                                            }
                                            scope 19 {
                                                debug __val => _54;
                                            }
                                            scope 20 {
                                                debug __err => _55;
                                            }
                                            scope 21 {
                                                debug __val => _63;
                                            }
                                            scope 22 {
                                                debug __err => _64;
                                            }
                                            scope 23 {
                                                debug __val => _72;
                                            }
                                            scope 24 {
                                                debug __err => _73;
                                            }
                                            scope 25 {
                                                debug __val => _81;
                                            }
                                            scope 26 {
                                                debug __err => _82;
                                            }
                                            scope 27 {
                                                debug __val => _90;
                                            }
                                            scope 28 {
                                                debug __err => _91;
                                            }
                                            scope 29 {
                                                debug __val => _99;
                                            }
                                            scope 30 {
                                                debug __err => _100;
                                            }
                                            scope 31 {
                                            }
                                            scope 32 {
                                                debug __val => const IgnoredAny;
                                            }
                                            scope 33 {
                                                debug __err => _104;
                                            }
                                        }
                                        scope 34 {
                                            debug __default => _105;
                                            let _106: configuration::General;
                                            let _108: configuration::General;
                                            scope 35 {
                                                debug __field0 => _106;
                                                let _109: configuration::Authentication;
                                                let _111: configuration::Authentication;
                                                scope 37 {
                                                    debug __field1 => _109;
                                                    let _112: configuration::Persistence;
                                                    let _114: configuration::Persistence;
                                                    scope 39 {
                                                        debug __field2 => _112;
                                                        let _115: configuration::Encryption;
                                                        let _117: configuration::Encryption;
                                                        scope 41 {
                                                            debug __field3 => _115;
                                                            let _118: configuration::ServerSentEvent;
                                                            let _120: configuration::ServerSentEvent;
                                                            scope 43 {
                                                                debug __field4 => _118;
                                                                let _121: configuration::WebUI;
                                                                let _123: configuration::WebUI;
                                                                scope 45 {
                                                                    debug __field5 => _121;
                                                                    let _124: configuration::Store;
                                                                    let _126: configuration::Store;
                                                                    scope 47 {
                                                                        debug __field6 => _124;
                                                                        let _127: configuration::Http;
                                                                        let _129: configuration::Http;
                                                                        scope 49 {
                                                                            debug __field7 => _127;
                                                                            let _130: configuration::Logging;
                                                                            let _132: configuration::Logging;
                                                                            scope 51 {
                                                                                debug __field8 => _130;
                                                                            }
                                                                            scope 52 {
                                                                                debug __field8 => _132;
                                                                            }
                                                                        }
                                                                        scope 50 {
                                                                            debug __field7 => _129;
                                                                        }
                                                                    }
                                                                    scope 48 {
                                                                        debug __field6 => _126;
                                                                    }
                                                                }
                                                                scope 46 {
                                                                    debug __field5 => _123;
                                                                }
                                                            }
                                                            scope 44 {
                                                                debug __field4 => _120;
                                                            }
                                                        }
                                                        scope 42 {
                                                            debug __field3 => _117;
                                                        }
                                                    }
                                                    scope 40 {
                                                        debug __field2 => _114;
                                                    }
                                                }
                                                scope 38 {
                                                    debug __field1 => _111;
                                                }
                                            }
                                            scope 36 {
                                                debug __field0 => _108;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _147 = const false;
        _152 = const false;
        _146 = const false;
        _151 = const false;
        _145 = const false;
        _150 = const false;
        _144 = const false;
        _149 = const false;
        _143 = const false;
        _148 = const false;
        _152 = const true;
        _3 = std::option::Option::<General>::None;
        _151 = const true;
        _4 = std::option::Option::<Authentication>::None;
        _150 = const true;
        _5 = std::option::Option::<Persistence>::None;
        _149 = const true;
        _6 = std::option::Option::<Encryption>::None;
        _7 = std::option::Option::<configuration::ServerSentEvent>::None;
        _8 = std::option::Option::<WebUI>::None;
        _9 = std::option::Option::<Store>::None;
        _10 = std::option::Option::<configuration::Http>::None;
        _148 = const true;
        _11 = std::option::Option::<Logging>::None;
        goto -> bb1;
    }

    bb1: {
        _13 = &mut _2;
        _12 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Configuration::<impl Deserialize<'de> for Configuration>::deserialize::__Field>(_13) -> [return: bb2, unwind: bb150];
    }

    bb2: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _16 = move ((_12 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _16);
        goto -> bb147;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _15 = move ((_12 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _105 = <Configuration as Default>::default() -> [return: bb93, unwind: bb150];
    }

    bb7: {
        _18 = move ((_15 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_Configuration::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Configuration>::deserialize::__Field);
        _19 = discriminant(_18);
        switchInt(move _19) -> [0: bb9, 1: bb19, 2: bb29, 3: bb39, 4: bb49, 5: bb57, 6: bb65, 7: bb73, 8: bb81, otherwise: bb8];
    }

    bb8: {
        _102 = &mut _2;
        _101 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_102) -> [return: bb91, unwind: bb150];
    }

    bb9: {
        _21 = &_3;
        _20 = std::option::Option::<General>::is_some(_21) -> [return: bb10, unwind: bb150];
    }

    bb10: {
        switchInt(move _20) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _22 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "general") -> [return: bb12, unwind: bb150];
    }

    bb12: {
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb147;
    }

    bb13: {
        _25 = &mut _2;
        _24 = <__A as MapAccess<'_>>::next_value::<General>(_25) -> [return: bb14, unwind: bb150];
    }

    bb14: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _28 = move ((_24 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _28);
        goto -> bb147;
    }

    bb16: {
        _27 = move ((_24 as Ok).0: configuration::General);
        _23 = std::option::Option::<General>::Some(move _27);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _152 = const true;
        _3 = move _23;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _152 = const true;
        _3 = move _23;
        goto -> bb150;
    }

    bb19: {
        _30 = &_4;
        _29 = std::option::Option::<Authentication>::is_some(_30) -> [return: bb20, unwind: bb150];
    }

    bb20: {
        switchInt(move _29) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _31 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "authentication") -> [return: bb22, unwind: bb150];
    }

    bb22: {
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb147;
    }

    bb23: {
        _34 = &mut _2;
        _33 = <__A as MapAccess<'_>>::next_value::<Authentication>(_34) -> [return: bb24, unwind: bb150];
    }

    bb24: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _37 = move ((_33 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _37);
        goto -> bb147;
    }

    bb26: {
        _36 = move ((_33 as Ok).0: configuration::Authentication);
        _32 = std::option::Option::<Authentication>::Some(move _36);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _151 = const true;
        _4 = move _32;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _151 = const true;
        _4 = move _32;
        goto -> bb150;
    }

    bb29: {
        _39 = &_5;
        _38 = std::option::Option::<Persistence>::is_some(_39) -> [return: bb30, unwind: bb150];
    }

    bb30: {
        switchInt(move _38) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _40 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "persistence") -> [return: bb32, unwind: bb150];
    }

    bb32: {
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _40);
        goto -> bb147;
    }

    bb33: {
        _43 = &mut _2;
        _42 = <__A as MapAccess<'_>>::next_value::<Persistence>(_43) -> [return: bb34, unwind: bb150];
    }

    bb34: {
        _44 = discriminant(_42);
        switchInt(move _44) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _46 = move ((_42 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _46);
        goto -> bb147;
    }

    bb36: {
        _45 = move ((_42 as Ok).0: configuration::Persistence);
        _41 = std::option::Option::<Persistence>::Some(move _45);
        drop(_5) -> [return: bb37, unwind: bb38];
    }

    bb37: {
        _150 = const true;
        _5 = move _41;
        goto -> bb1;
    }

    bb38 (cleanup): {
        _150 = const true;
        _5 = move _41;
        goto -> bb150;
    }

    bb39: {
        _48 = &_6;
        _47 = std::option::Option::<Encryption>::is_some(_48) -> [return: bb40, unwind: bb150];
    }

    bb40: {
        switchInt(move _47) -> [0: bb43, otherwise: bb41];
    }

    bb41: {
        _49 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "encryption") -> [return: bb42, unwind: bb150];
    }

    bb42: {
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _49);
        goto -> bb147;
    }

    bb43: {
        _52 = &mut _2;
        _51 = <__A as MapAccess<'_>>::next_value::<Encryption>(_52) -> [return: bb44, unwind: bb150];
    }

    bb44: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb46, 1: bb45, otherwise: bb4];
    }

    bb45: {
        _55 = move ((_51 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _55);
        goto -> bb147;
    }

    bb46: {
        _54 = move ((_51 as Ok).0: configuration::Encryption);
        _50 = std::option::Option::<Encryption>::Some(move _54);
        drop(_6) -> [return: bb47, unwind: bb48];
    }

    bb47: {
        _149 = const true;
        _6 = move _50;
        goto -> bb1;
    }

    bb48 (cleanup): {
        _149 = const true;
        _6 = move _50;
        goto -> bb150;
    }

    bb49: {
        _57 = &_7;
        _56 = std::option::Option::<configuration::ServerSentEvent>::is_some(_57) -> [return: bb50, unwind: bb150];
    }

    bb50: {
        switchInt(move _56) -> [0: bb53, otherwise: bb51];
    }

    bb51: {
        _58 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "sse") -> [return: bb52, unwind: bb150];
    }

    bb52: {
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _58);
        goto -> bb147;
    }

    bb53: {
        _61 = &mut _2;
        _60 = <__A as MapAccess<'_>>::next_value::<configuration::ServerSentEvent>(_61) -> [return: bb54, unwind: bb150];
    }

    bb54: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb56, 1: bb55, otherwise: bb4];
    }

    bb55: {
        _64 = move ((_60 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _64);
        goto -> bb147;
    }

    bb56: {
        _63 = move ((_60 as Ok).0: configuration::ServerSentEvent);
        _59 = std::option::Option::<configuration::ServerSentEvent>::Some(move _63);
        _7 = move _59;
        goto -> bb1;
    }

    bb57: {
        _66 = &_8;
        _65 = std::option::Option::<WebUI>::is_some(_66) -> [return: bb58, unwind: bb150];
    }

    bb58: {
        switchInt(move _65) -> [0: bb61, otherwise: bb59];
    }

    bb59: {
        _67 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "webui") -> [return: bb60, unwind: bb150];
    }

    bb60: {
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _67);
        goto -> bb147;
    }

    bb61: {
        _70 = &mut _2;
        _69 = <__A as MapAccess<'_>>::next_value::<WebUI>(_70) -> [return: bb62, unwind: bb150];
    }

    bb62: {
        _71 = discriminant(_69);
        switchInt(move _71) -> [0: bb64, 1: bb63, otherwise: bb4];
    }

    bb63: {
        _73 = move ((_69 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _73);
        goto -> bb147;
    }

    bb64: {
        _72 = move ((_69 as Ok).0: configuration::WebUI);
        _68 = std::option::Option::<WebUI>::Some(move _72);
        _8 = move _68;
        goto -> bb1;
    }

    bb65: {
        _75 = &_9;
        _74 = std::option::Option::<Store>::is_some(_75) -> [return: bb66, unwind: bb150];
    }

    bb66: {
        switchInt(move _74) -> [0: bb69, otherwise: bb67];
    }

    bb67: {
        _76 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "store") -> [return: bb68, unwind: bb150];
    }

    bb68: {
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _76);
        goto -> bb147;
    }

    bb69: {
        _79 = &mut _2;
        _78 = <__A as MapAccess<'_>>::next_value::<Store>(_79) -> [return: bb70, unwind: bb150];
    }

    bb70: {
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb72, 1: bb71, otherwise: bb4];
    }

    bb71: {
        _82 = move ((_78 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _82);
        goto -> bb147;
    }

    bb72: {
        _81 = move ((_78 as Ok).0: configuration::Store);
        _77 = std::option::Option::<Store>::Some(move _81);
        _9 = move _77;
        goto -> bb1;
    }

    bb73: {
        _84 = &_10;
        _83 = std::option::Option::<configuration::Http>::is_some(_84) -> [return: bb74, unwind: bb150];
    }

    bb74: {
        switchInt(move _83) -> [0: bb77, otherwise: bb75];
    }

    bb75: {
        _85 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "http") -> [return: bb76, unwind: bb150];
    }

    bb76: {
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _85);
        goto -> bb147;
    }

    bb77: {
        _88 = &mut _2;
        _87 = <__A as MapAccess<'_>>::next_value::<configuration::Http>(_88) -> [return: bb78, unwind: bb150];
    }

    bb78: {
        _89 = discriminant(_87);
        switchInt(move _89) -> [0: bb80, 1: bb79, otherwise: bb4];
    }

    bb79: {
        _91 = move ((_87 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _91);
        goto -> bb147;
    }

    bb80: {
        _90 = move ((_87 as Ok).0: configuration::Http);
        _86 = std::option::Option::<configuration::Http>::Some(move _90);
        _10 = move _86;
        goto -> bb1;
    }

    bb81: {
        _93 = &_11;
        _92 = std::option::Option::<Logging>::is_some(_93) -> [return: bb82, unwind: bb150];
    }

    bb82: {
        switchInt(move _92) -> [0: bb85, otherwise: bb83];
    }

    bb83: {
        _94 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "logging") -> [return: bb84, unwind: bb150];
    }

    bb84: {
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _94);
        goto -> bb147;
    }

    bb85: {
        _97 = &mut _2;
        _96 = <__A as MapAccess<'_>>::next_value::<Logging>(_97) -> [return: bb86, unwind: bb150];
    }

    bb86: {
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb88, 1: bb87, otherwise: bb4];
    }

    bb87: {
        _100 = move ((_96 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _100);
        goto -> bb147;
    }

    bb88: {
        _99 = move ((_96 as Ok).0: configuration::Logging);
        _95 = std::option::Option::<Logging>::Some(move _99);
        drop(_11) -> [return: bb89, unwind: bb90];
    }

    bb89: {
        _148 = const true;
        _11 = move _95;
        goto -> bb1;
    }

    bb90 (cleanup): {
        _148 = const true;
        _11 = move _95;
        goto -> bb150;
    }

    bb91: {
        _103 = discriminant(_101);
        switchInt(move _103) -> [0: bb1, 1: bb92, otherwise: bb4];
    }

    bb92: {
        _104 = move ((_101 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Err(move _104);
        goto -> bb147;
    }

    bb93: {
        _143 = const true;
        _144 = const true;
        _145 = const true;
        _146 = const true;
        _147 = const true;
        _107 = discriminant(_3);
        switchInt(move _107) -> [0: bb94, 1: bb95, otherwise: bb4];
    }

    bb94: {
        _147 = const false;
        _106 = move (_105.0: configuration::General);
        goto -> bb96;
    }

    bb95: {
        _152 = const false;
        _108 = move ((_3 as Some).0: configuration::General);
        _106 = move _108;
        goto -> bb96;
    }

    bb96: {
        _110 = discriminant(_4);
        switchInt(move _110) -> [0: bb97, 1: bb98, otherwise: bb4];
    }

    bb97: {
        _146 = const false;
        _109 = move (_105.1: configuration::Authentication);
        goto -> bb99;
    }

    bb98: {
        _151 = const false;
        _111 = move ((_4 as Some).0: configuration::Authentication);
        _109 = move _111;
        goto -> bb99;
    }

    bb99: {
        _113 = discriminant(_5);
        switchInt(move _113) -> [0: bb100, 1: bb101, otherwise: bb4];
    }

    bb100: {
        _145 = const false;
        _112 = move (_105.2: configuration::Persistence);
        goto -> bb102;
    }

    bb101: {
        _150 = const false;
        _114 = move ((_5 as Some).0: configuration::Persistence);
        _112 = move _114;
        goto -> bb102;
    }

    bb102: {
        _116 = discriminant(_6);
        switchInt(move _116) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        _144 = const false;
        _115 = move (_105.3: configuration::Encryption);
        goto -> bb105;
    }

    bb104: {
        _149 = const false;
        _117 = move ((_6 as Some).0: configuration::Encryption);
        _115 = move _117;
        goto -> bb105;
    }

    bb105: {
        _119 = discriminant(_7);
        switchInt(move _119) -> [0: bb106, 1: bb107, otherwise: bb4];
    }

    bb106: {
        _118 = move (_105.4: configuration::ServerSentEvent);
        goto -> bb108;
    }

    bb107: {
        _120 = move ((_7 as Some).0: configuration::ServerSentEvent);
        _118 = move _120;
        goto -> bb108;
    }

    bb108: {
        _122 = discriminant(_8);
        switchInt(move _122) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        _121 = move (_105.5: configuration::WebUI);
        goto -> bb111;
    }

    bb110: {
        _123 = move ((_8 as Some).0: configuration::WebUI);
        _121 = move _123;
        goto -> bb111;
    }

    bb111: {
        _125 = discriminant(_9);
        switchInt(move _125) -> [0: bb112, 1: bb113, otherwise: bb4];
    }

    bb112: {
        _124 = move (_105.6: configuration::Store);
        goto -> bb114;
    }

    bb113: {
        _126 = move ((_9 as Some).0: configuration::Store);
        _124 = move _126;
        goto -> bb114;
    }

    bb114: {
        _128 = discriminant(_10);
        switchInt(move _128) -> [0: bb115, 1: bb116, otherwise: bb4];
    }

    bb115: {
        _127 = move (_105.7: configuration::Http);
        goto -> bb117;
    }

    bb116: {
        _129 = move ((_10 as Some).0: configuration::Http);
        _127 = move _129;
        goto -> bb117;
    }

    bb117: {
        _131 = discriminant(_11);
        switchInt(move _131) -> [0: bb118, 1: bb119, otherwise: bb4];
    }

    bb118: {
        _143 = const false;
        _130 = move (_105.8: configuration::Logging);
        goto -> bb120;
    }

    bb119: {
        _148 = const false;
        _132 = move ((_11 as Some).0: configuration::Logging);
        _130 = move _132;
        goto -> bb120;
    }

    bb120: {
        _134 = move _106;
        _135 = move _109;
        _136 = move _112;
        _137 = move _115;
        _138 = move _118;
        _139 = move _121;
        _140 = move _124;
        _141 = move _127;
        _142 = move _130;
        _133 = Configuration { general: move _134, authentication: move _135, persistence: move _136, encryption: move _137, sse: move _138, webui: move _139, store: move _140, http: move _141, logging: move _142 };
        _0 = Result::<Configuration, <__A as MapAccess<'_>>::Error>::Ok(move _133);
        switchInt(_147) -> [0: bb144, otherwise: bb146];
    }

    bb121: {
        _148 = const false;
        drop(_6) -> [return: bb122, unwind: bb156];
    }

    bb122: {
        _149 = const false;
        drop(_5) -> [return: bb123, unwind: bb159];
    }

    bb123: {
        _150 = const false;
        drop(_4) -> [return: bb124, unwind: bb162];
    }

    bb124: {
        _151 = const false;
        drop(_3) -> [return: bb125, unwind: bb127];
    }

    bb125: {
        _152 = const false;
        drop(_2) -> [return: bb126, unwind continue];
    }

    bb126: {
        return;
    }

    bb127 (cleanup): {
        drop(_2) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        resume;
    }

    bb129: {
        _143 = const false;
        _144 = const false;
        _145 = const false;
        _146 = const false;
        _147 = const false;
        _148 = const false;
        _149 = const false;
        _150 = const false;
        _151 = const false;
        _152 = const false;
        drop(_2) -> [return: bb126, unwind continue];
    }

    bb130 (cleanup): {
        switchInt(_143) -> [0: bb150, otherwise: bb131];
    }

    bb131 (cleanup): {
        drop((_105.8: configuration::Logging)) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        switchInt(_144) -> [0: bb130, otherwise: bb133];
    }

    bb133 (cleanup): {
        drop((_105.3: configuration::Encryption)) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        switchInt(_145) -> [0: bb132, otherwise: bb135];
    }

    bb135 (cleanup): {
        drop((_105.2: configuration::Persistence)) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        switchInt(_146) -> [0: bb134, otherwise: bb137];
    }

    bb137 (cleanup): {
        drop((_105.1: configuration::Authentication)) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb138: {
        switchInt(_143) -> [0: bb129, otherwise: bb139];
    }

    bb139: {
        drop((_105.8: configuration::Logging)) -> [return: bb129, unwind: bb150];
    }

    bb140: {
        switchInt(_144) -> [0: bb138, otherwise: bb141];
    }

    bb141: {
        drop((_105.3: configuration::Encryption)) -> [return: bb138, unwind: bb130];
    }

    bb142: {
        switchInt(_145) -> [0: bb140, otherwise: bb143];
    }

    bb143: {
        drop((_105.2: configuration::Persistence)) -> [return: bb140, unwind: bb132];
    }

    bb144: {
        switchInt(_146) -> [0: bb142, otherwise: bb145];
    }

    bb145: {
        drop((_105.1: configuration::Authentication)) -> [return: bb142, unwind: bb134];
    }

    bb146: {
        drop((_105.0: configuration::General)) -> [return: bb144, unwind: bb136];
    }

    bb147: {
        drop(_11) -> [return: bb121, unwind: bb153];
    }

    bb148 (cleanup): {
        switchInt(_148) -> [0: bb153, otherwise: bb149];
    }

    bb149 (cleanup): {
        drop(((_11 as Some).0: configuration::Logging)) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        _153 = discriminant(_11);
        switchInt(move _153) -> [1: bb148, otherwise: bb153];
    }

    bb151 (cleanup): {
        switchInt(_149) -> [0: bb156, otherwise: bb152];
    }

    bb152 (cleanup): {
        drop(((_6 as Some).0: configuration::Encryption)) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        _154 = discriminant(_6);
        switchInt(move _154) -> [1: bb151, otherwise: bb156];
    }

    bb154 (cleanup): {
        switchInt(_150) -> [0: bb159, otherwise: bb155];
    }

    bb155 (cleanup): {
        drop(((_5 as Some).0: configuration::Persistence)) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        _155 = discriminant(_5);
        switchInt(move _155) -> [1: bb154, otherwise: bb159];
    }

    bb157 (cleanup): {
        switchInt(_151) -> [0: bb162, otherwise: bb158];
    }

    bb158 (cleanup): {
        drop(((_4 as Some).0: configuration::Authentication)) -> [return: bb162, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        _156 = discriminant(_4);
        switchInt(move _156) -> [1: bb157, otherwise: bb162];
    }

    bb160 (cleanup): {
        switchInt(_152) -> [0: bb127, otherwise: bb161];
    }

    bb161 (cleanup): {
        drop(((_3 as Some).0: configuration::General)) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        _157 = discriminant(_3);
        switchInt(move _157) -> [1: bb160, otherwise: bb127];
    }
}

const _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 9];
    let _2: &[&str; 9];
    let _3: [&str; 9];
    let mut _4: &[&str; 9];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Configuration::<impl at src/configuration.rs:16:35: 16:46>::deserialize::FIELDS: &[&str; 9] = {
    let mut _0: &[&str; 9];
    let mut _1: [&str; 9];

    bb0: {
        _1 = [const "general", const "authentication", const "persistence", const "encryption", const "sse", const "webui", const "store", const "http", const "logging"];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:16:48: 16:55>::default() -> Configuration {
    let mut _0: configuration::Configuration;
    let mut _1: configuration::General;
    let mut _2: configuration::Authentication;
    let mut _3: configuration::Persistence;
    let mut _4: configuration::Encryption;
    let mut _5: configuration::ServerSentEvent;
    let mut _6: configuration::WebUI;
    let mut _7: configuration::Store;
    let mut _8: configuration::Http;
    let mut _9: configuration::Logging;

    bb0: {
        _1 = <General as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <Authentication as Default>::default() -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _3 = <Persistence as Default>::default() -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _4 = <Encryption as Default>::default() -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _5 = <configuration::ServerSentEvent as Default>::default() -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _6 = <WebUI as Default>::default() -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _7 = <Store as Default>::default() -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _8 = <configuration::Http as Default>::default() -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _9 = <Logging as Default>::default() -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _0 = Configuration { general: move _1, authentication: move _2, persistence: move _3, encryption: move _4, sse: move _5, webui: move _6, store: move _7, http: move _8, logging: move _9 };
        return;
    }

    bb10 (cleanup): {
        drop(_4) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }
}

fn configuration::<impl at src/configuration.rs:29:1: 29:19>::get_path() -> Result<PathBuf, AppDirsError> {
    let mut _0: std::result::Result<std::path::PathBuf, app_dirs::AppDirsError>;
    let mut _1: std::path::PathBuf;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, app_dirs::AppDirsError>, std::path::PathBuf>;
    let mut _3: std::result::Result<std::path::PathBuf, app_dirs::AppDirsError>;
    let mut _4: app_dirs::AppDataType;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, app_dirs::AppDirsError>;
    let _7: std::path::PathBuf;
    let _8: ();
    let mut _9: &mut std::path::PathBuf;
    let mut _10: std::path::PathBuf;
    let mut _11: &app_dirs::AppInfo;
    scope 1 {
        debug path => _1;
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = UserConfig;
        _11 = const _;
        _3 = get_app_root(move _4, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <Result<PathBuf, AppDirsError> as Try>::branch(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_2 as Continue).0: std::path::PathBuf);
        _1 = move _7;
        _9 = &mut _1;
        _8 = PathBuf::push::<&str>(move _9, const "lucid.yml") -> [return: bb6, unwind: bb8];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, app_dirs::AppDirsError>);
        _0 = <Result<PathBuf, AppDirsError> as FromResidual<Result<Infallible, AppDirsError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _10 = move _1;
        _0 = Result::<PathBuf, AppDirsError>::Ok(move _10);
        goto -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

promoted[0] in configuration::<impl at src/configuration.rs:29:1: 29:19>::get_path: &AppInfo = {
    let mut _0: &app_dirs::AppInfo;
    let mut _1: app_dirs::AppInfo;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:38:10: 38:15>::fmt(_1: &General, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 7];
    let _5: [&dyn std::fmt::Debug; 7];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &std::net::IpAddr;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &u16;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &u16;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &bool;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &std::string::String;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &std::string::String;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &&bool;
    let _20: &bool;
    let _21: &str;
    let mut _22: &[&str];
    let mut _23: &[&str; 7];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _23 = const _;
        _7 = &((*_1).0: std::net::IpAddr);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: u16);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: u16);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: bool);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: std::string::String);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: std::string::String);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _20 = &((*_1).6: bool);
        _19 = &_20;
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _21 = const "General";
        _22 = _23 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _21, move _22, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in configuration::<impl at src/configuration.rs:38:10: 38:15>::fmt: &[&str; 7] = {
    let mut _0: &[&str; 7];
    let mut _1: [&str; 7];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;

    bb0: {
        _3 = const "port";
        _2 = &(*_3);
        _5 = const "port_ssl";
        _4 = &(*_5);
        _7 = const "use_ssl";
        _6 = &(*_7);
        _9 = const "ssl_certificate";
        _8 = &(*_9);
        _11 = const "ssl_certificate_key";
        _10 = &(*_11);
        _13 = const "show_banner";
        _12 = &(*_13);
        _1 = [const "bind_address", move _2, move _4, move _6, move _8, move _10, move _12];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:38:17: 38:22>::clone(_1: &General) -> General {
    debug self => _1;
    let mut _0: configuration::General;
    let mut _2: std::net::IpAddr;
    let _3: &std::net::IpAddr;
    let mut _4: u16;
    let _5: &u16;
    let mut _6: u16;
    let _7: &u16;
    let mut _8: bool;
    let _9: &bool;
    let mut _10: std::string::String;
    let _11: &std::string::String;
    let mut _12: std::string::String;
    let _13: &std::string::String;
    let mut _14: bool;
    let _15: &bool;

    bb0: {
        _3 = &((*_1).0: std::net::IpAddr);
        _2 = <IpAddr as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: u16);
        _4 = (*_5);
        _7 = &((*_1).2: u16);
        _6 = (*_7);
        _9 = &((*_1).3: bool);
        _8 = (*_9);
        _11 = &((*_1).4: std::string::String);
        _10 = <std::string::String as Clone>::clone(_11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _13 = &((*_1).5: std::string::String);
        _12 = <std::string::String as Clone>::clone(_13) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _15 = &((*_1).6: bool);
        _14 = (*_15);
        _0 = General { bind_address: move _2, port: move _4, port_ssl: move _6, use_ssl: move _8, ssl_certificate: move _10, ssl_certificate_key: move _12, show_banner: move _14 };
        return;
    }

    bb4 (cleanup): {
        drop(_10) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

const _IMPL_SERIALIZE_FOR_General: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_General::<impl at src/configuration.rs:38:24: 38:33>::serialize(_1: &General, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: (usize, bool);
    let mut _15: (usize, bool);
    let mut _16: (usize, bool);
    let mut _17: (usize, bool);
    let mut _18: (usize, bool);
    let mut _19: (usize, bool);
    let mut _20: (usize, bool);
    let mut _21: isize;
    let _22: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _23: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _24: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _25: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _26: &std::net::IpAddr;
    let mut _27: isize;
    let mut _29: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _30: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _31: &u16;
    let mut _32: isize;
    let mut _34: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _35: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _36: &u16;
    let mut _37: isize;
    let mut _39: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _40: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _41: &bool;
    let mut _42: isize;
    let mut _44: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _45: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _46: &std::string::String;
    let mut _47: isize;
    let mut _49: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _50: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _51: &std::string::String;
    let mut _52: isize;
    let mut _54: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _55: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _56: &bool;
    let mut _57: isize;
    let mut _59: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _60: bool;
    let mut _61: bool;
    scope 1 {
        debug __serde_state => _3;
        let _28: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _33: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _38: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _43: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _48: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _53: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _58: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _28;
        }
        scope 6 {
            debug __val => const ();
        }
        scope 7 {
            debug __err => _33;
        }
        scope 8 {
            debug __val => const ();
        }
        scope 9 {
            debug __err => _38;
        }
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _43;
        }
        scope 12 {
            debug __val => const ();
        }
        scope 13 {
            debug __err => _48;
        }
        scope 14 {
            debug __val => const ();
        }
        scope 15 {
            debug __err => _53;
        }
        scope 16 {
            debug __val => const ();
        }
        scope 17 {
            debug __err => _58;
        }
    }
    scope 2 {
        debug __val => _22;
    }
    scope 3 {
        debug __err => _23;
    }

    bb0: {
        _60 = const false;
        _61 = const false;
        _61 = const true;
        _5 = move _2;
        _13 = const false as usize (IntToInt);
        _14 = CheckedAdd(_13, const 1_usize);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const 1_usize) -> [success: bb1, unwind: bb41];
    }

    bb1: {
        _12 = move (_14.0: usize);
        _15 = CheckedAdd(_12, const 1_usize);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, const 1_usize) -> [success: bb2, unwind: bb41];
    }

    bb2: {
        _11 = move (_15.0: usize);
        _16 = CheckedAdd(_11, const 1_usize);
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb3, unwind: bb41];
    }

    bb3: {
        _10 = move (_16.0: usize);
        _17 = CheckedAdd(_10, const 1_usize);
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_usize) -> [success: bb4, unwind: bb41];
    }

    bb4: {
        _9 = move (_17.0: usize);
        _18 = CheckedAdd(_9, const 1_usize);
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_usize) -> [success: bb5, unwind: bb41];
    }

    bb5: {
        _8 = move (_18.0: usize);
        _19 = CheckedAdd(_8, const 1_usize);
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const 1_usize) -> [success: bb6, unwind: bb41];
    }

    bb6: {
        _7 = move (_19.0: usize);
        _20 = CheckedAdd(_7, const 1_usize);
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb7, unwind: bb41];
    }

    bb7: {
        _6 = move (_20.0: usize);
        _61 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "General", move _6) -> [return: bb8, unwind: bb41];
    }

    bb8: {
        _61 = const false;
        _21 = discriminant(_4);
        switchInt(move _21) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        _23 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _23);
        goto -> bb35;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _22 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _60 = const true;
        _3 = move _22;
        _25 = &mut _3;
        _26 = &((*_1).0: std::net::IpAddr);
        _24 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<IpAddr>(_25, const "bind_address", _26) -> [return: bb12, unwind: bb39];
    }

    bb12: {
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb14, 1: bb13, otherwise: bb10];
    }

    bb13: {
        _28 = move ((_24 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _28);
        goto -> bb34;
    }

    bb14: {
        _30 = &mut _3;
        _31 = &((*_1).1: u16);
        _29 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u16>(_30, const "port", _31) -> [return: bb15, unwind: bb39];
    }

    bb15: {
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb17, 1: bb16, otherwise: bb10];
    }

    bb16: {
        _33 = move ((_29 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _33);
        goto -> bb34;
    }

    bb17: {
        _35 = &mut _3;
        _36 = &((*_1).2: u16);
        _34 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u16>(_35, const "port_ssl", _36) -> [return: bb18, unwind: bb39];
    }

    bb18: {
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb20, 1: bb19, otherwise: bb10];
    }

    bb19: {
        _38 = move ((_34 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _38);
        goto -> bb34;
    }

    bb20: {
        _40 = &mut _3;
        _41 = &((*_1).3: bool);
        _39 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_40, const "use_ssl", _41) -> [return: bb21, unwind: bb39];
    }

    bb21: {
        _42 = discriminant(_39);
        switchInt(move _42) -> [0: bb23, 1: bb22, otherwise: bb10];
    }

    bb22: {
        _43 = move ((_39 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _43);
        goto -> bb34;
    }

    bb23: {
        _45 = &mut _3;
        _46 = &((*_1).4: std::string::String);
        _44 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_45, const "ssl_certificate", _46) -> [return: bb24, unwind: bb39];
    }

    bb24: {
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb26, 1: bb25, otherwise: bb10];
    }

    bb25: {
        _48 = move ((_44 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _48);
        goto -> bb34;
    }

    bb26: {
        _50 = &mut _3;
        _51 = &((*_1).5: std::string::String);
        _49 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_50, const "ssl_certificate_key", _51) -> [return: bb27, unwind: bb39];
    }

    bb27: {
        _52 = discriminant(_49);
        switchInt(move _52) -> [0: bb29, 1: bb28, otherwise: bb10];
    }

    bb28: {
        _53 = move ((_49 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _53);
        goto -> bb34;
    }

    bb29: {
        _55 = &mut _3;
        _56 = &((*_1).6: bool);
        _54 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_55, const "show_banner", _56) -> [return: bb30, unwind: bb39];
    }

    bb30: {
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb32, 1: bb31, otherwise: bb10];
    }

    bb31: {
        _58 = move ((_54 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _58);
        goto -> bb34;
    }

    bb32: {
        _60 = const false;
        _59 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _59) -> [return: bb33, unwind: bb39];
    }

    bb33: {
        _60 = const false;
        goto -> bb36;
    }

    bb34: {
        drop(_3) -> [return: bb35, unwind continue];
    }

    bb35: {
        _60 = const false;
        goto -> bb36;
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        resume;
    }

    bb38 (cleanup): {
        drop(_3) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_60) -> [0: bb37, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_5) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_61) -> [0: bb37, otherwise: bb40];
    }
}

const _IMPL_DESERIALIZE_FOR_General: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize(_1: __D) -> Result<General, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::General, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Visitor<'_>>(move _1, const "General", const _, const _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<General>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _8: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _9: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _10: __E;
    let mut _11: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _13: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, otherwise: bb1];
    }

    bb1: {
        _11 = Unexpected::<'_>::Unsigned(_2);
        _13 = const _;
        _12 = _13 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _11, move _12) -> [return: bb9, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb10;
    }

    bb3: {
        _4 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb10;
    }

    bb4: {
        _5 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb10;
    }

    bb5: {
        _6 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb6: {
        _7 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field4;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb7: {
        _8 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field5;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb10;
    }

    bb8: {
        _9 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field6;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Err(move _10);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 7";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _11: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _12: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _13: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _14: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _15: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _16: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _17: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;

    bb0: {
        _9 = <str as PartialEq>::eq(_2, const "bind_address") -> [return: bb21, unwind continue];
    }

    bb1: {
        _10 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb22;
    }

    bb2: {
        _8 = <str as PartialEq>::eq(_2, const "port") -> [return: bb20, unwind continue];
    }

    bb3: {
        _11 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb22;
    }

    bb4: {
        _7 = <str as PartialEq>::eq(_2, const "port_ssl") -> [return: bb19, unwind continue];
    }

    bb5: {
        _12 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb22;
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "use_ssl") -> [return: bb18, unwind continue];
    }

    bb7: {
        _13 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb22;
    }

    bb8: {
        _5 = <str as PartialEq>::eq(_2, const "ssl_certificate") -> [return: bb17, unwind continue];
    }

    bb9: {
        _14 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field4;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb22;
    }

    bb10: {
        _4 = <str as PartialEq>::eq(_2, const "ssl_certificate_key") -> [return: bb16, unwind continue];
    }

    bb11: {
        _15 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field5;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb22;
    }

    bb12: {
        _3 = <str as PartialEq>::eq(_2, const "show_banner") -> [return: bb15, unwind continue];
    }

    bb13: {
        _16 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field6;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb22;
    }

    bb14: {
        _17 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb22;
    }

    bb15: {
        switchInt(move _3) -> [0: bb14, otherwise: bb13];
    }

    bb16: {
        switchInt(move _4) -> [0: bb12, otherwise: bb11];
    }

    bb17: {
        switchInt(move _5) -> [0: bb10, otherwise: bb9];
    }

    bb18: {
        switchInt(move _6) -> [0: bb8, otherwise: bb7];
    }

    bb19: {
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb20: {
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb21: {
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb22: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _25: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _26: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _27: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _28: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _29: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _30: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
    let mut _31: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;

    bb0: {
        _21 = Len((*_2));
        _22 = const 12_usize;
        _23 = Eq(move _21, move _22);
        switchInt(move _23) -> [0: bb14, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 12]) -> [98: bb2, otherwise: bb13];
    }

    bb2: {
        switchInt((*_2)[1 of 12]) -> [105: bb3, otherwise: bb13];
    }

    bb3: {
        switchInt((*_2)[2 of 12]) -> [110: bb4, otherwise: bb13];
    }

    bb4: {
        switchInt((*_2)[3 of 12]) -> [100: bb5, otherwise: bb13];
    }

    bb5: {
        switchInt((*_2)[4 of 12]) -> [95: bb6, otherwise: bb13];
    }

    bb6: {
        switchInt((*_2)[5 of 12]) -> [97: bb7, otherwise: bb13];
    }

    bb7: {
        switchInt((*_2)[6 of 12]) -> [100: bb8, otherwise: bb13];
    }

    bb8: {
        switchInt((*_2)[7 of 12]) -> [100: bb9, otherwise: bb13];
    }

    bb9: {
        switchInt((*_2)[8 of 12]) -> [114: bb10, otherwise: bb13];
    }

    bb10: {
        switchInt((*_2)[9 of 12]) -> [101: bb11, otherwise: bb13];
    }

    bb11: {
        switchInt((*_2)[10 of 12]) -> [115: bb12, otherwise: bb13];
    }

    bb12: {
        switchInt((*_2)[11 of 12]) -> [115: bb84, otherwise: bb13];
    }

    bb13: {
        _31 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb91;
    }

    bb14: {
        _18 = Len((*_2));
        _19 = const 4_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb19, otherwise: bb15];
    }

    bb15: {
        switchInt((*_2)[0 of 4]) -> [112: bb16, otherwise: bb13];
    }

    bb16: {
        switchInt((*_2)[1 of 4]) -> [111: bb17, otherwise: bb13];
    }

    bb17: {
        switchInt((*_2)[2 of 4]) -> [114: bb18, otherwise: bb13];
    }

    bb18: {
        switchInt((*_2)[3 of 4]) -> [116: bb85, otherwise: bb13];
    }

    bb19: {
        _15 = Len((*_2));
        _16 = const 8_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb28, otherwise: bb20];
    }

    bb20: {
        switchInt((*_2)[0 of 8]) -> [112: bb21, otherwise: bb13];
    }

    bb21: {
        switchInt((*_2)[1 of 8]) -> [111: bb22, otherwise: bb13];
    }

    bb22: {
        switchInt((*_2)[2 of 8]) -> [114: bb23, otherwise: bb13];
    }

    bb23: {
        switchInt((*_2)[3 of 8]) -> [116: bb24, otherwise: bb13];
    }

    bb24: {
        switchInt((*_2)[4 of 8]) -> [95: bb25, otherwise: bb13];
    }

    bb25: {
        switchInt((*_2)[5 of 8]) -> [115: bb26, otherwise: bb13];
    }

    bb26: {
        switchInt((*_2)[6 of 8]) -> [115: bb27, otherwise: bb13];
    }

    bb27: {
        switchInt((*_2)[7 of 8]) -> [108: bb86, otherwise: bb13];
    }

    bb28: {
        _12 = Len((*_2));
        _13 = const 7_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb36, otherwise: bb29];
    }

    bb29: {
        switchInt((*_2)[0 of 7]) -> [117: bb30, otherwise: bb13];
    }

    bb30: {
        switchInt((*_2)[1 of 7]) -> [115: bb31, otherwise: bb13];
    }

    bb31: {
        switchInt((*_2)[2 of 7]) -> [101: bb32, otherwise: bb13];
    }

    bb32: {
        switchInt((*_2)[3 of 7]) -> [95: bb33, otherwise: bb13];
    }

    bb33: {
        switchInt((*_2)[4 of 7]) -> [115: bb34, otherwise: bb13];
    }

    bb34: {
        switchInt((*_2)[5 of 7]) -> [115: bb35, otherwise: bb13];
    }

    bb35: {
        switchInt((*_2)[6 of 7]) -> [108: bb87, otherwise: bb13];
    }

    bb36: {
        _9 = Len((*_2));
        _10 = const 15_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb52, otherwise: bb37];
    }

    bb37: {
        switchInt((*_2)[0 of 15]) -> [115: bb38, otherwise: bb13];
    }

    bb38: {
        switchInt((*_2)[1 of 15]) -> [115: bb39, otherwise: bb13];
    }

    bb39: {
        switchInt((*_2)[2 of 15]) -> [108: bb40, otherwise: bb13];
    }

    bb40: {
        switchInt((*_2)[3 of 15]) -> [95: bb41, otherwise: bb13];
    }

    bb41: {
        switchInt((*_2)[4 of 15]) -> [99: bb42, otherwise: bb13];
    }

    bb42: {
        switchInt((*_2)[5 of 15]) -> [101: bb43, otherwise: bb13];
    }

    bb43: {
        switchInt((*_2)[6 of 15]) -> [114: bb44, otherwise: bb13];
    }

    bb44: {
        switchInt((*_2)[7 of 15]) -> [116: bb45, otherwise: bb13];
    }

    bb45: {
        switchInt((*_2)[8 of 15]) -> [105: bb46, otherwise: bb13];
    }

    bb46: {
        switchInt((*_2)[9 of 15]) -> [102: bb47, otherwise: bb13];
    }

    bb47: {
        switchInt((*_2)[10 of 15]) -> [105: bb48, otherwise: bb13];
    }

    bb48: {
        switchInt((*_2)[11 of 15]) -> [99: bb49, otherwise: bb13];
    }

    bb49: {
        switchInt((*_2)[12 of 15]) -> [97: bb50, otherwise: bb13];
    }

    bb50: {
        switchInt((*_2)[13 of 15]) -> [116: bb51, otherwise: bb13];
    }

    bb51: {
        switchInt((*_2)[14 of 15]) -> [101: bb88, otherwise: bb13];
    }

    bb52: {
        _6 = Len((*_2));
        _7 = const 19_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb72, otherwise: bb53];
    }

    bb53: {
        switchInt((*_2)[0 of 19]) -> [115: bb54, otherwise: bb13];
    }

    bb54: {
        switchInt((*_2)[1 of 19]) -> [115: bb55, otherwise: bb13];
    }

    bb55: {
        switchInt((*_2)[2 of 19]) -> [108: bb56, otherwise: bb13];
    }

    bb56: {
        switchInt((*_2)[3 of 19]) -> [95: bb57, otherwise: bb13];
    }

    bb57: {
        switchInt((*_2)[4 of 19]) -> [99: bb58, otherwise: bb13];
    }

    bb58: {
        switchInt((*_2)[5 of 19]) -> [101: bb59, otherwise: bb13];
    }

    bb59: {
        switchInt((*_2)[6 of 19]) -> [114: bb60, otherwise: bb13];
    }

    bb60: {
        switchInt((*_2)[7 of 19]) -> [116: bb61, otherwise: bb13];
    }

    bb61: {
        switchInt((*_2)[8 of 19]) -> [105: bb62, otherwise: bb13];
    }

    bb62: {
        switchInt((*_2)[9 of 19]) -> [102: bb63, otherwise: bb13];
    }

    bb63: {
        switchInt((*_2)[10 of 19]) -> [105: bb64, otherwise: bb13];
    }

    bb64: {
        switchInt((*_2)[11 of 19]) -> [99: bb65, otherwise: bb13];
    }

    bb65: {
        switchInt((*_2)[12 of 19]) -> [97: bb66, otherwise: bb13];
    }

    bb66: {
        switchInt((*_2)[13 of 19]) -> [116: bb67, otherwise: bb13];
    }

    bb67: {
        switchInt((*_2)[14 of 19]) -> [101: bb68, otherwise: bb13];
    }

    bb68: {
        switchInt((*_2)[15 of 19]) -> [95: bb69, otherwise: bb13];
    }

    bb69: {
        switchInt((*_2)[16 of 19]) -> [107: bb70, otherwise: bb13];
    }

    bb70: {
        switchInt((*_2)[17 of 19]) -> [101: bb71, otherwise: bb13];
    }

    bb71: {
        switchInt((*_2)[18 of 19]) -> [121: bb89, otherwise: bb13];
    }

    bb72: {
        _3 = Len((*_2));
        _4 = const 11_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb13, otherwise: bb73];
    }

    bb73: {
        switchInt((*_2)[0 of 11]) -> [115: bb74, otherwise: bb13];
    }

    bb74: {
        switchInt((*_2)[1 of 11]) -> [104: bb75, otherwise: bb13];
    }

    bb75: {
        switchInt((*_2)[2 of 11]) -> [111: bb76, otherwise: bb13];
    }

    bb76: {
        switchInt((*_2)[3 of 11]) -> [119: bb77, otherwise: bb13];
    }

    bb77: {
        switchInt((*_2)[4 of 11]) -> [95: bb78, otherwise: bb13];
    }

    bb78: {
        switchInt((*_2)[5 of 11]) -> [98: bb79, otherwise: bb13];
    }

    bb79: {
        switchInt((*_2)[6 of 11]) -> [97: bb80, otherwise: bb13];
    }

    bb80: {
        switchInt((*_2)[7 of 11]) -> [110: bb81, otherwise: bb13];
    }

    bb81: {
        switchInt((*_2)[8 of 11]) -> [110: bb82, otherwise: bb13];
    }

    bb82: {
        switchInt((*_2)[9 of 11]) -> [101: bb83, otherwise: bb13];
    }

    bb83: {
        switchInt((*_2)[10 of 11]) -> [114: bb90, otherwise: bb13];
    }

    bb84: {
        _24 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb91;
    }

    bb85: {
        _25 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb91;
    }

    bb86: {
        _26 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb91;
    }

    bb87: {
        _27 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb91;
    }

    bb88: {
        _28 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field4;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb91;
    }

    bb89: {
        _29 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field5;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb91;
    }

    bb90: {
        _30 = _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field::__field6;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb91;
    }

    bb91: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct General";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Visitor<'_>, _2: __A) -> Result<General, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<General>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::General, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: configuration::General;
    let mut _4: std::result::Result<std::option::Option<std::net::IpAddr>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<u16>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _22: std::result::Result<std::option::Option<u16>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: isize;
    let mut _29: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _30: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _31: std::result::Result<std::option::Option<bool>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: isize;
    let mut _38: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _39: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _41: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _46: isize;
    let mut _48: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _49: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _51: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: isize;
    let mut _58: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _59: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _60: std::result::Result<std::option::Option<bool>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: isize;
    let mut _65: isize;
    let mut _67: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _68: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _69: configuration::General;
    let mut _70: std::string::String;
    let mut _71: std::string::String;
    scope 1 {
        debug __default => _3;
        let _7: std::option::Option<std::net::IpAddr>;
        let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _10: std::net::IpAddr;
        let mut _72: &&str;
        scope 2 {
            debug __field0 => _10;
            let _16: std::option::Option<u16>;
            let _17: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
            let _19: u16;
            let mut _73: &&str;
            scope 6 {
                debug __field1 => _19;
                let _25: std::option::Option<u16>;
                let _26: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                let _28: u16;
                let mut _74: &&str;
                scope 10 {
                    debug __field2 => _28;
                    let _34: std::option::Option<bool>;
                    let _35: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                    let _37: bool;
                    let mut _75: &&str;
                    scope 14 {
                        debug __field3 => _37;
                        let _40: std::string::String;
                        let _44: std::option::Option<std::string::String>;
                        let _45: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                        let _47: std::string::String;
                        let mut _76: &&str;
                        scope 18 {
                            debug __field4 => _40;
                            let _50: std::string::String;
                            let _54: std::option::Option<std::string::String>;
                            let _55: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                            let _57: std::string::String;
                            let mut _77: &&str;
                            scope 22 {
                                debug __field5 => _50;
                                let _63: std::option::Option<bool>;
                                let _64: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                                let _66: bool;
                                let mut _78: &&str;
                                scope 26 {
                                    debug __field6 => _66;
                                }
                                scope 27 {
                                    debug __val => _63;
                                }
                                scope 28 {
                                    debug __err => _64;
                                }
                                scope 29 {
                                    debug __value => _66;
                                }
                            }
                            scope 23 {
                                debug __val => _54;
                            }
                            scope 24 {
                                debug __err => _55;
                            }
                            scope 25 {
                                debug __value => _57;
                            }
                        }
                        scope 19 {
                            debug __val => _44;
                        }
                        scope 20 {
                            debug __err => _45;
                        }
                        scope 21 {
                            debug __value => _47;
                        }
                    }
                    scope 15 {
                        debug __val => _34;
                    }
                    scope 16 {
                        debug __err => _35;
                    }
                    scope 17 {
                        debug __value => _37;
                    }
                }
                scope 11 {
                    debug __val => _25;
                }
                scope 12 {
                    debug __err => _26;
                }
                scope 13 {
                    debug __value => _28;
                }
            }
            scope 7 {
                debug __val => _16;
            }
            scope 8 {
                debug __err => _17;
            }
            scope 9 {
                debug __value => _19;
            }
        }
        scope 3 {
            debug __val => _7;
        }
        scope 4 {
            debug __err => _8;
        }
        scope 5 {
            debug __value => _10;
        }
    }

    bb0: {
        _3 = <General as Default>::default() -> [return: bb1, unwind: bb54];
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<IpAddr>(_5) -> [return: bb2, unwind: bb53];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb48;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_4 as Ok).0: std::option::Option<std::net::IpAddr>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb4];
    }

    bb6: {
        _72 = const _;
        _12 = _72 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb8, unwind: bb53];
    }

    bb7: {
        _10 = ((_7 as Some).0: std::net::IpAddr);
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<u16>(_14) -> [return: bb9, unwind: bb53];
    }

    bb8: {
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb48;
    }

    bb9: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb11, 1: bb10, otherwise: bb4];
    }

    bb10: {
        _17 = move ((_13 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb48;
    }

    bb11: {
        _16 = ((_13 as Ok).0: std::option::Option<u16>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _73 = const _;
        _21 = _73 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb14, unwind: bb53];
    }

    bb13: {
        _19 = ((_16 as Some).0: u16);
        _23 = &mut _2;
        _22 = <__A as SeqAccess<'_>>::next_element::<u16>(_23) -> [return: bb15, unwind: bb53];
    }

    bb14: {
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb48;
    }

    bb15: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb17, 1: bb16, otherwise: bb4];
    }

    bb16: {
        _26 = move ((_22 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _26);
        goto -> bb48;
    }

    bb17: {
        _25 = ((_22 as Ok).0: std::option::Option<u16>);
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        _74 = const _;
        _30 = _74 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _29 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb20, unwind: bb53];
    }

    bb19: {
        _28 = ((_25 as Some).0: u16);
        _32 = &mut _2;
        _31 = <__A as SeqAccess<'_>>::next_element::<bool>(_32) -> [return: bb21, unwind: bb53];
    }

    bb20: {
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _29);
        goto -> bb48;
    }

    bb21: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb23, 1: bb22, otherwise: bb4];
    }

    bb22: {
        _35 = move ((_31 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _35);
        goto -> bb48;
    }

    bb23: {
        _34 = ((_31 as Ok).0: std::option::Option<bool>);
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        _75 = const _;
        _39 = _75 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _38 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 3_usize, move _39) -> [return: bb26, unwind: bb53];
    }

    bb25: {
        _37 = ((_34 as Some).0: bool);
        _42 = &mut _2;
        _41 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_42) -> [return: bb27, unwind: bb53];
    }

    bb26: {
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _38);
        goto -> bb48;
    }

    bb27: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb29, 1: bb28, otherwise: bb4];
    }

    bb28: {
        _45 = move ((_41 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _45);
        goto -> bb48;
    }

    bb29: {
        _44 = move ((_41 as Ok).0: std::option::Option<std::string::String>);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        _76 = const _;
        _49 = _76 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _48 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb32, unwind: bb53];
    }

    bb31: {
        _47 = move ((_44 as Some).0: std::string::String);
        _40 = move _47;
        _52 = &mut _2;
        _51 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_52) -> [return: bb33, unwind: bb52];
    }

    bb32: {
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _48);
        goto -> bb48;
    }

    bb33: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb35, 1: bb34, otherwise: bb4];
    }

    bb34: {
        _55 = move ((_51 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _55);
        goto -> bb47;
    }

    bb35: {
        _54 = move ((_51 as Ok).0: std::option::Option<std::string::String>);
        _56 = discriminant(_54);
        switchInt(move _56) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        _77 = const _;
        _59 = _77 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _58 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 5_usize, move _59) -> [return: bb38, unwind: bb52];
    }

    bb37: {
        _57 = move ((_54 as Some).0: std::string::String);
        _50 = move _57;
        _61 = &mut _2;
        _60 = <__A as SeqAccess<'_>>::next_element::<bool>(_61) -> [return: bb39, unwind: bb51];
    }

    bb38: {
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _58);
        goto -> bb47;
    }

    bb39: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb41, 1: bb40, otherwise: bb4];
    }

    bb40: {
        _64 = move ((_60 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _64);
        goto -> bb46;
    }

    bb41: {
        _63 = ((_60 as Ok).0: std::option::Option<bool>);
        _65 = discriminant(_63);
        switchInt(move _65) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        _78 = const _;
        _68 = _78 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _67 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 6_usize, move _68) -> [return: bb44, unwind: bb51];
    }

    bb43: {
        _66 = ((_63 as Some).0: bool);
        _70 = move _40;
        _71 = move _50;
        _69 = General { bind_address: _10, port: _19, port_ssl: _28, use_ssl: _37, ssl_certificate: move _70, ssl_certificate_key: move _71, show_banner: _66 };
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Ok(move _69);
        drop(_3) -> [return: bb45, unwind: bb54];
    }

    bb44: {
        _0 = Result::<General, <__A as SeqAccess<'_>>::Error>::Err(move _67);
        goto -> bb46;
    }

    bb45: {
        drop(_2) -> [return: bb50, unwind continue];
    }

    bb46: {
        drop(_50) -> [return: bb47, unwind: bb52];
    }

    bb47: {
        drop(_40) -> [return: bb48, unwind: bb53];
    }

    bb48: {
        drop(_3) -> [return: bb49, unwind: bb54];
    }

    bb49: {
        drop(_2) -> [return: bb50, unwind continue];
    }

    bb50: {
        return;
    }

    bb51 (cleanup): {
        drop(_50) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_40) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_3) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_2) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct General with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct General with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct General with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct General with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct General with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[5] in _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct General with 7 elements";
        _0 = &_1;
        return;
    }
}

promoted[6] in _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct General with 7 elements";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::<impl at src/configuration.rs:38:35: 38:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Visitor<'_>, _2: __A) -> Result<General, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<General>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::General, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::net::IpAddr>;
    let mut _10: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _11: &mut __A;
    let mut _12: isize;
    let mut _15: isize;
    let mut _17: isize;
    let mut _18: bool;
    let _19: &std::option::Option<std::net::IpAddr>;
    let mut _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _21: std::option::Option<std::net::IpAddr>;
    let mut _22: std::result::Result<std::net::IpAddr, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _23: &mut __A;
    let mut _24: isize;
    let mut _27: bool;
    let _28: &std::option::Option<u16>;
    let mut _29: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _30: std::option::Option<u16>;
    let mut _31: std::result::Result<u16, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: bool;
    let _37: &std::option::Option<u16>;
    let mut _38: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _39: std::option::Option<u16>;
    let mut _40: std::result::Result<u16, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _41: &mut __A;
    let mut _42: isize;
    let mut _45: bool;
    let _46: &std::option::Option<bool>;
    let mut _47: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _48: std::option::Option<bool>;
    let mut _49: std::result::Result<bool, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _50: &mut __A;
    let mut _51: isize;
    let mut _54: bool;
    let _55: &std::option::Option<std::string::String>;
    let mut _56: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _57: std::option::Option<std::string::String>;
    let mut _58: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _59: &mut __A;
    let mut _60: isize;
    let mut _63: bool;
    let _64: &std::option::Option<std::string::String>;
    let mut _65: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _66: std::option::Option<std::string::String>;
    let mut _67: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _68: &mut __A;
    let mut _69: isize;
    let mut _72: bool;
    let _73: &std::option::Option<bool>;
    let mut _74: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _75: std::option::Option<bool>;
    let mut _76: std::result::Result<bool, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _77: &mut __A;
    let mut _78: isize;
    let mut _81: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _82: &mut __A;
    let mut _83: isize;
    let mut _87: isize;
    let mut _90: isize;
    let mut _93: isize;
    let mut _96: isize;
    let mut _99: isize;
    let mut _102: isize;
    let mut _105: isize;
    let mut _107: configuration::General;
    let mut _108: std::net::IpAddr;
    let mut _109: u16;
    let mut _110: u16;
    let mut _111: bool;
    let mut _112: std::string::String;
    let mut _113: std::string::String;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: isize;
    let mut _120: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<u16>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<u16>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<bool>;
                scope 4 {
                    debug __field3 => _6;
                    let mut _7: std::option::Option<std::string::String>;
                    scope 5 {
                        debug __field4 => _7;
                        let mut _8: std::option::Option<std::string::String>;
                        scope 6 {
                            debug __field5 => _8;
                            let mut _9: std::option::Option<bool>;
                            scope 7 {
                                debug __field6 => _9;
                                let _85: configuration::General;
                                scope 8 {
                                    debug __key => _16;
                                    let _13: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field>;
                                    let _14: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                    let _16: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field;
                                    let _25: std::net::IpAddr;
                                    let _26: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                    let _34: u16;
                                    let _35: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                    let _43: u16;
                                    let _44: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                    let _52: bool;
                                    let _53: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                    let _61: std::string::String;
                                    let _62: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                    let _70: std::string::String;
                                    let _71: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                    let _79: bool;
                                    let _80: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                    let _84: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                    scope 9 {
                                        debug __val => _13;
                                    }
                                    scope 10 {
                                        debug __err => _14;
                                    }
                                    scope 11 {
                                        debug __val => _25;
                                    }
                                    scope 12 {
                                        debug __err => _26;
                                    }
                                    scope 13 {
                                        debug __val => _34;
                                    }
                                    scope 14 {
                                        debug __err => _35;
                                    }
                                    scope 15 {
                                        debug __val => _43;
                                    }
                                    scope 16 {
                                        debug __err => _44;
                                    }
                                    scope 17 {
                                        debug __val => _52;
                                    }
                                    scope 18 {
                                        debug __err => _53;
                                    }
                                    scope 19 {
                                        debug __val => _61;
                                    }
                                    scope 20 {
                                        debug __err => _62;
                                    }
                                    scope 21 {
                                        debug __val => _70;
                                    }
                                    scope 22 {
                                        debug __err => _71;
                                    }
                                    scope 23 {
                                        debug __val => _79;
                                    }
                                    scope 24 {
                                        debug __err => _80;
                                    }
                                    scope 25 {
                                    }
                                    scope 26 {
                                        debug __val => const IgnoredAny;
                                    }
                                    scope 27 {
                                        debug __err => _84;
                                    }
                                }
                                scope 28 {
                                    debug __default => _85;
                                    let _86: std::net::IpAddr;
                                    let _88: std::net::IpAddr;
                                    scope 29 {
                                        debug __field0 => _86;
                                        let _89: u16;
                                        let _91: u16;
                                        scope 31 {
                                            debug __field1 => _89;
                                            let _92: u16;
                                            let _94: u16;
                                            scope 33 {
                                                debug __field2 => _92;
                                                let _95: bool;
                                                let _97: bool;
                                                scope 35 {
                                                    debug __field3 => _95;
                                                    let _98: std::string::String;
                                                    let _100: std::string::String;
                                                    scope 37 {
                                                        debug __field4 => _98;
                                                        let _101: std::string::String;
                                                        let _103: std::string::String;
                                                        scope 39 {
                                                            debug __field5 => _101;
                                                            let _104: bool;
                                                            let _106: bool;
                                                            scope 41 {
                                                                debug __field6 => _104;
                                                            }
                                                            scope 42 {
                                                                debug __field6 => _106;
                                                            }
                                                        }
                                                        scope 40 {
                                                            debug __field5 => _103;
                                                        }
                                                    }
                                                    scope 38 {
                                                        debug __field4 => _100;
                                                    }
                                                }
                                                scope 36 {
                                                    debug __field3 => _97;
                                                }
                                            }
                                            scope 34 {
                                                debug __field2 => _94;
                                            }
                                        }
                                        scope 32 {
                                            debug __field1 => _91;
                                        }
                                    }
                                    scope 30 {
                                        debug __field0 => _88;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _116 = const false;
        _118 = const false;
        _115 = const false;
        _117 = const false;
        _3 = std::option::Option::<IpAddr>::None;
        _4 = std::option::Option::<u16>::None;
        _5 = std::option::Option::<u16>::None;
        _6 = std::option::Option::<bool>::None;
        _118 = const true;
        _7 = std::option::Option::<std::string::String>::None;
        _117 = const true;
        _8 = std::option::Option::<std::string::String>::None;
        _9 = std::option::Option::<bool>::None;
        goto -> bb1;
    }

    bb1: {
        _11 = &mut _2;
        _10 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_General::<impl Deserialize<'de> for General>::deserialize::__Field>(_11) -> [return: bb2, unwind: bb107];
    }

    bb2: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _14 = move ((_10 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb104;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _13 = move ((_10 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field>);
        _15 = discriminant(_13);
        switchInt(move _15) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _85 = <General as Default>::default() -> [return: bb71, unwind: bb107];
    }

    bb7: {
        _16 = move ((_13 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_General::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::General>::deserialize::__Field);
        _17 = discriminant(_16);
        switchInt(move _17) -> [0: bb9, 1: bb17, 2: bb25, 3: bb33, 4: bb41, 5: bb51, 6: bb61, otherwise: bb8];
    }

    bb8: {
        _82 = &mut _2;
        _81 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_82) -> [return: bb69, unwind: bb107];
    }

    bb9: {
        _19 = &_3;
        _18 = std::option::Option::<IpAddr>::is_some(_19) -> [return: bb10, unwind: bb107];
    }

    bb10: {
        switchInt(move _18) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _20 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "bind_address") -> [return: bb12, unwind: bb107];
    }

    bb12: {
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb104;
    }

    bb13: {
        _23 = &mut _2;
        _22 = <__A as MapAccess<'_>>::next_value::<IpAddr>(_23) -> [return: bb14, unwind: bb107];
    }

    bb14: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _26 = move ((_22 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _26);
        goto -> bb104;
    }

    bb16: {
        _25 = ((_22 as Ok).0: std::net::IpAddr);
        _21 = std::option::Option::<IpAddr>::Some(_25);
        _3 = move _21;
        goto -> bb1;
    }

    bb17: {
        _28 = &_4;
        _27 = std::option::Option::<u16>::is_some(_28) -> [return: bb18, unwind: bb107];
    }

    bb18: {
        switchInt(move _27) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _29 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "port") -> [return: bb20, unwind: bb107];
    }

    bb20: {
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _29);
        goto -> bb104;
    }

    bb21: {
        _32 = &mut _2;
        _31 = <__A as MapAccess<'_>>::next_value::<u16>(_32) -> [return: bb22, unwind: bb107];
    }

    bb22: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _35 = move ((_31 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _35);
        goto -> bb104;
    }

    bb24: {
        _34 = ((_31 as Ok).0: u16);
        _30 = std::option::Option::<u16>::Some(_34);
        _4 = move _30;
        goto -> bb1;
    }

    bb25: {
        _37 = &_5;
        _36 = std::option::Option::<u16>::is_some(_37) -> [return: bb26, unwind: bb107];
    }

    bb26: {
        switchInt(move _36) -> [0: bb29, otherwise: bb27];
    }

    bb27: {
        _38 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "port_ssl") -> [return: bb28, unwind: bb107];
    }

    bb28: {
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _38);
        goto -> bb104;
    }

    bb29: {
        _41 = &mut _2;
        _40 = <__A as MapAccess<'_>>::next_value::<u16>(_41) -> [return: bb30, unwind: bb107];
    }

    bb30: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb32, 1: bb31, otherwise: bb4];
    }

    bb31: {
        _44 = move ((_40 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb104;
    }

    bb32: {
        _43 = ((_40 as Ok).0: u16);
        _39 = std::option::Option::<u16>::Some(_43);
        _5 = move _39;
        goto -> bb1;
    }

    bb33: {
        _46 = &_6;
        _45 = std::option::Option::<bool>::is_some(_46) -> [return: bb34, unwind: bb107];
    }

    bb34: {
        switchInt(move _45) -> [0: bb37, otherwise: bb35];
    }

    bb35: {
        _47 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "use_ssl") -> [return: bb36, unwind: bb107];
    }

    bb36: {
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _47);
        goto -> bb104;
    }

    bb37: {
        _50 = &mut _2;
        _49 = <__A as MapAccess<'_>>::next_value::<bool>(_50) -> [return: bb38, unwind: bb107];
    }

    bb38: {
        _51 = discriminant(_49);
        switchInt(move _51) -> [0: bb40, 1: bb39, otherwise: bb4];
    }

    bb39: {
        _53 = move ((_49 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _53);
        goto -> bb104;
    }

    bb40: {
        _52 = ((_49 as Ok).0: bool);
        _48 = std::option::Option::<bool>::Some(_52);
        _6 = move _48;
        goto -> bb1;
    }

    bb41: {
        _55 = &_7;
        _54 = std::option::Option::<std::string::String>::is_some(_55) -> [return: bb42, unwind: bb107];
    }

    bb42: {
        switchInt(move _54) -> [0: bb45, otherwise: bb43];
    }

    bb43: {
        _56 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "ssl_certificate") -> [return: bb44, unwind: bb107];
    }

    bb44: {
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _56);
        goto -> bb104;
    }

    bb45: {
        _59 = &mut _2;
        _58 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_59) -> [return: bb46, unwind: bb107];
    }

    bb46: {
        _60 = discriminant(_58);
        switchInt(move _60) -> [0: bb48, 1: bb47, otherwise: bb4];
    }

    bb47: {
        _62 = move ((_58 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _62);
        goto -> bb104;
    }

    bb48: {
        _61 = move ((_58 as Ok).0: std::string::String);
        _57 = std::option::Option::<std::string::String>::Some(move _61);
        drop(_7) -> [return: bb49, unwind: bb50];
    }

    bb49: {
        _118 = const true;
        _7 = move _57;
        goto -> bb1;
    }

    bb50 (cleanup): {
        _118 = const true;
        _7 = move _57;
        goto -> bb107;
    }

    bb51: {
        _64 = &_8;
        _63 = std::option::Option::<std::string::String>::is_some(_64) -> [return: bb52, unwind: bb107];
    }

    bb52: {
        switchInt(move _63) -> [0: bb55, otherwise: bb53];
    }

    bb53: {
        _65 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "ssl_certificate_key") -> [return: bb54, unwind: bb107];
    }

    bb54: {
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _65);
        goto -> bb104;
    }

    bb55: {
        _68 = &mut _2;
        _67 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_68) -> [return: bb56, unwind: bb107];
    }

    bb56: {
        _69 = discriminant(_67);
        switchInt(move _69) -> [0: bb58, 1: bb57, otherwise: bb4];
    }

    bb57: {
        _71 = move ((_67 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _71);
        goto -> bb104;
    }

    bb58: {
        _70 = move ((_67 as Ok).0: std::string::String);
        _66 = std::option::Option::<std::string::String>::Some(move _70);
        drop(_8) -> [return: bb59, unwind: bb60];
    }

    bb59: {
        _117 = const true;
        _8 = move _66;
        goto -> bb1;
    }

    bb60 (cleanup): {
        _117 = const true;
        _8 = move _66;
        goto -> bb107;
    }

    bb61: {
        _73 = &_9;
        _72 = std::option::Option::<bool>::is_some(_73) -> [return: bb62, unwind: bb107];
    }

    bb62: {
        switchInt(move _72) -> [0: bb65, otherwise: bb63];
    }

    bb63: {
        _74 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "show_banner") -> [return: bb64, unwind: bb107];
    }

    bb64: {
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _74);
        goto -> bb104;
    }

    bb65: {
        _77 = &mut _2;
        _76 = <__A as MapAccess<'_>>::next_value::<bool>(_77) -> [return: bb66, unwind: bb107];
    }

    bb66: {
        _78 = discriminant(_76);
        switchInt(move _78) -> [0: bb68, 1: bb67, otherwise: bb4];
    }

    bb67: {
        _80 = move ((_76 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _80);
        goto -> bb104;
    }

    bb68: {
        _79 = ((_76 as Ok).0: bool);
        _75 = std::option::Option::<bool>::Some(_79);
        _9 = move _75;
        goto -> bb1;
    }

    bb69: {
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb1, 1: bb70, otherwise: bb4];
    }

    bb70: {
        _84 = move ((_81 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Err(move _84);
        goto -> bb104;
    }

    bb71: {
        _115 = const true;
        _116 = const true;
        _87 = discriminant(_3);
        switchInt(move _87) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        _86 = (_85.0: std::net::IpAddr);
        goto -> bb74;
    }

    bb73: {
        _88 = ((_3 as Some).0: std::net::IpAddr);
        _86 = _88;
        goto -> bb74;
    }

    bb74: {
        _90 = discriminant(_4);
        switchInt(move _90) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        _89 = (_85.1: u16);
        goto -> bb77;
    }

    bb76: {
        _91 = ((_4 as Some).0: u16);
        _89 = _91;
        goto -> bb77;
    }

    bb77: {
        _93 = discriminant(_5);
        switchInt(move _93) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        _92 = (_85.2: u16);
        goto -> bb80;
    }

    bb79: {
        _94 = ((_5 as Some).0: u16);
        _92 = _94;
        goto -> bb80;
    }

    bb80: {
        _96 = discriminant(_6);
        switchInt(move _96) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        _95 = (_85.3: bool);
        goto -> bb83;
    }

    bb82: {
        _97 = ((_6 as Some).0: bool);
        _95 = _97;
        goto -> bb83;
    }

    bb83: {
        _99 = discriminant(_7);
        switchInt(move _99) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        _116 = const false;
        _98 = move (_85.4: std::string::String);
        goto -> bb86;
    }

    bb85: {
        _118 = const false;
        _100 = move ((_7 as Some).0: std::string::String);
        _98 = move _100;
        goto -> bb86;
    }

    bb86: {
        _102 = discriminant(_8);
        switchInt(move _102) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        _115 = const false;
        _101 = move (_85.5: std::string::String);
        goto -> bb89;
    }

    bb88: {
        _117 = const false;
        _103 = move ((_8 as Some).0: std::string::String);
        _101 = move _103;
        goto -> bb89;
    }

    bb89: {
        _105 = discriminant(_9);
        switchInt(move _105) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        _104 = (_85.6: bool);
        goto -> bb92;
    }

    bb91: {
        _106 = ((_9 as Some).0: bool);
        _104 = _106;
        goto -> bb92;
    }

    bb92: {
        _108 = _86;
        _109 = _89;
        _110 = _92;
        _111 = _95;
        _112 = move _98;
        _113 = move _101;
        _114 = _104;
        _107 = General { bind_address: move _108, port: move _109, port_ssl: move _110, use_ssl: move _111, ssl_certificate: move _112, ssl_certificate_key: move _113, show_banner: move _114 };
        _0 = Result::<General, <__A as MapAccess<'_>>::Error>::Ok(move _107);
        switchInt(_116) -> [0: bb101, otherwise: bb103];
    }

    bb93: {
        _117 = const false;
        drop(_7) -> [return: bb94, unwind: bb96];
    }

    bb94: {
        _118 = const false;
        drop(_2) -> [return: bb95, unwind continue];
    }

    bb95: {
        return;
    }

    bb96 (cleanup): {
        drop(_2) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        resume;
    }

    bb98: {
        _115 = const false;
        _116 = const false;
        _117 = const false;
        _118 = const false;
        drop(_2) -> [return: bb95, unwind continue];
    }

    bb99 (cleanup): {
        switchInt(_115) -> [0: bb107, otherwise: bb100];
    }

    bb100 (cleanup): {
        drop((_85.5: std::string::String)) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb101: {
        switchInt(_115) -> [0: bb98, otherwise: bb102];
    }

    bb102: {
        drop((_85.5: std::string::String)) -> [return: bb98, unwind: bb107];
    }

    bb103: {
        drop((_85.4: std::string::String)) -> [return: bb101, unwind: bb99];
    }

    bb104: {
        drop(_8) -> [return: bb93, unwind: bb110];
    }

    bb105 (cleanup): {
        switchInt(_117) -> [0: bb110, otherwise: bb106];
    }

    bb106 (cleanup): {
        drop(((_8 as Some).0: std::string::String)) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        _119 = discriminant(_8);
        switchInt(move _119) -> [1: bb105, otherwise: bb110];
    }

    bb108 (cleanup): {
        switchInt(_118) -> [0: bb96, otherwise: bb109];
    }

    bb109 (cleanup): {
        drop(((_7 as Some).0: std::string::String)) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        _120 = discriminant(_7);
        switchInt(move _120) -> [1: bb108, otherwise: bb96];
    }
}

const _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 7];
    let _2: &[&str; 7];
    let _3: [&str; 7];
    let mut _4: &[&str; 7];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_General::<impl at src/configuration.rs:38:35: 38:46>::deserialize::FIELDS: &[&str; 7] = {
    let mut _0: &[&str; 7];
    let mut _1: [&str; 7];

    bb0: {
        _1 = [const "bind_address", const "port", const "port_ssl", const "use_ssl", const "ssl_certificate", const "ssl_certificate_key", const "show_banner"];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:49:1: 49:25>::default() -> General {
    let mut _0: configuration::General;
    let mut _1: std::net::IpAddr;
    let mut _2: std::string::String;
    let mut _3: std::string::String;

    bb0: {
        _1 = <IpAddr as From<Ipv4Addr>>::from(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = std::string::String::new() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = std::string::String::new() -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = General { bind_address: move _1, port: const 7020_u16, port_ssl: const 7021_u16, use_ssl: const false, ssl_certificate: move _2, ssl_certificate_key: move _3, show_banner: const true };
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn configuration::<impl at src/configuration.rs:64:10: 64:15>::fmt(_1: &Authentication, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &bool;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::string::String;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&std::string::String;
    let _13: &std::string::String;

    bb0: {
        _3 = const "Authentication";
        _4 = const "enabled";
        _6 = &((*_1).0: bool);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "root_token";
        _9 = &((*_1).1: std::string::String);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "secret_key";
        _13 = &((*_1).2: std::string::String);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn configuration::<impl at src/configuration.rs:64:17: 64:22>::clone(_1: &Authentication) -> Authentication {
    debug self => _1;
    let mut _0: configuration::Authentication;
    let mut _2: bool;
    let _3: &bool;
    let mut _4: std::string::String;
    let _5: &std::string::String;
    let mut _6: std::string::String;
    let _7: &std::string::String;

    bb0: {
        _3 = &((*_1).0: bool);
        _2 = (*_3);
        _5 = &((*_1).1: std::string::String);
        _4 = <std::string::String as Clone>::clone(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &((*_1).2: std::string::String);
        _6 = <std::string::String as Clone>::clone(_7) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = Authentication { enabled: move _2, root_token: move _4, secret_key: move _6 };
        return;
    }

    bb3 (cleanup): {
        drop(_4) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

const _IMPL_SERIALIZE_FOR_Authentication: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:24: 64:33>::serialize(_1: &Authentication, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: (usize, bool);
    let mut _11: (usize, bool);
    let mut _12: (usize, bool);
    let mut _13: isize;
    let _14: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _15: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _16: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _17: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _18: &bool;
    let mut _19: isize;
    let mut _21: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _22: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _23: &std::string::String;
    let mut _24: isize;
    let mut _26: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _27: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _28: &std::string::String;
    let mut _29: isize;
    let mut _31: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _32: bool;
    let mut _33: bool;
    scope 1 {
        debug __serde_state => _3;
        let _20: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _25: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _30: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _20;
        }
        scope 6 {
            debug __val => const ();
        }
        scope 7 {
            debug __err => _25;
        }
        scope 8 {
            debug __val => const ();
        }
        scope 9 {
            debug __err => _30;
        }
    }
    scope 2 {
        debug __val => _14;
    }
    scope 3 {
        debug __err => _15;
    }

    bb0: {
        _32 = const false;
        _33 = const false;
        _33 = const true;
        _5 = move _2;
        _9 = const false as usize (IntToInt);
        _10 = CheckedAdd(_9, const 1_usize);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_usize) -> [success: bb1, unwind: bb25];
    }

    bb1: {
        _8 = move (_10.0: usize);
        _11 = CheckedAdd(_8, const 1_usize);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const 1_usize) -> [success: bb2, unwind: bb25];
    }

    bb2: {
        _7 = move (_11.0: usize);
        _12 = CheckedAdd(_7, const 1_usize);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb3, unwind: bb25];
    }

    bb3: {
        _6 = move (_12.0: usize);
        _33 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "Authentication", move _6) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _33 = const false;
        _13 = discriminant(_4);
        switchInt(move _13) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _15 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _15);
        goto -> bb19;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _14 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _32 = const true;
        _3 = move _14;
        _17 = &mut _3;
        _18 = &((*_1).0: bool);
        _16 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_17, const "enabled", _18) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb9: {
        _20 = move ((_16 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _20);
        goto -> bb18;
    }

    bb10: {
        _22 = &mut _3;
        _23 = &((*_1).1: std::string::String);
        _21 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_22, const "root_token", _23) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _24 = discriminant(_21);
        switchInt(move _24) -> [0: bb13, 1: bb12, otherwise: bb6];
    }

    bb12: {
        _25 = move ((_21 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _25);
        goto -> bb18;
    }

    bb13: {
        _27 = &mut _3;
        _28 = &((*_1).2: std::string::String);
        _26 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_27, const "secret_key", _28) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb16, 1: bb15, otherwise: bb6];
    }

    bb15: {
        _30 = move ((_26 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _30);
        goto -> bb18;
    }

    bb16: {
        _32 = const false;
        _31 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _31) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _32 = const false;
        goto -> bb20;
    }

    bb18: {
        drop(_3) -> [return: bb19, unwind continue];
    }

    bb19: {
        _32 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_5) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_33) -> [0: bb21, otherwise: bb24];
    }
}

const _IMPL_DESERIALIZE_FOR_Authentication: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize(_1: __D) -> Result<Authentication, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::Authentication, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Visitor<'_>>(move _1, const "Authentication", const _, const _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Authentication>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _8: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;
    let mut _8: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;
    let mut _9: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "enabled") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "root_token") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "secret_key") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb10;
    }

    bb6: {
        _9 = _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb10;
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;
    let mut _10: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;
    let mut _11: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;
    let mut _12: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;

    bb0: {
        _6 = Len((*_2));
        _7 = const 7_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [101: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [110: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [97: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [98: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [108: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [101: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [100: bb29, otherwise: bb8];
    }

    bb8: {
        _12 = _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb32;
    }

    bb9: {
        _3 = Len((*_2));
        _4 = const 10_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb10];
    }

    bb10: {
        switchInt((*_2)[0 of 10]) -> [114: bb11, 115: bb20, otherwise: bb8];
    }

    bb11: {
        switchInt((*_2)[1 of 10]) -> [111: bb12, otherwise: bb8];
    }

    bb12: {
        switchInt((*_2)[2 of 10]) -> [111: bb13, otherwise: bb8];
    }

    bb13: {
        switchInt((*_2)[3 of 10]) -> [116: bb14, otherwise: bb8];
    }

    bb14: {
        switchInt((*_2)[4 of 10]) -> [95: bb15, otherwise: bb8];
    }

    bb15: {
        switchInt((*_2)[5 of 10]) -> [116: bb16, otherwise: bb8];
    }

    bb16: {
        switchInt((*_2)[6 of 10]) -> [111: bb17, otherwise: bb8];
    }

    bb17: {
        switchInt((*_2)[7 of 10]) -> [107: bb18, otherwise: bb8];
    }

    bb18: {
        switchInt((*_2)[8 of 10]) -> [101: bb19, otherwise: bb8];
    }

    bb19: {
        switchInt((*_2)[9 of 10]) -> [110: bb30, otherwise: bb8];
    }

    bb20: {
        switchInt((*_2)[1 of 10]) -> [101: bb21, otherwise: bb8];
    }

    bb21: {
        switchInt((*_2)[2 of 10]) -> [99: bb22, otherwise: bb8];
    }

    bb22: {
        switchInt((*_2)[3 of 10]) -> [114: bb23, otherwise: bb8];
    }

    bb23: {
        switchInt((*_2)[4 of 10]) -> [101: bb24, otherwise: bb8];
    }

    bb24: {
        switchInt((*_2)[5 of 10]) -> [116: bb25, otherwise: bb8];
    }

    bb25: {
        switchInt((*_2)[6 of 10]) -> [95: bb26, otherwise: bb8];
    }

    bb26: {
        switchInt((*_2)[7 of 10]) -> [107: bb27, otherwise: bb8];
    }

    bb27: {
        switchInt((*_2)[8 of 10]) -> [101: bb28, otherwise: bb8];
    }

    bb28: {
        switchInt((*_2)[9 of 10]) -> [121: bb31, otherwise: bb8];
    }

    bb29: {
        _9 = _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb32;
    }

    bb30: {
        _10 = _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb32;
    }

    bb31: {
        _11 = _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb32;
    }

    bb32: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Authentication";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Visitor<'_>, _2: __A) -> Result<Authentication, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Authentication>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::Authentication, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: configuration::Authentication;
    let mut _4: std::result::Result<std::option::Option<bool>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _32: configuration::Authentication;
    let mut _33: std::string::String;
    scope 1 {
        debug __default => _3;
        let _7: std::option::Option<bool>;
        let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _10: bool;
        let mut _34: &&str;
        scope 2 {
            debug __field0 => _10;
            let _13: std::string::String;
            let _17: std::option::Option<std::string::String>;
            let _18: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
            let _20: std::string::String;
            let mut _35: &&str;
            scope 6 {
                debug __field1 => _13;
                let _26: std::option::Option<std::string::String>;
                let _27: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                let _29: std::string::String;
                let mut _36: &&str;
                scope 10 {
                    debug __field2 => _29;
                }
                scope 11 {
                    debug __val => _26;
                }
                scope 12 {
                    debug __err => _27;
                }
                scope 13 {
                    debug __value => _29;
                }
            }
            scope 7 {
                debug __val => _17;
            }
            scope 8 {
                debug __err => _18;
            }
            scope 9 {
                debug __value => _20;
            }
        }
        scope 3 {
            debug __val => _7;
        }
        scope 4 {
            debug __err => _8;
        }
        scope 5 {
            debug __value => _10;
        }
    }

    bb0: {
        _3 = <Authentication as Default>::default() -> [return: bb1, unwind: bb28];
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<bool>(_5) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Authentication, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb23;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_4 as Ok).0: std::option::Option<bool>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb4];
    }

    bb6: {
        _34 = const _;
        _12 = _34 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb8, unwind: bb27];
    }

    bb7: {
        _10 = ((_7 as Some).0: bool);
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_15) -> [return: bb9, unwind: bb27];
    }

    bb8: {
        _0 = Result::<Authentication, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb23;
    }

    bb9: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb11, 1: bb10, otherwise: bb4];
    }

    bb10: {
        _18 = move ((_14 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Authentication, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb23;
    }

    bb11: {
        _17 = move ((_14 as Ok).0: std::option::Option<std::string::String>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _35 = const _;
        _22 = _35 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb14, unwind: bb27];
    }

    bb13: {
        _20 = move ((_17 as Some).0: std::string::String);
        _13 = move _20;
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_24) -> [return: bb15, unwind: bb26];
    }

    bb14: {
        _0 = Result::<Authentication, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb23;
    }

    bb15: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb17, 1: bb16, otherwise: bb4];
    }

    bb16: {
        _27 = move ((_23 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Authentication, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb22;
    }

    bb17: {
        _26 = move ((_23 as Ok).0: std::option::Option<std::string::String>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        _36 = const _;
        _31 = _36 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb20, unwind: bb26];
    }

    bb19: {
        _29 = move ((_26 as Some).0: std::string::String);
        _33 = move _13;
        _32 = Authentication { enabled: _10, root_token: move _33, secret_key: move _29 };
        _0 = Result::<Authentication, <__A as SeqAccess<'_>>::Error>::Ok(move _32);
        drop(_3) -> [return: bb21, unwind: bb28];
    }

    bb20: {
        _0 = Result::<Authentication, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb22;
    }

    bb21: {
        drop(_2) -> [return: bb25, unwind continue];
    }

    bb22: {
        drop(_13) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        drop(_3) -> [return: bb24, unwind: bb28];
    }

    bb24: {
        drop(_2) -> [return: bb25, unwind continue];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_13) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_3) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Authentication with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Authentication with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Authentication with 3 elements";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::<impl at src/configuration.rs:64:35: 64:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Visitor<'_>, _2: __A) -> Result<Authentication, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Authentication>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::Authentication, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<bool>;
    let mut _6: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _7: &mut __A;
    let mut _8: isize;
    let mut _11: isize;
    let mut _13: isize;
    let mut _14: bool;
    let _15: &std::option::Option<bool>;
    let mut _16: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _17: std::option::Option<bool>;
    let mut _18: std::result::Result<bool, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _19: &mut __A;
    let mut _20: isize;
    let mut _23: bool;
    let _24: &std::option::Option<std::string::String>;
    let mut _25: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _26: std::option::Option<std::string::String>;
    let mut _27: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _28: &mut __A;
    let mut _29: isize;
    let mut _32: bool;
    let _33: &std::option::Option<std::string::String>;
    let mut _34: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _35: std::option::Option<std::string::String>;
    let mut _36: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _37: &mut __A;
    let mut _38: isize;
    let mut _41: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _47: isize;
    let mut _50: isize;
    let mut _53: isize;
    let mut _55: configuration::Authentication;
    let mut _56: bool;
    let mut _57: std::string::String;
    let mut _58: std::string::String;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: isize;
    let mut _64: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::string::String>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::string::String>;
            scope 3 {
                debug __field2 => _5;
                let _45: configuration::Authentication;
                scope 4 {
                    debug __key => _12;
                    let _9: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field>;
                    let _10: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                    let _12: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field;
                    let _21: bool;
                    let _22: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                    let _30: std::string::String;
                    let _31: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                    let _39: std::string::String;
                    let _40: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                    let _44: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                    scope 5 {
                        debug __val => _9;
                    }
                    scope 6 {
                        debug __err => _10;
                    }
                    scope 7 {
                        debug __val => _21;
                    }
                    scope 8 {
                        debug __err => _22;
                    }
                    scope 9 {
                        debug __val => _30;
                    }
                    scope 10 {
                        debug __err => _31;
                    }
                    scope 11 {
                        debug __val => _39;
                    }
                    scope 12 {
                        debug __err => _40;
                    }
                    scope 13 {
                    }
                    scope 14 {
                        debug __val => const IgnoredAny;
                    }
                    scope 15 {
                        debug __err => _44;
                    }
                }
                scope 16 {
                    debug __default => _45;
                    let _46: bool;
                    let _48: bool;
                    scope 17 {
                        debug __field0 => _46;
                        let _49: std::string::String;
                        let _51: std::string::String;
                        scope 19 {
                            debug __field1 => _49;
                            let _52: std::string::String;
                            let _54: std::string::String;
                            scope 21 {
                                debug __field2 => _52;
                            }
                            scope 22 {
                                debug __field2 => _54;
                            }
                        }
                        scope 20 {
                            debug __field1 => _51;
                        }
                    }
                    scope 18 {
                        debug __field0 => _48;
                    }
                }
            }
        }
    }

    bb0: {
        _60 = const false;
        _62 = const false;
        _59 = const false;
        _61 = const false;
        _3 = std::option::Option::<bool>::None;
        _62 = const true;
        _4 = std::option::Option::<std::string::String>::None;
        _61 = const true;
        _5 = std::option::Option::<std::string::String>::None;
        goto -> bb1;
    }

    bb1: {
        _7 = &mut _2;
        _6 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Authentication::<impl Deserialize<'de> for Authentication>::deserialize::__Field>(_7) -> [return: bb2, unwind: bb63];
    }

    bb2: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _10 = move ((_6 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Authentication, <__A as MapAccess<'_>>::Error>::Err(move _10);
        goto -> bb60;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = move ((_6 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field>);
        _11 = discriminant(_9);
        switchInt(move _11) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _45 = <Authentication as Default>::default() -> [return: bb39, unwind: bb63];
    }

    bb7: {
        _12 = move ((_9 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_Authentication::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Authentication>::deserialize::__Field);
        _13 = discriminant(_12);
        switchInt(move _13) -> [0: bb9, 1: bb17, 2: bb27, otherwise: bb8];
    }

    bb8: {
        _42 = &mut _2;
        _41 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_42) -> [return: bb37, unwind: bb63];
    }

    bb9: {
        _15 = &_3;
        _14 = std::option::Option::<bool>::is_some(_15) -> [return: bb10, unwind: bb63];
    }

    bb10: {
        switchInt(move _14) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _16 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "enabled") -> [return: bb12, unwind: bb63];
    }

    bb12: {
        _0 = Result::<Authentication, <__A as MapAccess<'_>>::Error>::Err(move _16);
        goto -> bb60;
    }

    bb13: {
        _19 = &mut _2;
        _18 = <__A as MapAccess<'_>>::next_value::<bool>(_19) -> [return: bb14, unwind: bb63];
    }

    bb14: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _22 = move ((_18 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Authentication, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb60;
    }

    bb16: {
        _21 = ((_18 as Ok).0: bool);
        _17 = std::option::Option::<bool>::Some(_21);
        _3 = move _17;
        goto -> bb1;
    }

    bb17: {
        _24 = &_4;
        _23 = std::option::Option::<std::string::String>::is_some(_24) -> [return: bb18, unwind: bb63];
    }

    bb18: {
        switchInt(move _23) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _25 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "root_token") -> [return: bb20, unwind: bb63];
    }

    bb20: {
        _0 = Result::<Authentication, <__A as MapAccess<'_>>::Error>::Err(move _25);
        goto -> bb60;
    }

    bb21: {
        _28 = &mut _2;
        _27 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_28) -> [return: bb22, unwind: bb63];
    }

    bb22: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _31 = move ((_27 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Authentication, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb60;
    }

    bb24: {
        _30 = move ((_27 as Ok).0: std::string::String);
        _26 = std::option::Option::<std::string::String>::Some(move _30);
        drop(_4) -> [return: bb25, unwind: bb26];
    }

    bb25: {
        _62 = const true;
        _4 = move _26;
        goto -> bb1;
    }

    bb26 (cleanup): {
        _62 = const true;
        _4 = move _26;
        goto -> bb63;
    }

    bb27: {
        _33 = &_5;
        _32 = std::option::Option::<std::string::String>::is_some(_33) -> [return: bb28, unwind: bb63];
    }

    bb28: {
        switchInt(move _32) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _34 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "secret_key") -> [return: bb30, unwind: bb63];
    }

    bb30: {
        _0 = Result::<Authentication, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb60;
    }

    bb31: {
        _37 = &mut _2;
        _36 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_37) -> [return: bb32, unwind: bb63];
    }

    bb32: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _40 = move ((_36 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Authentication, <__A as MapAccess<'_>>::Error>::Err(move _40);
        goto -> bb60;
    }

    bb34: {
        _39 = move ((_36 as Ok).0: std::string::String);
        _35 = std::option::Option::<std::string::String>::Some(move _39);
        drop(_5) -> [return: bb35, unwind: bb36];
    }

    bb35: {
        _61 = const true;
        _5 = move _35;
        goto -> bb1;
    }

    bb36 (cleanup): {
        _61 = const true;
        _5 = move _35;
        goto -> bb63;
    }

    bb37: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb1, 1: bb38, otherwise: bb4];
    }

    bb38: {
        _44 = move ((_41 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Authentication, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb60;
    }

    bb39: {
        _59 = const true;
        _60 = const true;
        _47 = discriminant(_3);
        switchInt(move _47) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        _46 = (_45.0: bool);
        goto -> bb42;
    }

    bb41: {
        _48 = ((_3 as Some).0: bool);
        _46 = _48;
        goto -> bb42;
    }

    bb42: {
        _50 = discriminant(_4);
        switchInt(move _50) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        _60 = const false;
        _49 = move (_45.1: std::string::String);
        goto -> bb45;
    }

    bb44: {
        _62 = const false;
        _51 = move ((_4 as Some).0: std::string::String);
        _49 = move _51;
        goto -> bb45;
    }

    bb45: {
        _53 = discriminant(_5);
        switchInt(move _53) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        _59 = const false;
        _52 = move (_45.2: std::string::String);
        goto -> bb48;
    }

    bb47: {
        _61 = const false;
        _54 = move ((_5 as Some).0: std::string::String);
        _52 = move _54;
        goto -> bb48;
    }

    bb48: {
        _56 = _46;
        _57 = move _49;
        _58 = move _52;
        _55 = Authentication { enabled: move _56, root_token: move _57, secret_key: move _58 };
        _0 = Result::<Authentication, <__A as MapAccess<'_>>::Error>::Ok(move _55);
        switchInt(_60) -> [0: bb57, otherwise: bb59];
    }

    bb49: {
        _61 = const false;
        drop(_4) -> [return: bb50, unwind: bb52];
    }

    bb50: {
        _62 = const false;
        drop(_2) -> [return: bb51, unwind continue];
    }

    bb51: {
        return;
    }

    bb52 (cleanup): {
        drop(_2) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }

    bb54: {
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        drop(_2) -> [return: bb51, unwind continue];
    }

    bb55 (cleanup): {
        switchInt(_59) -> [0: bb63, otherwise: bb56];
    }

    bb56 (cleanup): {
        drop((_45.2: std::string::String)) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb57: {
        switchInt(_59) -> [0: bb54, otherwise: bb58];
    }

    bb58: {
        drop((_45.2: std::string::String)) -> [return: bb54, unwind: bb63];
    }

    bb59: {
        drop((_45.1: std::string::String)) -> [return: bb57, unwind: bb55];
    }

    bb60: {
        drop(_5) -> [return: bb49, unwind: bb66];
    }

    bb61 (cleanup): {
        switchInt(_61) -> [0: bb66, otherwise: bb62];
    }

    bb62 (cleanup): {
        drop(((_5 as Some).0: std::string::String)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        _63 = discriminant(_5);
        switchInt(move _63) -> [1: bb61, otherwise: bb66];
    }

    bb64 (cleanup): {
        switchInt(_62) -> [0: bb52, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        _64 = discriminant(_4);
        switchInt(move _64) -> [1: bb64, otherwise: bb52];
    }
}

const _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Authentication::<impl at src/configuration.rs:64:35: 64:46>::deserialize::FIELDS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "enabled", const "root_token", const "secret_key"];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:71:1: 71:32>::default() -> Authentication {
    let mut _0: configuration::Authentication;
    let mut _1: std::string::String;
    let mut _2: std::string::String;

    bb0: {
        _1 = std::string::String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = std::string::String::new() -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = Authentication { enabled: const false, root_token: move _1, secret_key: move _2 };
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn configuration::<impl at src/configuration.rs:82:10: 82:15>::fmt(_1: &Persistence, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &bool;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::string::String;
    let _10: &std::string::String;

    bb0: {
        _3 = const "Persistence";
        _4 = const "enabled";
        _6 = &((*_1).0: bool);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "location";
        _10 = &((*_1).1: std::string::String);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn configuration::<impl at src/configuration.rs:82:17: 82:22>::clone(_1: &Persistence) -> Persistence {
    debug self => _1;
    let mut _0: configuration::Persistence;
    let mut _2: bool;
    let _3: &bool;
    let mut _4: std::string::String;
    let _5: &std::string::String;

    bb0: {
        _3 = &((*_1).0: bool);
        _2 = (*_3);
        _5 = &((*_1).1: std::string::String);
        _4 = <std::string::String as Clone>::clone(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Persistence { enabled: move _2, location: move _4 };
        return;
    }
}

const _IMPL_SERIALIZE_FOR_Persistence: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:24: 82:33>::serialize(_1: &Persistence, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: (usize, bool);
    let mut _10: (usize, bool);
    let mut _11: isize;
    let _12: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _13: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _14: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _15: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _16: &bool;
    let mut _17: isize;
    let mut _19: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _20: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _21: &std::string::String;
    let mut _22: isize;
    let mut _24: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _25: bool;
    let mut _26: bool;
    scope 1 {
        debug __serde_state => _3;
        let _18: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _23: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _18;
        }
        scope 6 {
            debug __val => const ();
        }
        scope 7 {
            debug __err => _23;
        }
    }
    scope 2 {
        debug __val => _12;
    }
    scope 3 {
        debug __err => _13;
    }

    bb0: {
        _25 = const false;
        _26 = const false;
        _26 = const true;
        _5 = move _2;
        _8 = const false as usize (IntToInt);
        _9 = CheckedAdd(_8, const 1_usize);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const 1_usize) -> [success: bb1, unwind: bb21];
    }

    bb1: {
        _7 = move (_9.0: usize);
        _10 = CheckedAdd(_7, const 1_usize);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb2, unwind: bb21];
    }

    bb2: {
        _6 = move (_10.0: usize);
        _26 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "Persistence", move _6) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _26 = const false;
        _11 = discriminant(_4);
        switchInt(move _11) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _13 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _13);
        goto -> bb15;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _12 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _25 = const true;
        _3 = move _12;
        _15 = &mut _3;
        _16 = &((*_1).0: bool);
        _14 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_15, const "enabled", _16) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb8, otherwise: bb5];
    }

    bb8: {
        _18 = move ((_14 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _18);
        goto -> bb14;
    }

    bb9: {
        _20 = &mut _3;
        _21 = &((*_1).1: std::string::String);
        _19 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_20, const "location", _21) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb12, 1: bb11, otherwise: bb5];
    }

    bb11: {
        _23 = move ((_19 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _23);
        goto -> bb14;
    }

    bb12: {
        _25 = const false;
        _24 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _24) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _25 = const false;
        goto -> bb16;
    }

    bb14: {
        drop(_3) -> [return: bb15, unwind continue];
    }

    bb15: {
        _25 = const false;
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_25) -> [0: bb17, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_5) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_26) -> [0: bb17, otherwise: bb20];
    }
}

const _IMPL_DESERIALIZE_FOR_Persistence: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize(_1: __D) -> Result<Persistence, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::Persistence, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Visitor<'_>>(move _1, const "Persistence", const _, const _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Persistence>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::<impl at src/configuration.rs:82:35: 82:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::<impl at src/configuration.rs:82:35: 82:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field;
    let mut _5: __E;
    let mut _6: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _7: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _8: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        _6 = Unexpected::<'_>::Unsigned(_2);
        _8 = const _;
        _7 = _8 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _5 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb5;
    }

    bb3: {
        _4 = _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb5;
    }

    bb4: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E>::Err(move _5);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::<impl at src/configuration.rs:82:35: 82:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 2";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::<impl at src/configuration.rs:82:35: 82:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field;

    bb0: {
        _4 = <str as PartialEq>::eq(_2, const "enabled") -> [return: bb6, unwind continue];
    }

    bb1: {
        _5 = _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb7;
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_2, const "location") -> [return: bb5, unwind continue];
    }

    bb3: {
        _6 = _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb4: {
        _7 = _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb7;
    }

    bb5: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb7: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::<impl at src/configuration.rs:82:35: 82:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field;
    let mut _10: configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field;
    let mut _11: configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field;

    bb0: {
        _6 = Len((*_2));
        _7 = const 7_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [101: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [110: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [97: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [98: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [108: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [101: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [100: bb18, otherwise: bb8];
    }

    bb8: {
        _11 = _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb20;
    }

    bb9: {
        _3 = Len((*_2));
        _4 = const 8_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb10];
    }

    bb10: {
        switchInt((*_2)[0 of 8]) -> [108: bb11, otherwise: bb8];
    }

    bb11: {
        switchInt((*_2)[1 of 8]) -> [111: bb12, otherwise: bb8];
    }

    bb12: {
        switchInt((*_2)[2 of 8]) -> [99: bb13, otherwise: bb8];
    }

    bb13: {
        switchInt((*_2)[3 of 8]) -> [97: bb14, otherwise: bb8];
    }

    bb14: {
        switchInt((*_2)[4 of 8]) -> [116: bb15, otherwise: bb8];
    }

    bb15: {
        switchInt((*_2)[5 of 8]) -> [105: bb16, otherwise: bb8];
    }

    bb16: {
        switchInt((*_2)[6 of 8]) -> [111: bb17, otherwise: bb8];
    }

    bb17: {
        switchInt((*_2)[7 of 8]) -> [110: bb19, otherwise: bb8];
    }

    bb18: {
        _9 = _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb20;
    }

    bb19: {
        _10 = _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb20;
    }

    bb20: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::<impl at src/configuration.rs:82:35: 82:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::<impl at src/configuration.rs:82:35: 82:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Persistence";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::<impl at src/configuration.rs:82:35: 82:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Visitor<'_>, _2: __A) -> Result<Persistence, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Persistence>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::Persistence, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: configuration::Persistence;
    let mut _4: std::result::Result<std::option::Option<bool>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _22: configuration::Persistence;
    scope 1 {
        debug __default => _3;
        let _7: std::option::Option<bool>;
        let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _10: bool;
        let mut _23: &&str;
        scope 2 {
            debug __field0 => _10;
            let _16: std::option::Option<std::string::String>;
            let _17: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
            let _19: std::string::String;
            let mut _24: &&str;
            scope 6 {
                debug __field1 => _19;
            }
            scope 7 {
                debug __val => _16;
            }
            scope 8 {
                debug __err => _17;
            }
            scope 9 {
                debug __value => _19;
            }
        }
        scope 3 {
            debug __val => _7;
        }
        scope 4 {
            debug __err => _8;
        }
        scope 5 {
            debug __value => _10;
        }
    }

    bb0: {
        _3 = <Persistence as Default>::default() -> [return: bb1, unwind: bb20];
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<bool>(_5) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Persistence, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb16;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_4 as Ok).0: std::option::Option<bool>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb4];
    }

    bb6: {
        _23 = const _;
        _12 = _23 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb8, unwind: bb19];
    }

    bb7: {
        _10 = ((_7 as Some).0: bool);
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_14) -> [return: bb9, unwind: bb19];
    }

    bb8: {
        _0 = Result::<Persistence, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb16;
    }

    bb9: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb11, 1: bb10, otherwise: bb4];
    }

    bb10: {
        _17 = move ((_13 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Persistence, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb16;
    }

    bb11: {
        _16 = move ((_13 as Ok).0: std::option::Option<std::string::String>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _24 = const _;
        _21 = _24 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb14, unwind: bb19];
    }

    bb13: {
        _19 = move ((_16 as Some).0: std::string::String);
        _22 = Persistence { enabled: _10, location: move _19 };
        _0 = Result::<Persistence, <__A as SeqAccess<'_>>::Error>::Ok(move _22);
        drop(_3) -> [return: bb15, unwind: bb20];
    }

    bb14: {
        _0 = Result::<Persistence, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb16;
    }

    bb15: {
        drop(_2) -> [return: bb18, unwind continue];
    }

    bb16: {
        drop(_3) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        drop(_2) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::<impl at src/configuration.rs:82:35: 82:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Persistence with 2 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::<impl at src/configuration.rs:82:35: 82:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Persistence with 2 elements";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::<impl at src/configuration.rs:82:35: 82:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Visitor<'_>, _2: __A) -> Result<Persistence, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Persistence>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::Persistence, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<bool>;
    let mut _5: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _6: &mut __A;
    let mut _7: isize;
    let mut _10: isize;
    let mut _12: isize;
    let mut _13: bool;
    let _14: &std::option::Option<bool>;
    let mut _15: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _16: std::option::Option<bool>;
    let mut _17: std::result::Result<bool, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _18: &mut __A;
    let mut _19: isize;
    let mut _22: bool;
    let _23: &std::option::Option<std::string::String>;
    let mut _24: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _25: std::option::Option<std::string::String>;
    let mut _26: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _27: &mut __A;
    let mut _28: isize;
    let mut _31: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _37: isize;
    let mut _40: isize;
    let mut _42: configuration::Persistence;
    let mut _43: bool;
    let mut _44: std::string::String;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::string::String>;
        scope 2 {
            debug __field1 => _4;
            let _35: configuration::Persistence;
            scope 3 {
                debug __key => _11;
                let _8: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field>;
                let _9: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                let _11: configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field;
                let _20: bool;
                let _21: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                let _29: std::string::String;
                let _30: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                let _34: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                scope 4 {
                    debug __val => _8;
                }
                scope 5 {
                    debug __err => _9;
                }
                scope 6 {
                    debug __val => _20;
                }
                scope 7 {
                    debug __err => _21;
                }
                scope 8 {
                    debug __val => _29;
                }
                scope 9 {
                    debug __err => _30;
                }
                scope 10 {
                }
                scope 11 {
                    debug __val => const IgnoredAny;
                }
                scope 12 {
                    debug __err => _34;
                }
            }
            scope 13 {
                debug __default => _35;
                let _36: bool;
                let _38: bool;
                scope 14 {
                    debug __field0 => _36;
                    let _39: std::string::String;
                    let _41: std::string::String;
                    scope 16 {
                        debug __field1 => _39;
                    }
                    scope 17 {
                        debug __field1 => _41;
                    }
                }
                scope 15 {
                    debug __field0 => _38;
                }
            }
        }
    }

    bb0: {
        _45 = const false;
        _46 = const false;
        _3 = std::option::Option::<bool>::None;
        _46 = const true;
        _4 = std::option::Option::<std::string::String>::None;
        goto -> bb1;
    }

    bb1: {
        _6 = &mut _2;
        _5 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Persistence::<impl Deserialize<'de> for Persistence>::deserialize::__Field>(_6) -> [return: bb2, unwind: bb45];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_5 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Persistence, <__A as MapAccess<'_>>::Error>::Err(move _9);
        goto -> bb42;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field>);
        _10 = discriminant(_8);
        switchInt(move _10) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _35 = <Persistence as Default>::default() -> [return: bb29, unwind: bb45];
    }

    bb7: {
        _11 = move ((_8 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_Persistence::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Persistence>::deserialize::__Field);
        _12 = discriminant(_11);
        switchInt(move _12) -> [0: bb9, 1: bb17, otherwise: bb8];
    }

    bb8: {
        _32 = &mut _2;
        _31 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_32) -> [return: bb27, unwind: bb45];
    }

    bb9: {
        _14 = &_3;
        _13 = std::option::Option::<bool>::is_some(_14) -> [return: bb10, unwind: bb45];
    }

    bb10: {
        switchInt(move _13) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _15 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "enabled") -> [return: bb12, unwind: bb45];
    }

    bb12: {
        _0 = Result::<Persistence, <__A as MapAccess<'_>>::Error>::Err(move _15);
        goto -> bb42;
    }

    bb13: {
        _18 = &mut _2;
        _17 = <__A as MapAccess<'_>>::next_value::<bool>(_18) -> [return: bb14, unwind: bb45];
    }

    bb14: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _21 = move ((_17 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Persistence, <__A as MapAccess<'_>>::Error>::Err(move _21);
        goto -> bb42;
    }

    bb16: {
        _20 = ((_17 as Ok).0: bool);
        _16 = std::option::Option::<bool>::Some(_20);
        _3 = move _16;
        goto -> bb1;
    }

    bb17: {
        _23 = &_4;
        _22 = std::option::Option::<std::string::String>::is_some(_23) -> [return: bb18, unwind: bb45];
    }

    bb18: {
        switchInt(move _22) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _24 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "location") -> [return: bb20, unwind: bb45];
    }

    bb20: {
        _0 = Result::<Persistence, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb42;
    }

    bb21: {
        _27 = &mut _2;
        _26 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_27) -> [return: bb22, unwind: bb45];
    }

    bb22: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _30 = move ((_26 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Persistence, <__A as MapAccess<'_>>::Error>::Err(move _30);
        goto -> bb42;
    }

    bb24: {
        _29 = move ((_26 as Ok).0: std::string::String);
        _25 = std::option::Option::<std::string::String>::Some(move _29);
        drop(_4) -> [return: bb25, unwind: bb26];
    }

    bb25: {
        _46 = const true;
        _4 = move _25;
        goto -> bb1;
    }

    bb26 (cleanup): {
        _46 = const true;
        _4 = move _25;
        goto -> bb45;
    }

    bb27: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb1, 1: bb28, otherwise: bb4];
    }

    bb28: {
        _34 = move ((_31 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Persistence, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb42;
    }

    bb29: {
        _45 = const true;
        _37 = discriminant(_3);
        switchInt(move _37) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        _36 = (_35.0: bool);
        goto -> bb32;
    }

    bb31: {
        _38 = ((_3 as Some).0: bool);
        _36 = _38;
        goto -> bb32;
    }

    bb32: {
        _40 = discriminant(_4);
        switchInt(move _40) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        _45 = const false;
        _39 = move (_35.1: std::string::String);
        goto -> bb35;
    }

    bb34: {
        _46 = const false;
        _41 = move ((_4 as Some).0: std::string::String);
        _39 = move _41;
        goto -> bb35;
    }

    bb35: {
        _43 = _36;
        _44 = move _39;
        _42 = Persistence { enabled: move _43, location: move _44 };
        _0 = Result::<Persistence, <__A as MapAccess<'_>>::Error>::Ok(move _42);
        switchInt(_45) -> [0: bb40, otherwise: bb41];
    }

    bb36: {
        _46 = const false;
        drop(_2) -> [return: bb37, unwind continue];
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_2) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }

    bb40: {
        _45 = const false;
        _46 = const false;
        drop(_2) -> [return: bb37, unwind continue];
    }

    bb41: {
        drop((_35.1: std::string::String)) -> [return: bb40, unwind: bb45];
    }

    bb42: {
        drop(_4) -> [return: bb36, unwind: bb38];
    }

    bb43 (cleanup): {
        switchInt(_46) -> [0: bb38, otherwise: bb44];
    }

    bb44 (cleanup): {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        _47 = discriminant(_4);
        switchInt(move _47) -> [1: bb43, otherwise: bb38];
    }
}

const _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 2];
    let _2: &[&str; 2];
    let _3: [&str; 2];
    let mut _4: &[&str; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Persistence::<impl at src/configuration.rs:82:35: 82:46>::deserialize::FIELDS: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "enabled", const "location"];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:88:1: 88:29>::default() -> Persistence {
    let mut _0: configuration::Persistence;
    let mut _1: std::string::String;

    bb0: {
        _1 = std::string::String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Persistence { enabled: const false, location: move _1 };
        return;
    }
}

fn configuration::<impl at src/configuration.rs:98:10: 98:15>::fmt(_1: &Encryption, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &bool;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::string::String;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&std::string::String;
    let _13: &std::string::String;

    bb0: {
        _3 = const "Encryption";
        _4 = const "enabled";
        _6 = &((*_1).0: bool);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "private_key";
        _9 = &((*_1).1: std::string::String);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "iv";
        _13 = &((*_1).2: std::string::String);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn configuration::<impl at src/configuration.rs:98:17: 98:22>::clone(_1: &Encryption) -> Encryption {
    debug self => _1;
    let mut _0: configuration::Encryption;
    let mut _2: bool;
    let _3: &bool;
    let mut _4: std::string::String;
    let _5: &std::string::String;
    let mut _6: std::string::String;
    let _7: &std::string::String;

    bb0: {
        _3 = &((*_1).0: bool);
        _2 = (*_3);
        _5 = &((*_1).1: std::string::String);
        _4 = <std::string::String as Clone>::clone(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &((*_1).2: std::string::String);
        _6 = <std::string::String as Clone>::clone(_7) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = Encryption { enabled: move _2, private_key: move _4, iv: move _6 };
        return;
    }

    bb3 (cleanup): {
        drop(_4) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

const _IMPL_SERIALIZE_FOR_Encryption: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:24: 98:33>::serialize(_1: &Encryption, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: (usize, bool);
    let mut _11: (usize, bool);
    let mut _12: (usize, bool);
    let mut _13: isize;
    let _14: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _15: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _16: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _17: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _18: &bool;
    let mut _19: isize;
    let mut _21: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _22: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _23: &std::string::String;
    let mut _24: isize;
    let mut _26: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _27: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _28: &std::string::String;
    let mut _29: isize;
    let mut _31: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _32: bool;
    let mut _33: bool;
    scope 1 {
        debug __serde_state => _3;
        let _20: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _25: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _30: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _20;
        }
        scope 6 {
            debug __val => const ();
        }
        scope 7 {
            debug __err => _25;
        }
        scope 8 {
            debug __val => const ();
        }
        scope 9 {
            debug __err => _30;
        }
    }
    scope 2 {
        debug __val => _14;
    }
    scope 3 {
        debug __err => _15;
    }

    bb0: {
        _32 = const false;
        _33 = const false;
        _33 = const true;
        _5 = move _2;
        _9 = const false as usize (IntToInt);
        _10 = CheckedAdd(_9, const 1_usize);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_usize) -> [success: bb1, unwind: bb25];
    }

    bb1: {
        _8 = move (_10.0: usize);
        _11 = CheckedAdd(_8, const 1_usize);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const 1_usize) -> [success: bb2, unwind: bb25];
    }

    bb2: {
        _7 = move (_11.0: usize);
        _12 = CheckedAdd(_7, const 1_usize);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb3, unwind: bb25];
    }

    bb3: {
        _6 = move (_12.0: usize);
        _33 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "Encryption", move _6) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _33 = const false;
        _13 = discriminant(_4);
        switchInt(move _13) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _15 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _15);
        goto -> bb19;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _14 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _32 = const true;
        _3 = move _14;
        _17 = &mut _3;
        _18 = &((*_1).0: bool);
        _16 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_17, const "enabled", _18) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb9: {
        _20 = move ((_16 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _20);
        goto -> bb18;
    }

    bb10: {
        _22 = &mut _3;
        _23 = &((*_1).1: std::string::String);
        _21 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_22, const "private_key", _23) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _24 = discriminant(_21);
        switchInt(move _24) -> [0: bb13, 1: bb12, otherwise: bb6];
    }

    bb12: {
        _25 = move ((_21 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _25);
        goto -> bb18;
    }

    bb13: {
        _27 = &mut _3;
        _28 = &((*_1).2: std::string::String);
        _26 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_27, const "iv", _28) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb16, 1: bb15, otherwise: bb6];
    }

    bb15: {
        _30 = move ((_26 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _30);
        goto -> bb18;
    }

    bb16: {
        _32 = const false;
        _31 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _31) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _32 = const false;
        goto -> bb20;
    }

    bb18: {
        drop(_3) -> [return: bb19, unwind continue];
    }

    bb19: {
        _32 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_5) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_33) -> [0: bb21, otherwise: bb24];
    }
}

const _IMPL_DESERIALIZE_FOR_Encryption: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize(_1: __D) -> Result<Encryption, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::Encryption, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Visitor<'_>>(move _1, const "Encryption", const _, const _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Encryption>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _8: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;
    let mut _8: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;
    let mut _9: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "enabled") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "private_key") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "iv") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb10;
    }

    bb6: {
        _9 = _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb10;
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;
    let mut _13: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;
    let mut _14: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;
    let mut _15: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;

    bb0: {
        _9 = Len((*_2));
        _10 = const 7_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [101: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [110: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [97: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [98: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [108: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [101: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [100: bb24, otherwise: bb8];
    }

    bb8: {
        _15 = _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb27;
    }

    bb9: {
        _6 = Len((*_2));
        _7 = const 11_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb21, otherwise: bb10];
    }

    bb10: {
        switchInt((*_2)[0 of 11]) -> [112: bb11, otherwise: bb8];
    }

    bb11: {
        switchInt((*_2)[1 of 11]) -> [114: bb12, otherwise: bb8];
    }

    bb12: {
        switchInt((*_2)[2 of 11]) -> [105: bb13, otherwise: bb8];
    }

    bb13: {
        switchInt((*_2)[3 of 11]) -> [118: bb14, otherwise: bb8];
    }

    bb14: {
        switchInt((*_2)[4 of 11]) -> [97: bb15, otherwise: bb8];
    }

    bb15: {
        switchInt((*_2)[5 of 11]) -> [116: bb16, otherwise: bb8];
    }

    bb16: {
        switchInt((*_2)[6 of 11]) -> [101: bb17, otherwise: bb8];
    }

    bb17: {
        switchInt((*_2)[7 of 11]) -> [95: bb18, otherwise: bb8];
    }

    bb18: {
        switchInt((*_2)[8 of 11]) -> [107: bb19, otherwise: bb8];
    }

    bb19: {
        switchInt((*_2)[9 of 11]) -> [101: bb20, otherwise: bb8];
    }

    bb20: {
        switchInt((*_2)[10 of 11]) -> [121: bb25, otherwise: bb8];
    }

    bb21: {
        _3 = Len((*_2));
        _4 = const 2_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb22];
    }

    bb22: {
        switchInt((*_2)[0 of 2]) -> [105: bb23, otherwise: bb8];
    }

    bb23: {
        switchInt((*_2)[1 of 2]) -> [118: bb26, otherwise: bb8];
    }

    bb24: {
        _12 = _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb27;
    }

    bb25: {
        _13 = _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb27;
    }

    bb26: {
        _14 = _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb27;
    }

    bb27: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Encryption";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Visitor<'_>, _2: __A) -> Result<Encryption, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Encryption>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::Encryption, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: configuration::Encryption;
    let mut _4: std::result::Result<std::option::Option<bool>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _32: configuration::Encryption;
    let mut _33: std::string::String;
    scope 1 {
        debug __default => _3;
        let _7: std::option::Option<bool>;
        let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _10: bool;
        let mut _34: &&str;
        scope 2 {
            debug __field0 => _10;
            let _13: std::string::String;
            let _17: std::option::Option<std::string::String>;
            let _18: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
            let _20: std::string::String;
            let mut _35: &&str;
            scope 6 {
                debug __field1 => _13;
                let _26: std::option::Option<std::string::String>;
                let _27: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                let _29: std::string::String;
                let mut _36: &&str;
                scope 10 {
                    debug __field2 => _29;
                }
                scope 11 {
                    debug __val => _26;
                }
                scope 12 {
                    debug __err => _27;
                }
                scope 13 {
                    debug __value => _29;
                }
            }
            scope 7 {
                debug __val => _17;
            }
            scope 8 {
                debug __err => _18;
            }
            scope 9 {
                debug __value => _20;
            }
        }
        scope 3 {
            debug __val => _7;
        }
        scope 4 {
            debug __err => _8;
        }
        scope 5 {
            debug __value => _10;
        }
    }

    bb0: {
        _3 = <Encryption as Default>::default() -> [return: bb1, unwind: bb28];
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<bool>(_5) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Encryption, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb23;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_4 as Ok).0: std::option::Option<bool>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb4];
    }

    bb6: {
        _34 = const _;
        _12 = _34 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb8, unwind: bb27];
    }

    bb7: {
        _10 = ((_7 as Some).0: bool);
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_15) -> [return: bb9, unwind: bb27];
    }

    bb8: {
        _0 = Result::<Encryption, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb23;
    }

    bb9: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb11, 1: bb10, otherwise: bb4];
    }

    bb10: {
        _18 = move ((_14 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Encryption, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb23;
    }

    bb11: {
        _17 = move ((_14 as Ok).0: std::option::Option<std::string::String>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _35 = const _;
        _22 = _35 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb14, unwind: bb27];
    }

    bb13: {
        _20 = move ((_17 as Some).0: std::string::String);
        _13 = move _20;
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_24) -> [return: bb15, unwind: bb26];
    }

    bb14: {
        _0 = Result::<Encryption, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb23;
    }

    bb15: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb17, 1: bb16, otherwise: bb4];
    }

    bb16: {
        _27 = move ((_23 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Encryption, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb22;
    }

    bb17: {
        _26 = move ((_23 as Ok).0: std::option::Option<std::string::String>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        _36 = const _;
        _31 = _36 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb20, unwind: bb26];
    }

    bb19: {
        _29 = move ((_26 as Some).0: std::string::String);
        _33 = move _13;
        _32 = Encryption { enabled: _10, private_key: move _33, iv: move _29 };
        _0 = Result::<Encryption, <__A as SeqAccess<'_>>::Error>::Ok(move _32);
        drop(_3) -> [return: bb21, unwind: bb28];
    }

    bb20: {
        _0 = Result::<Encryption, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb22;
    }

    bb21: {
        drop(_2) -> [return: bb25, unwind continue];
    }

    bb22: {
        drop(_13) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        drop(_3) -> [return: bb24, unwind: bb28];
    }

    bb24: {
        drop(_2) -> [return: bb25, unwind continue];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_13) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_3) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Encryption with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Encryption with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Encryption with 3 elements";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::<impl at src/configuration.rs:98:35: 98:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Visitor<'_>, _2: __A) -> Result<Encryption, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Encryption>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::Encryption, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<bool>;
    let mut _6: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _7: &mut __A;
    let mut _8: isize;
    let mut _11: isize;
    let mut _13: isize;
    let mut _14: bool;
    let _15: &std::option::Option<bool>;
    let mut _16: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _17: std::option::Option<bool>;
    let mut _18: std::result::Result<bool, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _19: &mut __A;
    let mut _20: isize;
    let mut _23: bool;
    let _24: &std::option::Option<std::string::String>;
    let mut _25: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _26: std::option::Option<std::string::String>;
    let mut _27: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _28: &mut __A;
    let mut _29: isize;
    let mut _32: bool;
    let _33: &std::option::Option<std::string::String>;
    let mut _34: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _35: std::option::Option<std::string::String>;
    let mut _36: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _37: &mut __A;
    let mut _38: isize;
    let mut _41: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _42: &mut __A;
    let mut _43: isize;
    let mut _47: isize;
    let mut _50: isize;
    let mut _53: isize;
    let mut _55: configuration::Encryption;
    let mut _56: bool;
    let mut _57: std::string::String;
    let mut _58: std::string::String;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: isize;
    let mut _64: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::string::String>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<std::string::String>;
            scope 3 {
                debug __field2 => _5;
                let _45: configuration::Encryption;
                scope 4 {
                    debug __key => _12;
                    let _9: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field>;
                    let _10: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                    let _12: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field;
                    let _21: bool;
                    let _22: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                    let _30: std::string::String;
                    let _31: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                    let _39: std::string::String;
                    let _40: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                    let _44: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                    scope 5 {
                        debug __val => _9;
                    }
                    scope 6 {
                        debug __err => _10;
                    }
                    scope 7 {
                        debug __val => _21;
                    }
                    scope 8 {
                        debug __err => _22;
                    }
                    scope 9 {
                        debug __val => _30;
                    }
                    scope 10 {
                        debug __err => _31;
                    }
                    scope 11 {
                        debug __val => _39;
                    }
                    scope 12 {
                        debug __err => _40;
                    }
                    scope 13 {
                    }
                    scope 14 {
                        debug __val => const IgnoredAny;
                    }
                    scope 15 {
                        debug __err => _44;
                    }
                }
                scope 16 {
                    debug __default => _45;
                    let _46: bool;
                    let _48: bool;
                    scope 17 {
                        debug __field0 => _46;
                        let _49: std::string::String;
                        let _51: std::string::String;
                        scope 19 {
                            debug __field1 => _49;
                            let _52: std::string::String;
                            let _54: std::string::String;
                            scope 21 {
                                debug __field2 => _52;
                            }
                            scope 22 {
                                debug __field2 => _54;
                            }
                        }
                        scope 20 {
                            debug __field1 => _51;
                        }
                    }
                    scope 18 {
                        debug __field0 => _48;
                    }
                }
            }
        }
    }

    bb0: {
        _60 = const false;
        _62 = const false;
        _59 = const false;
        _61 = const false;
        _3 = std::option::Option::<bool>::None;
        _62 = const true;
        _4 = std::option::Option::<std::string::String>::None;
        _61 = const true;
        _5 = std::option::Option::<std::string::String>::None;
        goto -> bb1;
    }

    bb1: {
        _7 = &mut _2;
        _6 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Encryption::<impl Deserialize<'de> for Encryption>::deserialize::__Field>(_7) -> [return: bb2, unwind: bb63];
    }

    bb2: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _10 = move ((_6 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Encryption, <__A as MapAccess<'_>>::Error>::Err(move _10);
        goto -> bb60;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = move ((_6 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field>);
        _11 = discriminant(_9);
        switchInt(move _11) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _45 = <Encryption as Default>::default() -> [return: bb39, unwind: bb63];
    }

    bb7: {
        _12 = move ((_9 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_Encryption::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Encryption>::deserialize::__Field);
        _13 = discriminant(_12);
        switchInt(move _13) -> [0: bb9, 1: bb17, 2: bb27, otherwise: bb8];
    }

    bb8: {
        _42 = &mut _2;
        _41 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_42) -> [return: bb37, unwind: bb63];
    }

    bb9: {
        _15 = &_3;
        _14 = std::option::Option::<bool>::is_some(_15) -> [return: bb10, unwind: bb63];
    }

    bb10: {
        switchInt(move _14) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _16 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "enabled") -> [return: bb12, unwind: bb63];
    }

    bb12: {
        _0 = Result::<Encryption, <__A as MapAccess<'_>>::Error>::Err(move _16);
        goto -> bb60;
    }

    bb13: {
        _19 = &mut _2;
        _18 = <__A as MapAccess<'_>>::next_value::<bool>(_19) -> [return: bb14, unwind: bb63];
    }

    bb14: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _22 = move ((_18 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Encryption, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb60;
    }

    bb16: {
        _21 = ((_18 as Ok).0: bool);
        _17 = std::option::Option::<bool>::Some(_21);
        _3 = move _17;
        goto -> bb1;
    }

    bb17: {
        _24 = &_4;
        _23 = std::option::Option::<std::string::String>::is_some(_24) -> [return: bb18, unwind: bb63];
    }

    bb18: {
        switchInt(move _23) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _25 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "private_key") -> [return: bb20, unwind: bb63];
    }

    bb20: {
        _0 = Result::<Encryption, <__A as MapAccess<'_>>::Error>::Err(move _25);
        goto -> bb60;
    }

    bb21: {
        _28 = &mut _2;
        _27 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_28) -> [return: bb22, unwind: bb63];
    }

    bb22: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _31 = move ((_27 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Encryption, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb60;
    }

    bb24: {
        _30 = move ((_27 as Ok).0: std::string::String);
        _26 = std::option::Option::<std::string::String>::Some(move _30);
        drop(_4) -> [return: bb25, unwind: bb26];
    }

    bb25: {
        _62 = const true;
        _4 = move _26;
        goto -> bb1;
    }

    bb26 (cleanup): {
        _62 = const true;
        _4 = move _26;
        goto -> bb63;
    }

    bb27: {
        _33 = &_5;
        _32 = std::option::Option::<std::string::String>::is_some(_33) -> [return: bb28, unwind: bb63];
    }

    bb28: {
        switchInt(move _32) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _34 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "iv") -> [return: bb30, unwind: bb63];
    }

    bb30: {
        _0 = Result::<Encryption, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb60;
    }

    bb31: {
        _37 = &mut _2;
        _36 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_37) -> [return: bb32, unwind: bb63];
    }

    bb32: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb34, 1: bb33, otherwise: bb4];
    }

    bb33: {
        _40 = move ((_36 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Encryption, <__A as MapAccess<'_>>::Error>::Err(move _40);
        goto -> bb60;
    }

    bb34: {
        _39 = move ((_36 as Ok).0: std::string::String);
        _35 = std::option::Option::<std::string::String>::Some(move _39);
        drop(_5) -> [return: bb35, unwind: bb36];
    }

    bb35: {
        _61 = const true;
        _5 = move _35;
        goto -> bb1;
    }

    bb36 (cleanup): {
        _61 = const true;
        _5 = move _35;
        goto -> bb63;
    }

    bb37: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb1, 1: bb38, otherwise: bb4];
    }

    bb38: {
        _44 = move ((_41 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Encryption, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb60;
    }

    bb39: {
        _59 = const true;
        _60 = const true;
        _47 = discriminant(_3);
        switchInt(move _47) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        _46 = (_45.0: bool);
        goto -> bb42;
    }

    bb41: {
        _48 = ((_3 as Some).0: bool);
        _46 = _48;
        goto -> bb42;
    }

    bb42: {
        _50 = discriminant(_4);
        switchInt(move _50) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        _60 = const false;
        _49 = move (_45.1: std::string::String);
        goto -> bb45;
    }

    bb44: {
        _62 = const false;
        _51 = move ((_4 as Some).0: std::string::String);
        _49 = move _51;
        goto -> bb45;
    }

    bb45: {
        _53 = discriminant(_5);
        switchInt(move _53) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        _59 = const false;
        _52 = move (_45.2: std::string::String);
        goto -> bb48;
    }

    bb47: {
        _61 = const false;
        _54 = move ((_5 as Some).0: std::string::String);
        _52 = move _54;
        goto -> bb48;
    }

    bb48: {
        _56 = _46;
        _57 = move _49;
        _58 = move _52;
        _55 = Encryption { enabled: move _56, private_key: move _57, iv: move _58 };
        _0 = Result::<Encryption, <__A as MapAccess<'_>>::Error>::Ok(move _55);
        switchInt(_60) -> [0: bb57, otherwise: bb59];
    }

    bb49: {
        _61 = const false;
        drop(_4) -> [return: bb50, unwind: bb52];
    }

    bb50: {
        _62 = const false;
        drop(_2) -> [return: bb51, unwind continue];
    }

    bb51: {
        return;
    }

    bb52 (cleanup): {
        drop(_2) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }

    bb54: {
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        drop(_2) -> [return: bb51, unwind continue];
    }

    bb55 (cleanup): {
        switchInt(_59) -> [0: bb63, otherwise: bb56];
    }

    bb56 (cleanup): {
        drop((_45.2: std::string::String)) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb57: {
        switchInt(_59) -> [0: bb54, otherwise: bb58];
    }

    bb58: {
        drop((_45.2: std::string::String)) -> [return: bb54, unwind: bb63];
    }

    bb59: {
        drop((_45.1: std::string::String)) -> [return: bb57, unwind: bb55];
    }

    bb60: {
        drop(_5) -> [return: bb49, unwind: bb66];
    }

    bb61 (cleanup): {
        switchInt(_61) -> [0: bb66, otherwise: bb62];
    }

    bb62 (cleanup): {
        drop(((_5 as Some).0: std::string::String)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        _63 = discriminant(_5);
        switchInt(move _63) -> [1: bb61, otherwise: bb66];
    }

    bb64 (cleanup): {
        switchInt(_62) -> [0: bb52, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        _64 = discriminant(_4);
        switchInt(move _64) -> [1: bb64, otherwise: bb52];
    }
}

const _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Encryption::<impl at src/configuration.rs:98:35: 98:46>::deserialize::FIELDS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "enabled", const "private_key", const "iv"];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:105:1: 105:28>::default() -> Encryption {
    let mut _0: configuration::Encryption;
    let mut _1: std::string::String;
    let mut _2: [u8; 24];
    let mut _3: &mut rand::prelude::ThreadRng;
    let mut _4: rand::prelude::ThreadRng;
    let mut _5: std::string::String;
    let mut _6: [u8; 16];
    let mut _7: &mut rand::prelude::ThreadRng;
    let mut _8: rand::prelude::ThreadRng;

    bb0: {
        _4 = thread_rng() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _4;
        _2 = <ThreadRng as Rng>::gen::<[u8; 24]>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = hex::encode::<[u8; 24]>(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = thread_rng() -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _7 = &mut _8;
        _6 = <ThreadRng as Rng>::gen::<[u8; 16]>(move _7) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        _5 = hex::encode::<[u8; 16]>(move _6) -> [return: bb6, unwind: bb7];
    }

    bb6: {
        _0 = Encryption { enabled: const false, private_key: move _1, iv: move _5 };
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

configuration::<impl at src/configuration.rs:105:1: 105:28>::default::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 24_usize;
        return;
    }
}

configuration::<impl at src/configuration.rs:105:1: 105:28>::default::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_usize;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:116:10: 116:15>::fmt(_1: &configuration::ServerSentEvent, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&bool;
    let _7: &bool;

    bb0: {
        _3 = const "ServerSentEvent";
        _4 = const "enabled";
        _7 = &((*_1).0: bool);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn configuration::<impl at src/configuration.rs:116:17: 116:22>::clone(_1: &configuration::ServerSentEvent) -> configuration::ServerSentEvent {
    debug self => _1;
    let mut _0: configuration::ServerSentEvent;
    let mut _2: bool;
    let _3: &bool;

    bb0: {
        _3 = &((*_1).0: bool);
        _2 = (*_3);
        _0 = configuration::ServerSentEvent { enabled: move _2 };
        return;
    }
}

const _IMPL_SERIALIZE_FOR_ServerSentEvent: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:24: 116:33>::serialize(_1: &configuration::ServerSentEvent, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: (usize, bool);
    let mut _9: isize;
    let _10: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _11: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _12: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _13: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _14: &bool;
    let mut _15: isize;
    let mut _17: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _18: bool;
    let mut _19: bool;
    scope 1 {
        debug __serde_state => _3;
        let _16: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _16;
        }
    }
    scope 2 {
        debug __val => _10;
    }
    scope 3 {
        debug __err => _11;
    }

    bb0: {
        _18 = const false;
        _19 = const false;
        _19 = const true;
        _5 = move _2;
        _7 = const false as usize (IntToInt);
        _8 = CheckedAdd(_7, const 1_usize);
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb1, unwind: bb16];
    }

    bb1: {
        _6 = move (_8.0: usize);
        _19 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "ServerSentEvent", move _6) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _19 = const false;
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _11);
        goto -> bb10;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _18 = const true;
        _3 = move _10;
        _13 = &mut _3;
        _14 = &((*_1).0: bool);
        _12 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_13, const "enabled", _14) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb8, 1: bb7, otherwise: bb4];
    }

    bb7: {
        _16 = move ((_12 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _16);
        drop(_3) -> [return: bb10, unwind continue];
    }

    bb8: {
        _18 = const false;
        _17 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _17) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _18 = const false;
        goto -> bb11;
    }

    bb10: {
        _18 = const false;
        goto -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_18) -> [0: bb12, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_19) -> [0: bb12, otherwise: bb15];
    }
}

const _IMPL_DESERIALIZE_FOR_ServerSentEvent: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize(_1: __D) -> Result<configuration::ServerSentEvent, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::ServerSentEvent, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Visitor<'_>>(move _1, const "ServerSentEvent", const _, const _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<configuration::ServerSentEvent>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::<impl at src/configuration.rs:116:35: 116:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::<impl at src/configuration.rs:116:35: 116:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field;
    let mut _4: __E;
    let mut _5: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _6: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _7: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Unexpected::<'_>::Unsigned(_2);
        _7 = const _;
        _6 = _7 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _4 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E>::Err(move _4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::<impl at src/configuration.rs:116:35: 116:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 1";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::<impl at src/configuration.rs:116:35: 116:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "enabled") -> [return: bb3, unwind continue];
    }

    bb1: {
        _4 = _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb4;
    }

    bb2: {
        _5 = _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb4;
    }

    bb3: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::<impl at src/configuration.rs:116:35: 116:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 7_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [101: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [110: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [97: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [98: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [108: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [101: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [100: bb9, otherwise: bb8];
    }

    bb8: {
        _7 = _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb9: {
        _6 = _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::<impl at src/configuration.rs:116:35: 116:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::<impl at src/configuration.rs:116:35: 116:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct ServerSentEvent";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::<impl at src/configuration.rs:116:35: 116:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Visitor<'_>, _2: __A) -> Result<configuration::ServerSentEvent, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<configuration::ServerSentEvent>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::ServerSentEvent, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: configuration::ServerSentEvent;
    let mut _4: std::result::Result<std::option::Option<bool>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _13: configuration::ServerSentEvent;
    scope 1 {
        debug __default => _3;
        let _7: std::option::Option<bool>;
        let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _10: bool;
        let mut _14: &&str;
        scope 2 {
            debug __field0 => _10;
        }
        scope 3 {
            debug __val => _7;
        }
        scope 4 {
            debug __err => _8;
        }
        scope 5 {
            debug __value => _10;
        }
    }

    bb0: {
        _3 = <configuration::ServerSentEvent as Default>::default() -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<bool>(_5) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<configuration::ServerSentEvent, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb9;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_4 as Ok).0: std::option::Option<bool>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb4];
    }

    bb6: {
        _14 = const _;
        _12 = _14 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb8, unwind: bb11];
    }

    bb7: {
        _10 = ((_7 as Some).0: bool);
        _13 = configuration::ServerSentEvent { enabled: _10 };
        _0 = Result::<configuration::ServerSentEvent, <__A as SeqAccess<'_>>::Error>::Ok(move _13);
        drop(_2) -> [return: bb10, unwind continue];
    }

    bb8: {
        _0 = Result::<configuration::ServerSentEvent, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb9;
    }

    bb9: {
        drop(_2) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::<impl at src/configuration.rs:116:35: 116:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct ServerSentEvent with 1 element";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::<impl at src/configuration.rs:116:35: 116:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Visitor<'_>, _2: __A) -> Result<configuration::ServerSentEvent, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<configuration::ServerSentEvent>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::ServerSentEvent, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<bool>;
    let mut _4: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: isize;
    let mut _12: bool;
    let _13: &std::option::Option<bool>;
    let mut _14: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _15: std::option::Option<bool>;
    let mut _16: std::result::Result<bool, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _17: &mut __A;
    let mut _18: isize;
    let mut _21: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _27: isize;
    let mut _29: configuration::ServerSentEvent;
    let mut _30: bool;
    scope 1 {
        debug __field0 => _3;
        let _25: configuration::ServerSentEvent;
        scope 2 {
            debug __key => _10;
            let _7: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field>;
            let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _10: configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field;
            let _19: bool;
            let _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _24: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __val => _7;
            }
            scope 4 {
                debug __err => _8;
            }
            scope 5 {
                debug __val => _19;
            }
            scope 6 {
                debug __err => _20;
            }
            scope 7 {
            }
            scope 8 {
                debug __val => const IgnoredAny;
            }
            scope 9 {
                debug __err => _24;
            }
        }
        scope 10 {
            debug __default => _25;
            let _26: bool;
            let _28: bool;
            scope 11 {
                debug __field0 => _26;
            }
            scope 12 {
                debug __field0 => _28;
            }
        }
    }

    bb0: {
        _3 = std::option::Option::<bool>::None;
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field>(_5) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<configuration::ServerSentEvent, <__A as MapAccess<'_>>::Error>::Err(move _8);
        goto -> bb26;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _25 = <configuration::ServerSentEvent as Default>::default() -> [return: bb19, unwind: bb24];
    }

    bb7: {
        _10 = move ((_7 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::ServerSentEvent>::deserialize::__Field);
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_22) -> [return: bb17, unwind: bb24];
    }

    bb9: {
        _13 = &_3;
        _12 = std::option::Option::<bool>::is_some(_13) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _14 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "enabled") -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _0 = Result::<configuration::ServerSentEvent, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb26;
    }

    bb13: {
        _17 = &mut _2;
        _16 = <__A as MapAccess<'_>>::next_value::<bool>(_17) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _20 = move ((_16 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<configuration::ServerSentEvent, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb26;
    }

    bb16: {
        _19 = ((_16 as Ok).0: bool);
        _15 = std::option::Option::<bool>::Some(_19);
        _3 = move _15;
        goto -> bb1;
    }

    bb17: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb1, 1: bb18, otherwise: bb4];
    }

    bb18: {
        _24 = move ((_21 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<configuration::ServerSentEvent, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb26;
    }

    bb19: {
        _27 = discriminant(_3);
        switchInt(move _27) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        _26 = (_25.0: bool);
        goto -> bb22;
    }

    bb21: {
        _28 = ((_3 as Some).0: bool);
        _26 = _28;
        goto -> bb22;
    }

    bb22: {
        _30 = _26;
        _29 = configuration::ServerSentEvent { enabled: move _30 };
        _0 = Result::<configuration::ServerSentEvent, <__A as MapAccess<'_>>::Error>::Ok(move _29);
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26: {
        drop(_2) -> [return: bb23, unwind continue];
    }
}

const _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 1];
    let _2: &[&str; 1];
    let _3: [&str; 1];
    let mut _4: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_ServerSentEvent::<impl at src/configuration.rs:116:35: 116:46>::deserialize::FIELDS: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "enabled"];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:121:1: 121:33>::default() -> configuration::ServerSentEvent {
    let mut _0: configuration::ServerSentEvent;

    bb0: {
        _0 = configuration::ServerSentEvent { enabled: const false };
        return;
    }
}

fn configuration::<impl at src/configuration.rs:128:10: 128:15>::fmt(_1: &WebUI, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&bool;
    let _7: &bool;

    bb0: {
        _3 = const "WebUI";
        _4 = const "enabled";
        _7 = &((*_1).0: bool);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn configuration::<impl at src/configuration.rs:128:17: 128:22>::clone(_1: &WebUI) -> WebUI {
    debug self => _1;
    let mut _0: configuration::WebUI;
    let mut _2: bool;
    let _3: &bool;

    bb0: {
        _3 = &((*_1).0: bool);
        _2 = (*_3);
        _0 = WebUI { enabled: move _2 };
        return;
    }
}

const _IMPL_SERIALIZE_FOR_WebUI: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:24: 128:33>::serialize(_1: &WebUI, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: (usize, bool);
    let mut _9: isize;
    let _10: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _11: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _12: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _13: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _14: &bool;
    let mut _15: isize;
    let mut _17: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _18: bool;
    let mut _19: bool;
    scope 1 {
        debug __serde_state => _3;
        let _16: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _16;
        }
    }
    scope 2 {
        debug __val => _10;
    }
    scope 3 {
        debug __err => _11;
    }

    bb0: {
        _18 = const false;
        _19 = const false;
        _19 = const true;
        _5 = move _2;
        _7 = const false as usize (IntToInt);
        _8 = CheckedAdd(_7, const 1_usize);
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb1, unwind: bb16];
    }

    bb1: {
        _6 = move (_8.0: usize);
        _19 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "WebUI", move _6) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _19 = const false;
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _11);
        goto -> bb10;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _18 = const true;
        _3 = move _10;
        _13 = &mut _3;
        _14 = &((*_1).0: bool);
        _12 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_13, const "enabled", _14) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb8, 1: bb7, otherwise: bb4];
    }

    bb7: {
        _16 = move ((_12 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _16);
        drop(_3) -> [return: bb10, unwind continue];
    }

    bb8: {
        _18 = const false;
        _17 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _17) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _18 = const false;
        goto -> bb11;
    }

    bb10: {
        _18 = const false;
        goto -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_18) -> [0: bb12, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_19) -> [0: bb12, otherwise: bb15];
    }
}

const _IMPL_DESERIALIZE_FOR_WebUI: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize(_1: __D) -> Result<WebUI, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::WebUI, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Visitor<'_>>(move _1, const "WebUI", const _, const _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<WebUI>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::<impl at src/configuration.rs:128:35: 128:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::<impl at src/configuration.rs:128:35: 128:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field;
    let mut _4: __E;
    let mut _5: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _6: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _7: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Unexpected::<'_>::Unsigned(_2);
        _7 = const _;
        _6 = _7 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _4 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field, __E>::Err(move _4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::<impl at src/configuration.rs:128:35: 128:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 1";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::<impl at src/configuration.rs:128:35: 128:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "enabled") -> [return: bb3, unwind continue];
    }

    bb1: {
        _4 = _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb4;
    }

    bb2: {
        _5 = _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb4;
    }

    bb3: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::<impl at src/configuration.rs:128:35: 128:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 7_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [101: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [110: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [97: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [98: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [108: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [101: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [100: bb9, otherwise: bb8];
    }

    bb8: {
        _7 = _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb9: {
        _6 = _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::<impl at src/configuration.rs:128:35: 128:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::<impl at src/configuration.rs:128:35: 128:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct WebUI";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::<impl at src/configuration.rs:128:35: 128:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Visitor<'_>, _2: __A) -> Result<WebUI, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<WebUI>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::WebUI, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: configuration::WebUI;
    let mut _4: std::result::Result<std::option::Option<bool>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _13: configuration::WebUI;
    scope 1 {
        debug __default => _3;
        let _7: std::option::Option<bool>;
        let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _10: bool;
        let mut _14: &&str;
        scope 2 {
            debug __field0 => _10;
        }
        scope 3 {
            debug __val => _7;
        }
        scope 4 {
            debug __err => _8;
        }
        scope 5 {
            debug __value => _10;
        }
    }

    bb0: {
        _3 = <WebUI as Default>::default() -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<bool>(_5) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<WebUI, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb9;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_4 as Ok).0: std::option::Option<bool>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb4];
    }

    bb6: {
        _14 = const _;
        _12 = _14 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb8, unwind: bb11];
    }

    bb7: {
        _10 = ((_7 as Some).0: bool);
        _13 = WebUI { enabled: _10 };
        _0 = Result::<WebUI, <__A as SeqAccess<'_>>::Error>::Ok(move _13);
        drop(_2) -> [return: bb10, unwind continue];
    }

    bb8: {
        _0 = Result::<WebUI, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb9;
    }

    bb9: {
        drop(_2) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::<impl at src/configuration.rs:128:35: 128:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct WebUI with 1 element";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::<impl at src/configuration.rs:128:35: 128:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Visitor<'_>, _2: __A) -> Result<WebUI, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<WebUI>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::WebUI, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<bool>;
    let mut _4: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: isize;
    let mut _12: bool;
    let _13: &std::option::Option<bool>;
    let mut _14: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _15: std::option::Option<bool>;
    let mut _16: std::result::Result<bool, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _17: &mut __A;
    let mut _18: isize;
    let mut _21: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _27: isize;
    let mut _29: configuration::WebUI;
    let mut _30: bool;
    scope 1 {
        debug __field0 => _3;
        let _25: configuration::WebUI;
        scope 2 {
            debug __key => _10;
            let _7: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field>;
            let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _10: configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field;
            let _19: bool;
            let _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _24: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __val => _7;
            }
            scope 4 {
                debug __err => _8;
            }
            scope 5 {
                debug __val => _19;
            }
            scope 6 {
                debug __err => _20;
            }
            scope 7 {
            }
            scope 8 {
                debug __val => const IgnoredAny;
            }
            scope 9 {
                debug __err => _24;
            }
        }
        scope 10 {
            debug __default => _25;
            let _26: bool;
            let _28: bool;
            scope 11 {
                debug __field0 => _26;
            }
            scope 12 {
                debug __field0 => _28;
            }
        }
    }

    bb0: {
        _3 = std::option::Option::<bool>::None;
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_WebUI::<impl Deserialize<'de> for WebUI>::deserialize::__Field>(_5) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<WebUI, <__A as MapAccess<'_>>::Error>::Err(move _8);
        goto -> bb26;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _25 = <WebUI as Default>::default() -> [return: bb19, unwind: bb24];
    }

    bb7: {
        _10 = move ((_7 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_WebUI::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::WebUI>::deserialize::__Field);
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_22) -> [return: bb17, unwind: bb24];
    }

    bb9: {
        _13 = &_3;
        _12 = std::option::Option::<bool>::is_some(_13) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _14 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "enabled") -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _0 = Result::<WebUI, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb26;
    }

    bb13: {
        _17 = &mut _2;
        _16 = <__A as MapAccess<'_>>::next_value::<bool>(_17) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _20 = move ((_16 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<WebUI, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb26;
    }

    bb16: {
        _19 = ((_16 as Ok).0: bool);
        _15 = std::option::Option::<bool>::Some(_19);
        _3 = move _15;
        goto -> bb1;
    }

    bb17: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb1, 1: bb18, otherwise: bb4];
    }

    bb18: {
        _24 = move ((_21 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<WebUI, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb26;
    }

    bb19: {
        _27 = discriminant(_3);
        switchInt(move _27) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        _26 = (_25.0: bool);
        goto -> bb22;
    }

    bb21: {
        _28 = ((_3 as Some).0: bool);
        _26 = _28;
        goto -> bb22;
    }

    bb22: {
        _30 = _26;
        _29 = WebUI { enabled: move _30 };
        _0 = Result::<WebUI, <__A as MapAccess<'_>>::Error>::Ok(move _29);
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26: {
        drop(_2) -> [return: bb23, unwind continue];
    }
}

const _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 1];
    let _2: &[&str; 1];
    let _3: [&str; 1];
    let mut _4: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_WebUI::<impl at src/configuration.rs:128:35: 128:46>::deserialize::FIELDS: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "enabled"];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:133:1: 133:23>::default() -> WebUI {
    let mut _0: configuration::WebUI;

    bb0: {
        _0 = WebUI { enabled: const false };
        return;
    }
}

fn configuration::<impl at src/configuration.rs:140:10: 140:15>::fmt(_1: &Store, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&u64;
    let _7: &u64;

    bb0: {
        _3 = const "Store";
        _4 = const "max_limit";
        _7 = &((*_1).0: u64);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn configuration::<impl at src/configuration.rs:140:17: 140:22>::clone(_1: &Store) -> Store {
    debug self => _1;
    let mut _0: configuration::Store;
    let mut _2: u64;
    let _3: &u64;

    bb0: {
        _3 = &((*_1).0: u64);
        _2 = (*_3);
        _0 = Store { max_limit: move _2 };
        return;
    }
}

const _IMPL_SERIALIZE_FOR_Store: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_Store::<impl at src/configuration.rs:140:24: 140:33>::serialize(_1: &Store, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: (usize, bool);
    let mut _9: isize;
    let _10: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _11: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _12: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _13: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _14: &u64;
    let mut _15: isize;
    let mut _17: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _18: bool;
    let mut _19: bool;
    scope 1 {
        debug __serde_state => _3;
        let _16: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _16;
        }
    }
    scope 2 {
        debug __val => _10;
    }
    scope 3 {
        debug __err => _11;
    }

    bb0: {
        _18 = const false;
        _19 = const false;
        _19 = const true;
        _5 = move _2;
        _7 = const false as usize (IntToInt);
        _8 = CheckedAdd(_7, const 1_usize);
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb1, unwind: bb16];
    }

    bb1: {
        _6 = move (_8.0: usize);
        _19 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "Store", move _6) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _19 = const false;
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _11);
        goto -> bb10;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _18 = const true;
        _3 = move _10;
        _13 = &mut _3;
        _14 = &((*_1).0: u64);
        _12 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u64>(_13, const "max_limit", _14) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb8, 1: bb7, otherwise: bb4];
    }

    bb7: {
        _16 = move ((_12 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _16);
        drop(_3) -> [return: bb10, unwind continue];
    }

    bb8: {
        _18 = const false;
        _17 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _17) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _18 = const false;
        goto -> bb11;
    }

    bb10: {
        _18 = const false;
        goto -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_18) -> [0: bb12, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_19) -> [0: bb12, otherwise: bb15];
    }
}

const _IMPL_DESERIALIZE_FOR_Store: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize(_1: __D) -> Result<Store, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::Store, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Visitor<'_>>(move _1, const "Store", const _, const _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Store>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::<impl at src/configuration.rs:140:35: 140:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::<impl at src/configuration.rs:140:35: 140:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field;
    let mut _4: __E;
    let mut _5: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _6: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _7: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Unexpected::<'_>::Unsigned(_2);
        _7 = const _;
        _6 = _7 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _4 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field, __E>::Err(move _4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::<impl at src/configuration.rs:140:35: 140:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 1";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::<impl at src/configuration.rs:140:35: 140:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "max_limit") -> [return: bb3, unwind continue];
    }

    bb1: {
        _4 = _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb4;
    }

    bb2: {
        _5 = _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb4;
    }

    bb3: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::<impl at src/configuration.rs:140:35: 140:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 9_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [109: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [97: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [120: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [95: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [108: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [105: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [109: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [105: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [116: bb11, otherwise: bb10];
    }

    bb10: {
        _7 = _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb12;
    }

    bb11: {
        _6 = _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::<impl at src/configuration.rs:140:35: 140:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::<impl at src/configuration.rs:140:35: 140:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Store";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::<impl at src/configuration.rs:140:35: 140:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Visitor<'_>, _2: __A) -> Result<Store, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Store>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::Store, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: configuration::Store;
    let mut _4: std::result::Result<std::option::Option<u64>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _13: configuration::Store;
    scope 1 {
        debug __default => _3;
        let _7: std::option::Option<u64>;
        let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _10: u64;
        let mut _14: &&str;
        scope 2 {
            debug __field0 => _10;
        }
        scope 3 {
            debug __val => _7;
        }
        scope 4 {
            debug __err => _8;
        }
        scope 5 {
            debug __value => _10;
        }
    }

    bb0: {
        _3 = <Store as Default>::default() -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<u64>(_5) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Store, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb9;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_4 as Ok).0: std::option::Option<u64>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb4];
    }

    bb6: {
        _14 = const _;
        _12 = _14 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb8, unwind: bb11];
    }

    bb7: {
        _10 = ((_7 as Some).0: u64);
        _13 = Store { max_limit: _10 };
        _0 = Result::<Store, <__A as SeqAccess<'_>>::Error>::Ok(move _13);
        drop(_2) -> [return: bb10, unwind continue];
    }

    bb8: {
        _0 = Result::<Store, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb9;
    }

    bb9: {
        drop(_2) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::<impl at src/configuration.rs:140:35: 140:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Store with 1 element";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::<impl at src/configuration.rs:140:35: 140:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Visitor<'_>, _2: __A) -> Result<Store, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Store>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::Store, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<u64>;
    let mut _4: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: isize;
    let mut _12: bool;
    let _13: &std::option::Option<u64>;
    let mut _14: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _15: std::option::Option<u64>;
    let mut _16: std::result::Result<u64, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _17: &mut __A;
    let mut _18: isize;
    let mut _21: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _27: isize;
    let mut _29: configuration::Store;
    let mut _30: u64;
    scope 1 {
        debug __field0 => _3;
        let _25: configuration::Store;
        scope 2 {
            debug __key => _10;
            let _7: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field>;
            let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _10: configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field;
            let _19: u64;
            let _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _24: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __val => _7;
            }
            scope 4 {
                debug __err => _8;
            }
            scope 5 {
                debug __val => _19;
            }
            scope 6 {
                debug __err => _20;
            }
            scope 7 {
            }
            scope 8 {
                debug __val => const IgnoredAny;
            }
            scope 9 {
                debug __err => _24;
            }
        }
        scope 10 {
            debug __default => _25;
            let _26: u64;
            let _28: u64;
            scope 11 {
                debug __field0 => _26;
            }
            scope 12 {
                debug __field0 => _28;
            }
        }
    }

    bb0: {
        _3 = std::option::Option::<u64>::None;
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Store::<impl Deserialize<'de> for Store>::deserialize::__Field>(_5) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Store, <__A as MapAccess<'_>>::Error>::Err(move _8);
        goto -> bb26;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _25 = <Store as Default>::default() -> [return: bb19, unwind: bb24];
    }

    bb7: {
        _10 = move ((_7 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_Store::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Store>::deserialize::__Field);
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_22) -> [return: bb17, unwind: bb24];
    }

    bb9: {
        _13 = &_3;
        _12 = std::option::Option::<u64>::is_some(_13) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _14 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "max_limit") -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _0 = Result::<Store, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb26;
    }

    bb13: {
        _17 = &mut _2;
        _16 = <__A as MapAccess<'_>>::next_value::<u64>(_17) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _20 = move ((_16 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Store, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb26;
    }

    bb16: {
        _19 = ((_16 as Ok).0: u64);
        _15 = std::option::Option::<u64>::Some(_19);
        _3 = move _15;
        goto -> bb1;
    }

    bb17: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb1, 1: bb18, otherwise: bb4];
    }

    bb18: {
        _24 = move ((_21 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Store, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb26;
    }

    bb19: {
        _27 = discriminant(_3);
        switchInt(move _27) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        _26 = (_25.0: u64);
        goto -> bb22;
    }

    bb21: {
        _28 = ((_3 as Some).0: u64);
        _26 = _28;
        goto -> bb22;
    }

    bb22: {
        _30 = _26;
        _29 = Store { max_limit: move _30 };
        _0 = Result::<Store, <__A as MapAccess<'_>>::Error>::Ok(move _29);
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26: {
        drop(_2) -> [return: bb23, unwind continue];
    }
}

const _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 1];
    let _2: &[&str; 1];
    let _3: [&str; 1];
    let mut _4: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Store::<impl at src/configuration.rs:140:35: 140:46>::deserialize::FIELDS: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "max_limit"];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:145:1: 145:23>::default() -> Store {
    let mut _0: configuration::Store;

    bb0: {
        _0 = Store { max_limit: const 7340032_u64 };
        return;
    }
}

fn configuration::<impl at src/configuration.rs:152:10: 152:15>::fmt(_1: &configuration::Http, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&u64;
    let _7: &u64;

    bb0: {
        _3 = const "Http";
        _4 = const "request_size_limit";
        _7 = &((*_1).0: u64);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn configuration::<impl at src/configuration.rs:152:17: 152:22>::clone(_1: &configuration::Http) -> configuration::Http {
    debug self => _1;
    let mut _0: configuration::Http;
    let mut _2: u64;
    let _3: &u64;

    bb0: {
        _3 = &((*_1).0: u64);
        _2 = (*_3);
        _0 = configuration::Http { request_size_limit: move _2 };
        return;
    }
}

const _IMPL_SERIALIZE_FOR_Http: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_Http::<impl at src/configuration.rs:152:24: 152:33>::serialize(_1: &configuration::Http, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: (usize, bool);
    let mut _9: isize;
    let _10: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _11: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _12: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _13: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _14: &u64;
    let mut _15: isize;
    let mut _17: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _18: bool;
    let mut _19: bool;
    scope 1 {
        debug __serde_state => _3;
        let _16: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _16;
        }
    }
    scope 2 {
        debug __val => _10;
    }
    scope 3 {
        debug __err => _11;
    }

    bb0: {
        _18 = const false;
        _19 = const false;
        _19 = const true;
        _5 = move _2;
        _7 = const false as usize (IntToInt);
        _8 = CheckedAdd(_7, const 1_usize);
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb1, unwind: bb16];
    }

    bb1: {
        _6 = move (_8.0: usize);
        _19 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "Http", move _6) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _19 = const false;
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _11);
        goto -> bb10;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _18 = const true;
        _3 = move _10;
        _13 = &mut _3;
        _14 = &((*_1).0: u64);
        _12 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u64>(_13, const "request_size_limit", _14) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb8, 1: bb7, otherwise: bb4];
    }

    bb7: {
        _16 = move ((_12 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _16);
        drop(_3) -> [return: bb10, unwind continue];
    }

    bb8: {
        _18 = const false;
        _17 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _17) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _18 = const false;
        goto -> bb11;
    }

    bb10: {
        _18 = const false;
        goto -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_18) -> [0: bb12, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_19) -> [0: bb12, otherwise: bb15];
    }
}

const _IMPL_DESERIALIZE_FOR_Http: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize(_1: __D) -> Result<configuration::Http, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::Http, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Visitor<'_>>(move _1, const "Http", const _, const _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<configuration::Http>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::<impl at src/configuration.rs:152:35: 152:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::<impl at src/configuration.rs:152:35: 152:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field;
    let mut _4: __E;
    let mut _5: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _6: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _7: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Unexpected::<'_>::Unsigned(_2);
        _7 = const _;
        _6 = _7 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _4 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field, __E>::Err(move _4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::<impl at src/configuration.rs:152:35: 152:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 1";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::<impl at src/configuration.rs:152:35: 152:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "request_size_limit") -> [return: bb3, unwind continue];
    }

    bb1: {
        _4 = _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb4;
    }

    bb2: {
        _5 = _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb4;
    }

    bb3: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::<impl at src/configuration.rs:152:35: 152:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 18_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb19, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 18]) -> [114: bb2, otherwise: bb19];
    }

    bb2: {
        switchInt((*_2)[1 of 18]) -> [101: bb3, otherwise: bb19];
    }

    bb3: {
        switchInt((*_2)[2 of 18]) -> [113: bb4, otherwise: bb19];
    }

    bb4: {
        switchInt((*_2)[3 of 18]) -> [117: bb5, otherwise: bb19];
    }

    bb5: {
        switchInt((*_2)[4 of 18]) -> [101: bb6, otherwise: bb19];
    }

    bb6: {
        switchInt((*_2)[5 of 18]) -> [115: bb7, otherwise: bb19];
    }

    bb7: {
        switchInt((*_2)[6 of 18]) -> [116: bb8, otherwise: bb19];
    }

    bb8: {
        switchInt((*_2)[7 of 18]) -> [95: bb9, otherwise: bb19];
    }

    bb9: {
        switchInt((*_2)[8 of 18]) -> [115: bb10, otherwise: bb19];
    }

    bb10: {
        switchInt((*_2)[9 of 18]) -> [105: bb11, otherwise: bb19];
    }

    bb11: {
        switchInt((*_2)[10 of 18]) -> [122: bb12, otherwise: bb19];
    }

    bb12: {
        switchInt((*_2)[11 of 18]) -> [101: bb13, otherwise: bb19];
    }

    bb13: {
        switchInt((*_2)[12 of 18]) -> [95: bb14, otherwise: bb19];
    }

    bb14: {
        switchInt((*_2)[13 of 18]) -> [108: bb15, otherwise: bb19];
    }

    bb15: {
        switchInt((*_2)[14 of 18]) -> [105: bb16, otherwise: bb19];
    }

    bb16: {
        switchInt((*_2)[15 of 18]) -> [109: bb17, otherwise: bb19];
    }

    bb17: {
        switchInt((*_2)[16 of 18]) -> [105: bb18, otherwise: bb19];
    }

    bb18: {
        switchInt((*_2)[17 of 18]) -> [116: bb20, otherwise: bb19];
    }

    bb19: {
        _7 = _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb21;
    }

    bb20: {
        _6 = _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb21;
    }

    bb21: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::<impl at src/configuration.rs:152:35: 152:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::<impl at src/configuration.rs:152:35: 152:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Http";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::<impl at src/configuration.rs:152:35: 152:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Visitor<'_>, _2: __A) -> Result<configuration::Http, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<configuration::Http>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::Http, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: configuration::Http;
    let mut _4: std::result::Result<std::option::Option<u64>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _13: configuration::Http;
    scope 1 {
        debug __default => _3;
        let _7: std::option::Option<u64>;
        let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _10: u64;
        let mut _14: &&str;
        scope 2 {
            debug __field0 => _10;
        }
        scope 3 {
            debug __val => _7;
        }
        scope 4 {
            debug __err => _8;
        }
        scope 5 {
            debug __value => _10;
        }
    }

    bb0: {
        _3 = <configuration::Http as Default>::default() -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<u64>(_5) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<configuration::Http, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb9;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_4 as Ok).0: std::option::Option<u64>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb4];
    }

    bb6: {
        _14 = const _;
        _12 = _14 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb8, unwind: bb11];
    }

    bb7: {
        _10 = ((_7 as Some).0: u64);
        _13 = configuration::Http { request_size_limit: _10 };
        _0 = Result::<configuration::Http, <__A as SeqAccess<'_>>::Error>::Ok(move _13);
        drop(_2) -> [return: bb10, unwind continue];
    }

    bb8: {
        _0 = Result::<configuration::Http, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb9;
    }

    bb9: {
        drop(_2) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::<impl at src/configuration.rs:152:35: 152:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Http with 1 element";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::<impl at src/configuration.rs:152:35: 152:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Visitor<'_>, _2: __A) -> Result<configuration::Http, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<configuration::Http>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::Http, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<u64>;
    let mut _4: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: isize;
    let mut _12: bool;
    let _13: &std::option::Option<u64>;
    let mut _14: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _15: std::option::Option<u64>;
    let mut _16: std::result::Result<u64, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _17: &mut __A;
    let mut _18: isize;
    let mut _21: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _27: isize;
    let mut _29: configuration::Http;
    let mut _30: u64;
    scope 1 {
        debug __field0 => _3;
        let _25: configuration::Http;
        scope 2 {
            debug __key => _10;
            let _7: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field>;
            let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _10: configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field;
            let _19: u64;
            let _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _24: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __val => _7;
            }
            scope 4 {
                debug __err => _8;
            }
            scope 5 {
                debug __val => _19;
            }
            scope 6 {
                debug __err => _20;
            }
            scope 7 {
            }
            scope 8 {
                debug __val => const IgnoredAny;
            }
            scope 9 {
                debug __err => _24;
            }
        }
        scope 10 {
            debug __default => _25;
            let _26: u64;
            let _28: u64;
            scope 11 {
                debug __field0 => _26;
            }
            scope 12 {
                debug __field0 => _28;
            }
        }
    }

    bb0: {
        _3 = std::option::Option::<u64>::None;
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Http::<impl Deserialize<'de> for configuration::Http>::deserialize::__Field>(_5) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<configuration::Http, <__A as MapAccess<'_>>::Error>::Err(move _8);
        goto -> bb26;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _25 = <configuration::Http as Default>::default() -> [return: bb19, unwind: bb24];
    }

    bb7: {
        _10 = move ((_7 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_Http::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Http>::deserialize::__Field);
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_22) -> [return: bb17, unwind: bb24];
    }

    bb9: {
        _13 = &_3;
        _12 = std::option::Option::<u64>::is_some(_13) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _14 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "request_size_limit") -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _0 = Result::<configuration::Http, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb26;
    }

    bb13: {
        _17 = &mut _2;
        _16 = <__A as MapAccess<'_>>::next_value::<u64>(_17) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _20 = move ((_16 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<configuration::Http, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb26;
    }

    bb16: {
        _19 = ((_16 as Ok).0: u64);
        _15 = std::option::Option::<u64>::Some(_19);
        _3 = move _15;
        goto -> bb1;
    }

    bb17: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb1, 1: bb18, otherwise: bb4];
    }

    bb18: {
        _24 = move ((_21 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<configuration::Http, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb26;
    }

    bb19: {
        _27 = discriminant(_3);
        switchInt(move _27) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        _26 = (_25.0: u64);
        goto -> bb22;
    }

    bb21: {
        _28 = ((_3 as Some).0: u64);
        _26 = _28;
        goto -> bb22;
    }

    bb22: {
        _30 = _26;
        _29 = configuration::Http { request_size_limit: move _30 };
        _0 = Result::<configuration::Http, <__A as MapAccess<'_>>::Error>::Ok(move _29);
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26: {
        drop(_2) -> [return: bb23, unwind continue];
    }
}

const _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 1];
    let _2: &[&str; 1];
    let _3: [&str; 1];
    let mut _4: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Http::<impl at src/configuration.rs:152:35: 152:46>::deserialize::FIELDS: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "request_size_limit"];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:157:1: 157:22>::default() -> configuration::Http {
    let mut _0: configuration::Http;

    bb0: {
        _0 = configuration::Http { request_size_limit: const 8388608_u64 };
        return;
    }
}

fn configuration::<impl at src/configuration.rs:166:10: 166:15>::fmt(_1: &Logging, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &log::LevelFilter;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::vec::Vec<configuration::LogOutput>;
    let _10: &std::vec::Vec<configuration::LogOutput>;

    bb0: {
        _3 = const "Logging";
        _4 = const "level";
        _6 = &((*_1).0: log::LevelFilter);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "outputs";
        _10 = &((*_1).1: std::vec::Vec<configuration::LogOutput>);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn configuration::<impl at src/configuration.rs:166:17: 166:22>::clone(_1: &Logging) -> Logging {
    debug self => _1;
    let mut _0: configuration::Logging;
    let mut _2: log::LevelFilter;
    let _3: &log::LevelFilter;
    let mut _4: std::vec::Vec<configuration::LogOutput>;
    let _5: &std::vec::Vec<configuration::LogOutput>;

    bb0: {
        _3 = &((*_1).0: log::LevelFilter);
        _2 = <LevelFilter as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::vec::Vec<configuration::LogOutput>);
        _4 = <Vec<LogOutput> as Clone>::clone(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Logging { level: move _2, outputs: move _4 };
        return;
    }
}

const _IMPL_SERIALIZE_FOR_Logging: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:24: 166:33>::serialize(_1: &Logging, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: (usize, bool);
    let mut _10: (usize, bool);
    let mut _11: isize;
    let _12: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _13: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _14: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _15: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _16: &log::LevelFilter;
    let mut _17: isize;
    let mut _19: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _20: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _21: &std::vec::Vec<configuration::LogOutput>;
    let mut _22: isize;
    let mut _24: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _25: bool;
    let mut _26: bool;
    scope 1 {
        debug __serde_state => _3;
        let _18: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _23: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _18;
        }
        scope 6 {
            debug __val => const ();
        }
        scope 7 {
            debug __err => _23;
        }
    }
    scope 2 {
        debug __val => _12;
    }
    scope 3 {
        debug __err => _13;
    }

    bb0: {
        _25 = const false;
        _26 = const false;
        _26 = const true;
        _5 = move _2;
        _8 = const false as usize (IntToInt);
        _9 = CheckedAdd(_8, const 1_usize);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const 1_usize) -> [success: bb1, unwind: bb21];
    }

    bb1: {
        _7 = move (_9.0: usize);
        _10 = CheckedAdd(_7, const 1_usize);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb2, unwind: bb21];
    }

    bb2: {
        _6 = move (_10.0: usize);
        _26 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "Logging", move _6) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _26 = const false;
        _11 = discriminant(_4);
        switchInt(move _11) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _13 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _13);
        goto -> bb15;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _12 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _25 = const true;
        _3 = move _12;
        _15 = &mut _3;
        _16 = &((*_1).0: log::LevelFilter);
        _14 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<LevelFilter>(_15, const "level", _16) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb8, otherwise: bb5];
    }

    bb8: {
        _18 = move ((_14 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _18);
        goto -> bb14;
    }

    bb9: {
        _20 = &mut _3;
        _21 = &((*_1).1: std::vec::Vec<configuration::LogOutput>);
        _19 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<Vec<LogOutput>>(_20, const "outputs", _21) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb12, 1: bb11, otherwise: bb5];
    }

    bb11: {
        _23 = move ((_19 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _23);
        goto -> bb14;
    }

    bb12: {
        _25 = const false;
        _24 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _24) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _25 = const false;
        goto -> bb16;
    }

    bb14: {
        drop(_3) -> [return: bb15, unwind continue];
    }

    bb15: {
        _25 = const false;
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_25) -> [0: bb17, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_5) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_26) -> [0: bb17, otherwise: bb20];
    }
}

const _IMPL_DESERIALIZE_FOR_Logging: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize(_1: __D) -> Result<Logging, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::Logging, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Visitor<'_>>(move _1, const "Logging", const _, const _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Logging>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::<impl at src/configuration.rs:166:35: 166:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::<impl at src/configuration.rs:166:35: 166:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field;
    let mut _5: __E;
    let mut _6: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _7: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _8: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        _6 = Unexpected::<'_>::Unsigned(_2);
        _8 = const _;
        _7 = _8 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _5 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb5;
    }

    bb3: {
        _4 = _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb5;
    }

    bb4: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E>::Err(move _5);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::<impl at src/configuration.rs:166:35: 166:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 2";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::<impl at src/configuration.rs:166:35: 166:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field;

    bb0: {
        _4 = <str as PartialEq>::eq(_2, const "level") -> [return: bb6, unwind continue];
    }

    bb1: {
        _5 = _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb7;
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_2, const "outputs") -> [return: bb5, unwind continue];
    }

    bb3: {
        _6 = _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb4: {
        _7 = _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb7;
    }

    bb5: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb7: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::<impl at src/configuration.rs:166:35: 166:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field;
    let mut _10: configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field;
    let mut _11: configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field;

    bb0: {
        _6 = Len((*_2));
        _7 = const 5_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 5]) -> [108: bb2, otherwise: bb6];
    }

    bb2: {
        switchInt((*_2)[1 of 5]) -> [101: bb3, otherwise: bb6];
    }

    bb3: {
        switchInt((*_2)[2 of 5]) -> [118: bb4, otherwise: bb6];
    }

    bb4: {
        switchInt((*_2)[3 of 5]) -> [101: bb5, otherwise: bb6];
    }

    bb5: {
        switchInt((*_2)[4 of 5]) -> [108: bb15, otherwise: bb6];
    }

    bb6: {
        _11 = _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb17;
    }

    bb7: {
        _3 = Len((*_2));
        _4 = const 7_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb6, otherwise: bb8];
    }

    bb8: {
        switchInt((*_2)[0 of 7]) -> [111: bb9, otherwise: bb6];
    }

    bb9: {
        switchInt((*_2)[1 of 7]) -> [117: bb10, otherwise: bb6];
    }

    bb10: {
        switchInt((*_2)[2 of 7]) -> [116: bb11, otherwise: bb6];
    }

    bb11: {
        switchInt((*_2)[3 of 7]) -> [112: bb12, otherwise: bb6];
    }

    bb12: {
        switchInt((*_2)[4 of 7]) -> [117: bb13, otherwise: bb6];
    }

    bb13: {
        switchInt((*_2)[5 of 7]) -> [116: bb14, otherwise: bb6];
    }

    bb14: {
        switchInt((*_2)[6 of 7]) -> [115: bb16, otherwise: bb6];
    }

    bb15: {
        _9 = _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb17;
    }

    bb16: {
        _10 = _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::<impl at src/configuration.rs:166:35: 166:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::<impl at src/configuration.rs:166:35: 166:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Logging";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::<impl at src/configuration.rs:166:35: 166:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Visitor<'_>, _2: __A) -> Result<Logging, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Logging>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::Logging, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: configuration::Logging;
    let mut _4: std::result::Result<std::option::Option<log::LevelFilter>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<std::vec::Vec<configuration::LogOutput>>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _22: configuration::Logging;
    scope 1 {
        debug __default => _3;
        let _7: std::option::Option<log::LevelFilter>;
        let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _10: log::LevelFilter;
        let mut _23: &&str;
        scope 2 {
            debug __field0 => _10;
            let _16: std::option::Option<std::vec::Vec<configuration::LogOutput>>;
            let _17: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
            let _19: std::vec::Vec<configuration::LogOutput>;
            let mut _24: &&str;
            scope 6 {
                debug __field1 => _19;
            }
            scope 7 {
                debug __val => _16;
            }
            scope 8 {
                debug __err => _17;
            }
            scope 9 {
                debug __value => _19;
            }
        }
        scope 3 {
            debug __val => _7;
        }
        scope 4 {
            debug __err => _8;
        }
        scope 5 {
            debug __value => _10;
        }
    }

    bb0: {
        _3 = <Logging as Default>::default() -> [return: bb1, unwind: bb20];
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<LevelFilter>(_5) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Logging, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb16;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = ((_4 as Ok).0: std::option::Option<log::LevelFilter>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb4];
    }

    bb6: {
        _23 = const _;
        _12 = _23 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb8, unwind: bb19];
    }

    bb7: {
        _10 = ((_7 as Some).0: log::LevelFilter);
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<Vec<LogOutput>>(_14) -> [return: bb9, unwind: bb19];
    }

    bb8: {
        _0 = Result::<Logging, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb16;
    }

    bb9: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb11, 1: bb10, otherwise: bb4];
    }

    bb10: {
        _17 = move ((_13 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Logging, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb16;
    }

    bb11: {
        _16 = move ((_13 as Ok).0: std::option::Option<std::vec::Vec<configuration::LogOutput>>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _24 = const _;
        _21 = _24 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb14, unwind: bb19];
    }

    bb13: {
        _19 = move ((_16 as Some).0: std::vec::Vec<configuration::LogOutput>);
        _22 = Logging { level: _10, outputs: move _19 };
        _0 = Result::<Logging, <__A as SeqAccess<'_>>::Error>::Ok(move _22);
        drop(_3) -> [return: bb15, unwind: bb20];
    }

    bb14: {
        _0 = Result::<Logging, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb16;
    }

    bb15: {
        drop(_2) -> [return: bb18, unwind continue];
    }

    bb16: {
        drop(_3) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        drop(_2) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::<impl at src/configuration.rs:166:35: 166:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Logging with 2 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::<impl at src/configuration.rs:166:35: 166:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Logging with 2 elements";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::<impl at src/configuration.rs:166:35: 166:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Visitor<'_>, _2: __A) -> Result<Logging, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Logging>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::Logging, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<log::LevelFilter>;
    let mut _5: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _6: &mut __A;
    let mut _7: isize;
    let mut _10: isize;
    let mut _12: isize;
    let mut _13: bool;
    let _14: &std::option::Option<log::LevelFilter>;
    let mut _15: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _16: std::option::Option<log::LevelFilter>;
    let mut _17: std::result::Result<log::LevelFilter, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _18: &mut __A;
    let mut _19: isize;
    let mut _22: bool;
    let _23: &std::option::Option<std::vec::Vec<configuration::LogOutput>>;
    let mut _24: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _25: std::option::Option<std::vec::Vec<configuration::LogOutput>>;
    let mut _26: std::result::Result<std::vec::Vec<configuration::LogOutput>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _27: &mut __A;
    let mut _28: isize;
    let mut _31: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _37: isize;
    let mut _40: isize;
    let mut _42: configuration::Logging;
    let mut _43: log::LevelFilter;
    let mut _44: std::vec::Vec<configuration::LogOutput>;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::vec::Vec<configuration::LogOutput>>;
        scope 2 {
            debug __field1 => _4;
            let _35: configuration::Logging;
            scope 3 {
                debug __key => _11;
                let _8: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field>;
                let _9: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                let _11: configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field;
                let _20: log::LevelFilter;
                let _21: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                let _29: std::vec::Vec<configuration::LogOutput>;
                let _30: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                let _34: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                scope 4 {
                    debug __val => _8;
                }
                scope 5 {
                    debug __err => _9;
                }
                scope 6 {
                    debug __val => _20;
                }
                scope 7 {
                    debug __err => _21;
                }
                scope 8 {
                    debug __val => _29;
                }
                scope 9 {
                    debug __err => _30;
                }
                scope 10 {
                }
                scope 11 {
                    debug __val => const IgnoredAny;
                }
                scope 12 {
                    debug __err => _34;
                }
            }
            scope 13 {
                debug __default => _35;
                let _36: log::LevelFilter;
                let _38: log::LevelFilter;
                scope 14 {
                    debug __field0 => _36;
                    let _39: std::vec::Vec<configuration::LogOutput>;
                    let _41: std::vec::Vec<configuration::LogOutput>;
                    scope 16 {
                        debug __field1 => _39;
                    }
                    scope 17 {
                        debug __field1 => _41;
                    }
                }
                scope 15 {
                    debug __field0 => _38;
                }
            }
        }
    }

    bb0: {
        _45 = const false;
        _46 = const false;
        _3 = std::option::Option::<LevelFilter>::None;
        _46 = const true;
        _4 = std::option::Option::<Vec<LogOutput>>::None;
        goto -> bb1;
    }

    bb1: {
        _6 = &mut _2;
        _5 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Logging::<impl Deserialize<'de> for Logging>::deserialize::__Field>(_6) -> [return: bb2, unwind: bb45];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_5 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Logging, <__A as MapAccess<'_>>::Error>::Err(move _9);
        goto -> bb42;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field>);
        _10 = discriminant(_8);
        switchInt(move _10) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _35 = <Logging as Default>::default() -> [return: bb29, unwind: bb45];
    }

    bb7: {
        _11 = move ((_8 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_Logging::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Logging>::deserialize::__Field);
        _12 = discriminant(_11);
        switchInt(move _12) -> [0: bb9, 1: bb17, otherwise: bb8];
    }

    bb8: {
        _32 = &mut _2;
        _31 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_32) -> [return: bb27, unwind: bb45];
    }

    bb9: {
        _14 = &_3;
        _13 = std::option::Option::<LevelFilter>::is_some(_14) -> [return: bb10, unwind: bb45];
    }

    bb10: {
        switchInt(move _13) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _15 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "level") -> [return: bb12, unwind: bb45];
    }

    bb12: {
        _0 = Result::<Logging, <__A as MapAccess<'_>>::Error>::Err(move _15);
        goto -> bb42;
    }

    bb13: {
        _18 = &mut _2;
        _17 = <__A as MapAccess<'_>>::next_value::<LevelFilter>(_18) -> [return: bb14, unwind: bb45];
    }

    bb14: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _21 = move ((_17 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Logging, <__A as MapAccess<'_>>::Error>::Err(move _21);
        goto -> bb42;
    }

    bb16: {
        _20 = ((_17 as Ok).0: log::LevelFilter);
        _16 = std::option::Option::<LevelFilter>::Some(_20);
        _3 = move _16;
        goto -> bb1;
    }

    bb17: {
        _23 = &_4;
        _22 = std::option::Option::<Vec<LogOutput>>::is_some(_23) -> [return: bb18, unwind: bb45];
    }

    bb18: {
        switchInt(move _22) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _24 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "outputs") -> [return: bb20, unwind: bb45];
    }

    bb20: {
        _0 = Result::<Logging, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb42;
    }

    bb21: {
        _27 = &mut _2;
        _26 = <__A as MapAccess<'_>>::next_value::<Vec<LogOutput>>(_27) -> [return: bb22, unwind: bb45];
    }

    bb22: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _30 = move ((_26 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Logging, <__A as MapAccess<'_>>::Error>::Err(move _30);
        goto -> bb42;
    }

    bb24: {
        _29 = move ((_26 as Ok).0: std::vec::Vec<configuration::LogOutput>);
        _25 = std::option::Option::<Vec<LogOutput>>::Some(move _29);
        drop(_4) -> [return: bb25, unwind: bb26];
    }

    bb25: {
        _46 = const true;
        _4 = move _25;
        goto -> bb1;
    }

    bb26 (cleanup): {
        _46 = const true;
        _4 = move _25;
        goto -> bb45;
    }

    bb27: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb1, 1: bb28, otherwise: bb4];
    }

    bb28: {
        _34 = move ((_31 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Logging, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb42;
    }

    bb29: {
        _45 = const true;
        _37 = discriminant(_3);
        switchInt(move _37) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        _36 = (_35.0: log::LevelFilter);
        goto -> bb32;
    }

    bb31: {
        _38 = ((_3 as Some).0: log::LevelFilter);
        _36 = _38;
        goto -> bb32;
    }

    bb32: {
        _40 = discriminant(_4);
        switchInt(move _40) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        _45 = const false;
        _39 = move (_35.1: std::vec::Vec<configuration::LogOutput>);
        goto -> bb35;
    }

    bb34: {
        _46 = const false;
        _41 = move ((_4 as Some).0: std::vec::Vec<configuration::LogOutput>);
        _39 = move _41;
        goto -> bb35;
    }

    bb35: {
        _43 = _36;
        _44 = move _39;
        _42 = Logging { level: move _43, outputs: move _44 };
        _0 = Result::<Logging, <__A as MapAccess<'_>>::Error>::Ok(move _42);
        switchInt(_45) -> [0: bb40, otherwise: bb41];
    }

    bb36: {
        _46 = const false;
        drop(_2) -> [return: bb37, unwind continue];
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_2) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }

    bb40: {
        _45 = const false;
        _46 = const false;
        drop(_2) -> [return: bb37, unwind continue];
    }

    bb41: {
        drop((_35.1: std::vec::Vec<configuration::LogOutput>)) -> [return: bb40, unwind: bb45];
    }

    bb42: {
        drop(_4) -> [return: bb36, unwind: bb38];
    }

    bb43 (cleanup): {
        switchInt(_46) -> [0: bb38, otherwise: bb44];
    }

    bb44 (cleanup): {
        drop(((_4 as Some).0: std::vec::Vec<configuration::LogOutput>)) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        _47 = discriminant(_4);
        switchInt(move _47) -> [1: bb43, otherwise: bb38];
    }
}

const _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 2];
    let _2: &[&str; 2];
    let _3: [&str; 2];
    let mut _4: &[&str; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Logging::<impl at src/configuration.rs:166:35: 166:46>::deserialize::FIELDS: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "level", const "outputs"];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:172:1: 172:25>::default() -> Logging {
    let mut _0: configuration::Logging;
    let mut _1: log::LevelFilter;
    let mut _2: std::vec::Vec<configuration::LogOutput>;
    let mut _3: std::boxed::Box<[configuration::LogOutput]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[configuration::LogOutput; 1]>;
    let mut _8: configuration::LogOutput;
    let mut _9: *const [configuration::LogOutput; 1];
    let mut _10: *const ();
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    scope 1 {
    }

    bb0: {
        _1 = log::LevelFilter::Info;
        _4 = SizeOf([configuration::LogOutput; 1]);
        _5 = AlignOf([configuration::LogOutput; 1]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [configuration::LogOutput; 1]);
        _8 = LogOutput::Stdout { colored: const false };
        _9 = (((_7.0: std::ptr::Unique<[configuration::LogOutput; 1]>).0: std::ptr::NonNull<[configuration::LogOutput; 1]>).0: *const [configuration::LogOutput; 1]);
        _10 = _9 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf([configuration::LogOutput; 1]);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb3, unwind unreachable];
    }

    bb2: {
        _0 = Logging { level: move _1, outputs: move _2 };
        return;
    }

    bb3: {
        (*_9) = [move _8];
        _3 = move _7 as std::boxed::Box<[configuration::LogOutput]> (PointerCoercion(Unsize));
        _2 = std::slice::<impl [LogOutput]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb2, unwind continue];
    }
}

fn configuration::<impl at src/configuration.rs:181:10: 181:15>::fmt(_1: &LogOutput, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &std::path::PathBuf;
    let _5: &str;
    let _6: &str;
    let mut _7: &dyn std::fmt::Debug;
    let _8: &&std::path::PathBuf;
    let _9: &bool;
    let _10: &str;
    let _11: &str;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &&bool;
    let _14: &bool;
    let _15: &str;
    let _16: &str;
    let mut _17: &dyn std::fmt::Debug;
    let _18: &&bool;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _9;
    }
    scope 3 {
        debug __self_0 => _14;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _14 = &(((*_1) as Stderr).0: bool);
        _15 = const "Stderr";
        _16 = const "colored";
        _18 = &_14;
        _17 = _18 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _15, _16, move _17) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as File).0: std::path::PathBuf);
        _5 = const "File";
        _6 = const "path";
        _8 = &_4;
        _7 = _8 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _5, _6, move _7) -> [return: bb5, unwind continue];
    }

    bb4: {
        _9 = &(((*_1) as Stdout).0: bool);
        _10 = const "Stdout";
        _11 = const "colored";
        _13 = &_9;
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _10, _11, move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn configuration::<impl at src/configuration.rs:181:17: 181:22>::clone(_1: &LogOutput) -> LogOutput {
    debug self => _1;
    let mut _0: configuration::LogOutput;
    let mut _2: isize;
    let _3: &std::path::PathBuf;
    let mut _4: std::path::PathBuf;
    let _5: &bool;
    let mut _6: bool;
    let _7: &bool;
    let mut _8: bool;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
    }
    scope 3 {
        debug __self_0 => _7;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = &(((*_1) as Stderr).0: bool);
        _8 = (*_7);
        _0 = LogOutput::Stderr { colored: move _8 };
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as File).0: std::path::PathBuf);
        _4 = <PathBuf as Clone>::clone(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = LogOutput::File { path: move _4 };
        goto -> bb6;
    }

    bb5: {
        _5 = &(((*_1) as Stdout).0: bool);
        _6 = (*_5);
        _0 = LogOutput::Stdout { colored: move _6 };
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

const _IMPL_SERIALIZE_FOR_LogOutput: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:24: 181:33>::serialize(_1: &LogOutput, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: isize;
    let _4: &std::path::PathBuf;
    let mut _6: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _7: __S;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: (usize, bool);
    let mut _11: (usize, bool);
    let mut _12: isize;
    let mut _15: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _16: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _17: &str;
    let mut _18: isize;
    let mut _20: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _21: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _22: isize;
    let mut _24: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _25: &bool;
    let mut _27: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _28: __S;
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: (usize, bool);
    let mut _32: (usize, bool);
    let mut _33: isize;
    let mut _36: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _37: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _38: &str;
    let mut _39: isize;
    let mut _41: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _42: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _43: isize;
    let mut _45: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _46: &bool;
    let mut _48: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _49: __S;
    let mut _50: usize;
    let mut _51: usize;
    let mut _52: (usize, bool);
    let mut _53: (usize, bool);
    let mut _54: isize;
    let mut _57: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _58: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _59: &str;
    let mut _60: isize;
    let mut _62: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _63: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _64: isize;
    let mut _66: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    scope 1 {
        debug path => _4;
        let mut _5: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
        let _13: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
        let _14: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 2 {
            debug __serde_state => _5;
            let _19: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
            let _23: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
            scope 5 {
                debug __val => const ();
            }
            scope 6 {
                debug __err => _19;
            }
            scope 7 {
                debug __val => const ();
            }
            scope 8 {
                debug __err => _23;
            }
        }
        scope 3 {
            debug __val => _13;
        }
        scope 4 {
            debug __err => _14;
        }
    }
    scope 9 {
        debug colored => _25;
        let mut _26: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
        let _34: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
        let _35: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 10 {
            debug __serde_state => _26;
            let _40: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
            let _44: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
            scope 13 {
                debug __val => const ();
            }
            scope 14 {
                debug __err => _40;
            }
            scope 15 {
                debug __val => const ();
            }
            scope 16 {
                debug __err => _44;
            }
        }
        scope 11 {
            debug __val => _34;
        }
        scope 12 {
            debug __err => _35;
        }
    }
    scope 17 {
        debug colored => _46;
        let mut _47: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
        let _55: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
        let _56: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 18 {
            debug __serde_state => _47;
            let _61: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
            let _65: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
            scope 21 {
                debug __val => const ();
            }
            scope 22 {
                debug __err => _61;
            }
            scope 23 {
                debug __val => const ();
            }
            scope 24 {
                debug __err => _65;
            }
        }
        scope 19 {
            debug __val => _55;
        }
        scope 20 {
            debug __err => _56;
        }
    }

    bb0: {
        _71 = const false;
        _72 = const false;
        _69 = const false;
        _70 = const false;
        _67 = const false;
        _68 = const false;
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb16, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _46 = &(((*_1) as Stderr).0: bool);
        _68 = const true;
        _49 = move _2;
        _52 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_52.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb29, unwind: bb52];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as File).0: std::path::PathBuf);
        _72 = const true;
        _7 = move _2;
        _10 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb4, unwind: bb60];
    }

    bb4: {
        _9 = move (_10.0: usize);
        _11 = CheckedAdd(_9, const 1_usize);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_usize) -> [success: bb5, unwind: bb60];
    }

    bb5: {
        _8 = move (_11.0: usize);
        _72 = const false;
        _6 = <__S as Serializer>::serialize_struct(move _7, const "LogOutput", move _8) -> [return: bb6, unwind: bb60];
    }

    bb6: {
        _72 = const false;
        _12 = discriminant(_6);
        switchInt(move _12) -> [0: bb8, 1: bb7, otherwise: bb2];
    }

    bb7: {
        _14 = move ((_6 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _14);
        goto -> bb46;
    }

    bb8: {
        _13 = move ((_6 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _71 = const true;
        _5 = move _13;
        _16 = &mut _5;
        _17 = const "file";
        _15 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_16, const "type", _17) -> [return: bb9, unwind: bb58];
    }

    bb9: {
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb11, 1: bb10, otherwise: bb2];
    }

    bb10: {
        _19 = move ((_15 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _19);
        goto -> bb45;
    }

    bb11: {
        _21 = &mut _5;
        _20 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<PathBuf>(_21, const "path", _4) -> [return: bb12, unwind: bb58];
    }

    bb12: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb14, 1: bb13, otherwise: bb2];
    }

    bb13: {
        _23 = move ((_20 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _23);
        goto -> bb45;
    }

    bb14: {
        _71 = const false;
        _24 = move _5;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _24) -> [return: bb15, unwind: bb58];
    }

    bb15: {
        _71 = const false;
        goto -> bb47;
    }

    bb16: {
        _25 = &(((*_1) as Stdout).0: bool);
        _70 = const true;
        _28 = move _2;
        _31 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb17, unwind: bb56];
    }

    bb17: {
        _30 = move (_31.0: usize);
        _32 = CheckedAdd(_30, const 1_usize);
        assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", move _30, const 1_usize) -> [success: bb18, unwind: bb56];
    }

    bb18: {
        _29 = move (_32.0: usize);
        _70 = const false;
        _27 = <__S as Serializer>::serialize_struct(move _28, const "LogOutput", move _29) -> [return: bb19, unwind: bb56];
    }

    bb19: {
        _70 = const false;
        _33 = discriminant(_27);
        switchInt(move _33) -> [0: bb21, 1: bb20, otherwise: bb2];
    }

    bb20: {
        _35 = move ((_27 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _35);
        goto -> bb44;
    }

    bb21: {
        _34 = move ((_27 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _69 = const true;
        _26 = move _34;
        _37 = &mut _26;
        _38 = const "stdout";
        _36 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_37, const "type", _38) -> [return: bb22, unwind: bb54];
    }

    bb22: {
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb24, 1: bb23, otherwise: bb2];
    }

    bb23: {
        _40 = move ((_36 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _40);
        goto -> bb43;
    }

    bb24: {
        _42 = &mut _26;
        _41 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_42, const "colored", _25) -> [return: bb25, unwind: bb54];
    }

    bb25: {
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb27, 1: bb26, otherwise: bb2];
    }

    bb26: {
        _44 = move ((_41 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _44);
        goto -> bb43;
    }

    bb27: {
        _69 = const false;
        _45 = move _26;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _45) -> [return: bb28, unwind: bb54];
    }

    bb28: {
        _69 = const false;
        goto -> bb47;
    }

    bb29: {
        _51 = move (_52.0: usize);
        _53 = CheckedAdd(_51, const 1_usize);
        assert(!move (_53.1: bool), "attempt to compute `{} + {}`, which would overflow", move _51, const 1_usize) -> [success: bb30, unwind: bb52];
    }

    bb30: {
        _50 = move (_53.0: usize);
        _68 = const false;
        _48 = <__S as Serializer>::serialize_struct(move _49, const "LogOutput", move _50) -> [return: bb31, unwind: bb52];
    }

    bb31: {
        _68 = const false;
        _54 = discriminant(_48);
        switchInt(move _54) -> [0: bb33, 1: bb32, otherwise: bb2];
    }

    bb32: {
        _56 = move ((_48 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _56);
        goto -> bb42;
    }

    bb33: {
        _55 = move ((_48 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _67 = const true;
        _47 = move _55;
        _58 = &mut _47;
        _59 = const "stderr";
        _57 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_58, const "type", _59) -> [return: bb34, unwind: bb50];
    }

    bb34: {
        _60 = discriminant(_57);
        switchInt(move _60) -> [0: bb36, 1: bb35, otherwise: bb2];
    }

    bb35: {
        _61 = move ((_57 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _61);
        goto -> bb41;
    }

    bb36: {
        _63 = &mut _47;
        _62 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_63, const "colored", _46) -> [return: bb37, unwind: bb50];
    }

    bb37: {
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb39, 1: bb38, otherwise: bb2];
    }

    bb38: {
        _65 = move ((_62 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _65);
        goto -> bb41;
    }

    bb39: {
        _67 = const false;
        _66 = move _47;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _66) -> [return: bb40, unwind: bb50];
    }

    bb40: {
        _67 = const false;
        goto -> bb47;
    }

    bb41: {
        drop(_47) -> [return: bb42, unwind continue];
    }

    bb42: {
        _67 = const false;
        goto -> bb47;
    }

    bb43: {
        drop(_26) -> [return: bb44, unwind continue];
    }

    bb44: {
        _69 = const false;
        goto -> bb47;
    }

    bb45: {
        drop(_5) -> [return: bb46, unwind continue];
    }

    bb46: {
        _71 = const false;
        goto -> bb47;
    }

    bb47: {
        return;
    }

    bb48 (cleanup): {
        resume;
    }

    bb49 (cleanup): {
        drop(_47) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_67) -> [0: bb48, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_49) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_68) -> [0: bb48, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_26) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_69) -> [0: bb48, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_28) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_70) -> [0: bb48, otherwise: bb55];
    }

    bb57 (cleanup): {
        drop(_5) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_71) -> [0: bb48, otherwise: bb57];
    }

    bb59 (cleanup): {
        drop(_7) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_72) -> [0: bb48, otherwise: bb59];
    }
}

const _IMPL_DESERIALIZE_FOR_LogOutput: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize(_1: __D) -> Result<LogOutput, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::LogOutput, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;
    let _2: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::TaggedContent<'_, configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>;
    let mut _3: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::TaggedContent<'_, configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;
    let mut _4: __D;
    let mut _5: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::TaggedContentVisitor<'_, configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>;
    let mut _6: isize;
    let _7: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::TaggedContent<'_, configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>;
    let _8: <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error;
    let mut _9: isize;
    let mut _10: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::ContentDeserializer<'_, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;
    let mut _11: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::Content<'_>;
    let mut _12: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::ContentDeserializer<'_, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;
    let mut _13: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::Content<'_>;
    let mut _14: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::ContentDeserializer<'_, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;
    let mut _15: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::Content<'_>;
    let mut _16: bool;
    let mut _17: bool;
    scope 1 {
        debug __tagged => _2;
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }

    bb0: {
        _17 = const false;
        _16 = const false;
        _17 = const true;
        _4 = move _1;
        _5 = TaggedContentVisitor::<'_, _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field>::new(const "type") -> [return: bb1, unwind: bb18];
    }

    bb1: {
        _17 = const false;
        _3 = <__D as Deserializer<'_>>::deserialize_any::<TaggedContentVisitor<'_, _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field>>(move _4, move _5) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        _17 = const false;
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_3 as Err).0: <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error);
        _0 = Result::<LogOutput, <__D as Deserializer<'_>>::Error>::Err(move _8);
        _16 = const false;
        goto -> bb13;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_3 as Ok).0: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::TaggedContent<'_, configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>);
        _16 = const true;
        _2 = move _7;
        _9 = discriminant((_2.0: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field));
        switchInt(move _9) -> [0: bb7, 1: bb9, 2: bb6, otherwise: bb4];
    }

    bb6: {
        _16 = const false;
        _15 = move (_2.1: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::Content<'_>);
        _14 = ContentDeserializer::<'_, <__D as Deserializer<'_>>::Error>::new(move _15) -> [return: bb11, unwind: bb16];
    }

    bb7: {
        _16 = const false;
        _11 = move (_2.1: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::Content<'_>);
        _10 = ContentDeserializer::<'_, <__D as Deserializer<'_>>::Error>::new(move _11) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _0 = <ContentDeserializer<'_, <__D as Deserializer<'_>>::Error> as Deserializer<'_>>::deserialize_any::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>>(move _10, const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<LogOutput>, lifetime: PhantomData::<&()> }}) -> [return: bb19, unwind: bb16];
    }

    bb9: {
        _16 = const false;
        _13 = move (_2.1: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::Content<'_>);
        _12 = ContentDeserializer::<'_, <__D as Deserializer<'_>>::Error>::new(move _13) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _0 = <ContentDeserializer<'_, <__D as Deserializer<'_>>::Error> as Deserializer<'_>>::deserialize_any::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>>(move _12, const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<LogOutput>, lifetime: PhantomData::<&()> }}) -> [return: bb20, unwind: bb16];
    }

    bb11: {
        _0 = <ContentDeserializer<'_, <__D as Deserializer<'_>>::Error> as Deserializer<'_>>::deserialize_any::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>>(move _14, const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<LogOutput>, lifetime: PhantomData::<&()> }}) -> [return: bb21, unwind: bb16];
    }

    bb12: {
        _16 = const false;
        goto -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop((_2.1: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::content::Content<'_>)) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_16) -> [0: bb14, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_4) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_17) -> [0: bb14, otherwise: bb17];
    }

    bb19: {
        goto -> bb12;
    }

    bb20: {
        goto -> bb12;
    }

    bb21: {
        goto -> bb12;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _6: __E;
    let mut _7: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _8: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _9: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1];
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2);
        _9 = const _;
        _8 = _9 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _6 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb6;
    }

    bb3: {
        _4 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb6;
    }

    bb4: {
        _5 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 3";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _8: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _9: __E;

    bb0: {
        _5 = <str as PartialEq>::eq(_2, const "file") -> [return: bb9, unwind continue];
    }

    bb1: {
        _6 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb11;
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "stdout") -> [return: bb8, unwind continue];
    }

    bb3: {
        _7 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb11;
    }

    bb4: {
        _3 = <str as PartialEq>::eq(_2, const "stderr") -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb11;
    }

    bb6: {
        _9 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb10, unwind continue];
    }

    bb7: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb8: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb9: {
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb10: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Err(move _9);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _10: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _11: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let _12: &std::borrow::Cow<'_, str>;
    let _13: std::borrow::Cow<'_, str>;
    let mut _14: __E;
    let _15: &str;
    scope 1 {
        debug __value => _12;
    }

    bb0: {
        _6 = Len((*_2));
        _7 = const 4_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb6, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 4]) -> [102: bb2, otherwise: bb5];
    }

    bb2: {
        switchInt((*_2)[1 of 4]) -> [105: bb3, otherwise: bb5];
    }

    bb3: {
        switchInt((*_2)[2 of 4]) -> [108: bb4, otherwise: bb5];
    }

    bb4: {
        switchInt((*_2)[3 of 4]) -> [101: bb15, otherwise: bb5];
    }

    bb5: {
        _13 = from_utf8_lossy(_2) -> [return: bb18, unwind continue];
    }

    bb6: {
        _3 = Len((*_2));
        _4 = const 6_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb5, otherwise: bb7];
    }

    bb7: {
        switchInt((*_2)[0 of 6]) -> [115: bb8, otherwise: bb5];
    }

    bb8: {
        switchInt((*_2)[1 of 6]) -> [116: bb9, otherwise: bb5];
    }

    bb9: {
        switchInt((*_2)[2 of 6]) -> [100: bb10, otherwise: bb5];
    }

    bb10: {
        switchInt((*_2)[3 of 6]) -> [111: bb11, 101: bb13, otherwise: bb5];
    }

    bb11: {
        switchInt((*_2)[4 of 6]) -> [117: bb12, otherwise: bb5];
    }

    bb12: {
        switchInt((*_2)[5 of 6]) -> [116: bb16, otherwise: bb5];
    }

    bb13: {
        switchInt((*_2)[4 of 6]) -> [114: bb14, otherwise: bb5];
    }

    bb14: {
        switchInt((*_2)[5 of 6]) -> [114: bb17, otherwise: bb5];
    }

    bb15: {
        _9 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb21;
    }

    bb16: {
        _10 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb21;
    }

    bb17: {
        _11 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb21;
    }

    bb18: {
        _12 = &_13;
        _15 = <Cow<'_, str> as Deref>::deref(_12) -> [return: bb19, unwind: bb22];
    }

    bb19: {
        _14 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::unknown_variant(_15, const _) -> [return: bb20, unwind: bb22];
    }

    bb20: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Err(move _14);
        drop(_13) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_13) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 3];
    let _2: &[&str; 3];
    let _3: [&str; 3];
    let mut _4: &[&str; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in VARIANTS: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "file", const "stdout", const "stderr"];
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _4: __E;
    let mut _5: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _6: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _7: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Unexpected::<'_>::Unsigned(_2);
        _7 = const _;
        _6 = _7 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _4 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Err(move _4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 1";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "path") -> [return: bb3, unwind continue];
    }

    bb1: {
        _4 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb4;
    }

    bb2: {
        _5 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb4;
    }

    bb3: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 4_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 4]) -> [112: bb2, otherwise: bb5];
    }

    bb2: {
        switchInt((*_2)[1 of 4]) -> [97: bb3, otherwise: bb5];
    }

    bb3: {
        switchInt((*_2)[2 of 4]) -> [116: bb4, otherwise: bb5];
    }

    bb4: {
        switchInt((*_2)[3 of 4]) -> [104: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb7;
    }

    bb6: {
        _6 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct variant LogOutput::File";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>, _2: __A) -> Result<LogOutput, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<LogOutput>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::LogOutput, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<std::path::PathBuf>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<std::path::PathBuf>;
    let _7: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: std::path::PathBuf;
    let mut _10: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _12: configuration::LogOutput;
    let mut _13: &&str;
    scope 1 {
        debug __field0 => _9;
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<PathBuf>(_4) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb8;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = move ((_3 as Ok).0: std::option::Option<std::path::PathBuf>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _13 = const _;
        _11 = _13 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb10];
    }

    bb6: {
        _9 = move ((_6 as Some).0: std::path::PathBuf);
        _12 = LogOutput::File { path: move _9 };
        _0 = Result::<LogOutput, <__A as SeqAccess<'_>>::Error>::Ok(move _12);
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb7: {
        _0 = Result::<LogOutput, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb8;
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct variant LogOutput::File with 1 element";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>, _2: __A) -> Result<LogOutput, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<LogOutput>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::LogOutput, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::path::PathBuf>;
    let mut _4: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: isize;
    let mut _12: bool;
    let _13: &std::option::Option<std::path::PathBuf>;
    let mut _14: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _15: std::option::Option<std::path::PathBuf>;
    let mut _16: std::result::Result<std::path::PathBuf, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _17: &mut __A;
    let mut _18: isize;
    let mut _21: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: std::result::Result<std::path::PathBuf, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _29: isize;
    let mut _32: configuration::LogOutput;
    let mut _33: std::path::PathBuf;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    scope 1 {
        debug __field0 => _3;
        let _25: std::path::PathBuf;
        let _27: std::path::PathBuf;
        let _30: std::path::PathBuf;
        let _31: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
        scope 2 {
            debug __key => _10;
            let _7: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>;
            let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _10: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
            let _19: std::path::PathBuf;
            let _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _24: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __val => _7;
            }
            scope 4 {
                debug __err => _8;
            }
            scope 5 {
                debug __val => _19;
            }
            scope 6 {
                debug __err => _20;
            }
            scope 7 {
            }
            scope 8 {
                debug __val => const IgnoredAny;
            }
            scope 9 {
                debug __err => _24;
            }
        }
        scope 10 {
            debug __field0 => _25;
        }
        scope 11 {
            debug __field0 => _27;
        }
        scope 12 {
            debug __val => _30;
        }
        scope 13 {
            debug __err => _31;
        }
    }

    bb0: {
        _34 = const false;
        _34 = const true;
        _3 = std::option::Option::<PathBuf>::None;
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field>(_5) -> [return: bb2, unwind: bb36];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _8);
        goto -> bb33;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = discriminant(_3);
        switchInt(move _26) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb7: {
        _10 = move ((_7 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field);
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_22) -> [return: bb19, unwind: bb36];
    }

    bb9: {
        _13 = &_3;
        _12 = std::option::Option::<PathBuf>::is_some(_13) -> [return: bb10, unwind: bb36];
    }

    bb10: {
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _14 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "path") -> [return: bb12, unwind: bb36];
    }

    bb12: {
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb33;
    }

    bb13: {
        _17 = &mut _2;
        _16 = <__A as MapAccess<'_>>::next_value::<PathBuf>(_17) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _20 = move ((_16 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb33;
    }

    bb16: {
        _19 = move ((_16 as Ok).0: std::path::PathBuf);
        _15 = std::option::Option::<PathBuf>::Some(move _19);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _34 = const true;
        _3 = move _15;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _34 = const true;
        _3 = move _15;
        goto -> bb36;
    }

    bb19: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb1, 1: bb20, otherwise: bb4];
    }

    bb20: {
        _24 = move ((_21 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb33;
    }

    bb21: {
        _28 = _IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::missing_field::<'_, PathBuf, <__A as MapAccess<'_>>::Error>(const "path") -> [return: bb23, unwind: bb36];
    }

    bb22: {
        _34 = const false;
        _27 = move ((_3 as Some).0: std::path::PathBuf);
        _25 = move _27;
        goto -> bb26;
    }

    bb23: {
        _29 = discriminant(_28);
        switchInt(move _29) -> [0: bb25, 1: bb24, otherwise: bb4];
    }

    bb24: {
        _31 = move ((_28 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb33;
    }

    bb25: {
        _30 = move ((_28 as Ok).0: std::path::PathBuf);
        _25 = move _30;
        goto -> bb26;
    }

    bb26: {
        _33 = move _25;
        _32 = LogOutput::File { path: move _33 };
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Ok(move _32);
        _34 = const false;
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30: {
        _34 = const false;
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb31: {
        switchInt(_34) -> [0: bb30, otherwise: bb32];
    }

    bb32: {
        drop(((_3 as Some).0: std::path::PathBuf)) -> [return: bb30, unwind: bb28];
    }

    bb33: {
        _35 = discriminant(_3);
        switchInt(move _35) -> [1: bb31, otherwise: bb30];
    }

    bb34 (cleanup): {
        switchInt(_34) -> [0: bb28, otherwise: bb35];
    }

    bb35 (cleanup): {
        drop(((_3 as Some).0: std::path::PathBuf)) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        _36 = discriminant(_3);
        switchInt(move _36) -> [1: bb34, otherwise: bb28];
    }
}

const _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 1];
    let _2: &[&str; 1];
    let _3: [&str; 1];
    let mut _4: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::FIELDS: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "path"];
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _4: __E;
    let mut _5: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _6: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _7: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Unexpected::<'_>::Unsigned(_2);
        _7 = const _;
        _6 = _7 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _4 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Err(move _4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 1";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "colored") -> [return: bb3, unwind continue];
    }

    bb1: {
        _4 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb4;
    }

    bb2: {
        _5 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb4;
    }

    bb3: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 7_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [99: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [111: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [108: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [111: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [114: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [101: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [100: bb9, otherwise: bb8];
    }

    bb8: {
        _7 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb9: {
        _6 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct variant LogOutput::Stdout";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>, _2: __A) -> Result<LogOutput, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<LogOutput>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::LogOutput, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<bool>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<bool>;
    let _7: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: bool;
    let mut _10: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _12: configuration::LogOutput;
    let mut _13: &&str;
    scope 1 {
        debug __field0 => _9;
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<bool>(_4) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb8;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<bool>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _13 = const _;
        _11 = _13 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb10];
    }

    bb6: {
        _9 = ((_6 as Some).0: bool);
        _12 = LogOutput::Stdout { colored: _9 };
        _0 = Result::<LogOutput, <__A as SeqAccess<'_>>::Error>::Ok(move _12);
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb7: {
        _0 = Result::<LogOutput, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb8;
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct variant LogOutput::Stdout with 1 element";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>, _2: __A) -> Result<LogOutput, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<LogOutput>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::LogOutput, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<bool>;
    let mut _4: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: isize;
    let mut _12: bool;
    let _13: &std::option::Option<bool>;
    let mut _14: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _15: std::option::Option<bool>;
    let mut _16: std::result::Result<bool, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _17: &mut __A;
    let mut _18: isize;
    let mut _21: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: std::result::Result<bool, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _29: isize;
    let mut _32: configuration::LogOutput;
    let mut _33: bool;
    scope 1 {
        debug __field0 => _3;
        let _25: bool;
        let _27: bool;
        let _30: bool;
        let _31: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
        scope 2 {
            debug __key => _10;
            let _7: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>;
            let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _10: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
            let _19: bool;
            let _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _24: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __val => _7;
            }
            scope 4 {
                debug __err => _8;
            }
            scope 5 {
                debug __val => _19;
            }
            scope 6 {
                debug __err => _20;
            }
            scope 7 {
            }
            scope 8 {
                debug __val => const IgnoredAny;
            }
            scope 9 {
                debug __err => _24;
            }
        }
        scope 10 {
            debug __field0 => _25;
        }
        scope 11 {
            debug __field0 => _27;
        }
        scope 12 {
            debug __val => _30;
        }
        scope 13 {
            debug __err => _31;
        }
    }

    bb0: {
        _3 = std::option::Option::<bool>::None;
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field>(_5) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _8);
        goto -> bb25;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = discriminant(_3);
        switchInt(move _26) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb7: {
        _10 = move ((_7 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field);
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_22) -> [return: bb17, unwind: bb27];
    }

    bb9: {
        _13 = &_3;
        _12 = std::option::Option::<bool>::is_some(_13) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _14 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "colored") -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb25;
    }

    bb13: {
        _17 = &mut _2;
        _16 = <__A as MapAccess<'_>>::next_value::<bool>(_17) -> [return: bb14, unwind: bb27];
    }

    bb14: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _20 = move ((_16 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb25;
    }

    bb16: {
        _19 = ((_16 as Ok).0: bool);
        _15 = std::option::Option::<bool>::Some(_19);
        _3 = move _15;
        goto -> bb1;
    }

    bb17: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb1, 1: bb18, otherwise: bb4];
    }

    bb18: {
        _24 = move ((_21 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb25;
    }

    bb19: {
        _28 = _IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "colored") -> [return: bb21, unwind: bb27];
    }

    bb20: {
        _27 = ((_3 as Some).0: bool);
        _25 = _27;
        goto -> bb24;
    }

    bb21: {
        _29 = discriminant(_28);
        switchInt(move _29) -> [0: bb23, 1: bb22, otherwise: bb4];
    }

    bb22: {
        _31 = move ((_28 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb25;
    }

    bb23: {
        _30 = ((_28 as Ok).0: bool);
        _25 = _30;
        goto -> bb24;
    }

    bb24: {
        _33 = _25;
        _32 = LogOutput::Stdout { colored: move _33 };
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Ok(move _32);
        drop(_2) -> [return: bb26, unwind continue];
    }

    bb25: {
        drop(_2) -> [return: bb26, unwind continue];
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_2) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        resume;
    }
}

const _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 1];
    let _2: &[&str; 1];
    let _3: [&str; 1];
    let mut _4: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::FIELDS: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "colored"];
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _4: __E;
    let mut _5: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _6: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _7: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Unexpected::<'_>::Unsigned(_2);
        _7 = const _;
        _6 = _7 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _4 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Err(move _4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 1";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "colored") -> [return: bb3, unwind continue];
    }

    bb1: {
        _4 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb4;
    }

    bb2: {
        _5 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb4;
    }

    bb3: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 7_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [99: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [111: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [108: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [111: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [114: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [101: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [100: bb9, otherwise: bb8];
    }

    bb8: {
        _7 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb9: {
        _6 = _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct variant LogOutput::Stderr";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>, _2: __A) -> Result<LogOutput, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<LogOutput>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::LogOutput, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<bool>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<bool>;
    let _7: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: bool;
    let mut _10: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _12: configuration::LogOutput;
    let mut _13: &&str;
    scope 1 {
        debug __field0 => _9;
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<bool>(_4) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb8;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<bool>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _13 = const _;
        _11 = _13 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb10];
    }

    bb6: {
        _9 = ((_6 as Some).0: bool);
        _12 = LogOutput::Stderr { colored: _9 };
        _0 = Result::<LogOutput, <__A as SeqAccess<'_>>::Error>::Ok(move _12);
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb7: {
        _0 = Result::<LogOutput, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb8;
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct variant LogOutput::Stderr with 1 element";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::<impl at src/configuration.rs:181:35: 181:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor<'_>, _2: __A) -> Result<LogOutput, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<LogOutput>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::LogOutput, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<bool>;
    let mut _4: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: isize;
    let mut _12: bool;
    let _13: &std::option::Option<bool>;
    let mut _14: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _15: std::option::Option<bool>;
    let mut _16: std::result::Result<bool, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _17: &mut __A;
    let mut _18: isize;
    let mut _21: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: std::result::Result<bool, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _29: isize;
    let mut _32: configuration::LogOutput;
    let mut _33: bool;
    scope 1 {
        debug __field0 => _3;
        let _25: bool;
        let _27: bool;
        let _30: bool;
        let _31: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
        scope 2 {
            debug __key => _10;
            let _7: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>;
            let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _10: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field;
            let _19: bool;
            let _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _24: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __val => _7;
            }
            scope 4 {
                debug __err => _8;
            }
            scope 5 {
                debug __val => _19;
            }
            scope 6 {
                debug __err => _20;
            }
            scope 7 {
            }
            scope 8 {
                debug __val => const IgnoredAny;
            }
            scope 9 {
                debug __err => _24;
            }
        }
        scope 10 {
            debug __field0 => _25;
        }
        scope 11 {
            debug __field0 => _27;
        }
        scope 12 {
            debug __val => _30;
        }
        scope 13 {
            debug __err => _31;
        }
    }

    bb0: {
        _3 = std::option::Option::<bool>::None;
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_LogOutput::<impl Deserialize<'de> for LogOutput>::deserialize::__Field>(_5) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _8);
        goto -> bb25;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = discriminant(_3);
        switchInt(move _26) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb7: {
        _10 = move ((_7 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_LogOutput::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::LogOutput>::deserialize::__Field);
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_22) -> [return: bb17, unwind: bb27];
    }

    bb9: {
        _13 = &_3;
        _12 = std::option::Option::<bool>::is_some(_13) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _14 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "colored") -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb25;
    }

    bb13: {
        _17 = &mut _2;
        _16 = <__A as MapAccess<'_>>::next_value::<bool>(_17) -> [return: bb14, unwind: bb27];
    }

    bb14: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _20 = move ((_16 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb25;
    }

    bb16: {
        _19 = ((_16 as Ok).0: bool);
        _15 = std::option::Option::<bool>::Some(_19);
        _3 = move _15;
        goto -> bb1;
    }

    bb17: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb1, 1: bb18, otherwise: bb4];
    }

    bb18: {
        _24 = move ((_21 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb25;
    }

    bb19: {
        _28 = _IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "colored") -> [return: bb21, unwind: bb27];
    }

    bb20: {
        _27 = ((_3 as Some).0: bool);
        _25 = _27;
        goto -> bb24;
    }

    bb21: {
        _29 = discriminant(_28);
        switchInt(move _29) -> [0: bb23, 1: bb22, otherwise: bb4];
    }

    bb22: {
        _31 = move ((_28 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb25;
    }

    bb23: {
        _30 = ((_28 as Ok).0: bool);
        _25 = _30;
        goto -> bb24;
    }

    bb24: {
        _33 = _25;
        _32 = LogOutput::Stderr { colored: move _33 };
        _0 = Result::<LogOutput, <__A as MapAccess<'_>>::Error>::Ok(move _32);
        drop(_2) -> [return: bb26, unwind continue];
    }

    bb25: {
        drop(_2) -> [return: bb26, unwind continue];
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_2) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        resume;
    }
}

const _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 1];
    let _2: &[&str; 1];
    let _3: [&str; 1];
    let mut _4: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_LogOutput::<impl at src/configuration.rs:181:35: 181:46>::deserialize::FIELDS: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "colored"];
        _0 = &_1;
        return;
    }
}

fn configuration::<impl at src/configuration.rs:189:10: 189:15>::fmt(_1: &Claims, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::string::String;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &i64;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&i64;
    let _16: &i64;

    bb0: {
        _3 = const "Claims";
        _4 = const "sub";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "iss";
        _9 = &((*_1).1: std::string::String);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "iat";
        _12 = &((*_1).2: i64);
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = const "exp";
        _16 = &((*_1).3: i64);
        _15 = &_16;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field4_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn configuration::<impl at src/configuration.rs:189:17: 189:22>::clone(_1: &Claims) -> Claims {
    debug self => _1;
    let mut _0: configuration::Claims;
    let mut _2: std::string::String;
    let _3: &std::string::String;
    let mut _4: std::string::String;
    let _5: &std::string::String;
    let mut _6: i64;
    let _7: &i64;
    let mut _8: i64;
    let _9: &i64;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <std::string::String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::string::String);
        _4 = <std::string::String as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _7 = &((*_1).2: i64);
        _6 = (*_7);
        _9 = &((*_1).3: i64);
        _8 = (*_9);
        _0 = Claims { sub: move _2, iss: move _4, iat: move _6, exp: move _8 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

const _IMPL_SERIALIZE_FOR_Claims: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:24: 189:33>::serialize(_1: &Claims, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: (usize, bool);
    let mut _12: (usize, bool);
    let mut _13: (usize, bool);
    let mut _14: (usize, bool);
    let mut _15: isize;
    let _16: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _17: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _18: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _19: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _20: &std::string::String;
    let mut _21: isize;
    let mut _23: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _24: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _25: &std::string::String;
    let mut _26: isize;
    let mut _28: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _29: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _30: &i64;
    let mut _31: isize;
    let mut _33: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _34: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _35: &i64;
    let mut _36: isize;
    let mut _38: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _39: bool;
    let mut _40: bool;
    scope 1 {
        debug __serde_state => _3;
        let _22: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _27: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _32: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        let _37: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _22;
        }
        scope 6 {
            debug __val => const ();
        }
        scope 7 {
            debug __err => _27;
        }
        scope 8 {
            debug __val => const ();
        }
        scope 9 {
            debug __err => _32;
        }
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _37;
        }
    }
    scope 2 {
        debug __val => _16;
    }
    scope 3 {
        debug __err => _17;
    }

    bb0: {
        _39 = const false;
        _40 = const false;
        _40 = const true;
        _5 = move _2;
        _10 = const false as usize (IntToInt);
        _11 = CheckedAdd(_10, const 1_usize);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_usize) -> [success: bb1, unwind: bb29];
    }

    bb1: {
        _9 = move (_11.0: usize);
        _12 = CheckedAdd(_9, const 1_usize);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_usize) -> [success: bb2, unwind: bb29];
    }

    bb2: {
        _8 = move (_12.0: usize);
        _13 = CheckedAdd(_8, const 1_usize);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const 1_usize) -> [success: bb3, unwind: bb29];
    }

    bb3: {
        _7 = move (_13.0: usize);
        _14 = CheckedAdd(_7, const 1_usize);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb4, unwind: bb29];
    }

    bb4: {
        _6 = move (_14.0: usize);
        _40 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "Claims", move _6) -> [return: bb5, unwind: bb29];
    }

    bb5: {
        _40 = const false;
        _15 = discriminant(_4);
        switchInt(move _15) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _17 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _17);
        goto -> bb23;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _16 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _39 = const true;
        _3 = move _16;
        _19 = &mut _3;
        _20 = &((*_1).0: std::string::String);
        _18 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_19, const "sub", _20) -> [return: bb9, unwind: bb27];
    }

    bb9: {
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb11, 1: bb10, otherwise: bb7];
    }

    bb10: {
        _22 = move ((_18 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _22);
        goto -> bb22;
    }

    bb11: {
        _24 = &mut _3;
        _25 = &((*_1).1: std::string::String);
        _23 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_24, const "iss", _25) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb14, 1: bb13, otherwise: bb7];
    }

    bb13: {
        _27 = move ((_23 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _27);
        goto -> bb22;
    }

    bb14: {
        _29 = &mut _3;
        _30 = &((*_1).2: i64);
        _28 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<i64>(_29, const "iat", _30) -> [return: bb15, unwind: bb27];
    }

    bb15: {
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb17, 1: bb16, otherwise: bb7];
    }

    bb16: {
        _32 = move ((_28 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _32);
        goto -> bb22;
    }

    bb17: {
        _34 = &mut _3;
        _35 = &((*_1).3: i64);
        _33 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<i64>(_34, const "exp", _35) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb20, 1: bb19, otherwise: bb7];
    }

    bb19: {
        _37 = move ((_33 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _37);
        goto -> bb22;
    }

    bb20: {
        _39 = const false;
        _38 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _38) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        _39 = const false;
        goto -> bb24;
    }

    bb22: {
        drop(_3) -> [return: bb23, unwind continue];
    }

    bb23: {
        _39 = const false;
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        drop(_3) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_39) -> [0: bb25, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_5) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_40) -> [0: bb25, otherwise: bb28];
    }
}

const _IMPL_DESERIALIZE_FOR_Claims: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize(_1: __D) -> Result<Claims, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::Claims, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Visitor<'_>>(move _1, const "Claims", const _, const _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Claims>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field, __E>;
    let mut _3: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _4: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _5: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _7: __E;
    let mut _8: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _9: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _10: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1];
    }

    bb1: {
        _8 = Unexpected::<'_>::Unsigned(_2);
        _10 = const _;
        _9 = _10 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _7 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _8, move _9) -> [return: bb6, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb7;
    }

    bb3: {
        _4 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb7;
    }

    bb4: {
        _5 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb7;
    }

    bb5: {
        _6 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb6: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Err(move _7);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 4";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _8: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _9: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _10: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _11: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;

    bb0: {
        _6 = <str as PartialEq>::eq(_2, const "sub") -> [return: bb12, unwind continue];
    }

    bb1: {
        _7 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb13;
    }

    bb2: {
        _5 = <str as PartialEq>::eq(_2, const "iss") -> [return: bb11, unwind continue];
    }

    bb3: {
        _8 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb13;
    }

    bb4: {
        _4 = <str as PartialEq>::eq(_2, const "iat") -> [return: bb10, unwind continue];
    }

    bb5: {
        _9 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb13;
    }

    bb6: {
        _3 = <str as PartialEq>::eq(_2, const "exp") -> [return: bb9, unwind continue];
    }

    bb7: {
        _10 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb13;
    }

    bb8: {
        _11 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb13;
    }

    bb9: {
        switchInt(move _3) -> [0: bb8, otherwise: bb7];
    }

    bb10: {
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb11: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb12: {
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb13: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _7: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _8: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _9: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
    let mut _10: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 3_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 3]) -> [115: bb2, 105: bb5, 101: bb8, otherwise: bb4];
    }

    bb2: {
        switchInt((*_2)[1 of 3]) -> [117: bb3, otherwise: bb4];
    }

    bb3: {
        switchInt((*_2)[2 of 3]) -> [98: bb10, otherwise: bb4];
    }

    bb4: {
        _10 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb14;
    }

    bb5: {
        switchInt((*_2)[1 of 3]) -> [115: bb6, 97: bb7, otherwise: bb4];
    }

    bb6: {
        switchInt((*_2)[2 of 3]) -> [115: bb11, otherwise: bb4];
    }

    bb7: {
        switchInt((*_2)[2 of 3]) -> [116: bb12, otherwise: bb4];
    }

    bb8: {
        switchInt((*_2)[1 of 3]) -> [120: bb9, otherwise: bb4];
    }

    bb9: {
        switchInt((*_2)[2 of 3]) -> [112: bb13, otherwise: bb4];
    }

    bb10: {
        _6 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb14;
    }

    bb11: {
        _7 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb14;
    }

    bb12: {
        _8 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field2;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb14;
    }

    bb13: {
        _9 = _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field::__field3;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct Claims";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Visitor<'_>, _2: __A) -> Result<Claims, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Claims>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<configuration::Claims, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: std::string::String;
    let mut _4: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::string::String>;
    let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::string::String;
    let mut _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _14: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _19: isize;
    let mut _21: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _23: std::result::Result<std::option::Option<i64>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _24: &mut __A;
    let mut _25: isize;
    let mut _28: isize;
    let mut _30: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _31: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _32: std::result::Result<std::option::Option<i64>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _33: &mut __A;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _40: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _41: configuration::Claims;
    let mut _42: std::string::String;
    let mut _43: std::string::String;
    let mut _44: &&str;
    scope 1 {
        debug __field0 => _3;
        let _13: std::string::String;
        let _17: std::option::Option<std::string::String>;
        let _18: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _20: std::string::String;
        let mut _45: &&str;
        scope 5 {
            debug __field1 => _13;
            let _26: std::option::Option<i64>;
            let _27: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
            let _29: i64;
            let mut _46: &&str;
            scope 9 {
                debug __field2 => _29;
                let _35: std::option::Option<i64>;
                let _36: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
                let _38: i64;
                let mut _47: &&str;
                scope 13 {
                    debug __field3 => _38;
                }
                scope 14 {
                    debug __val => _35;
                }
                scope 15 {
                    debug __err => _36;
                }
                scope 16 {
                    debug __value => _38;
                }
            }
            scope 10 {
                debug __val => _26;
            }
            scope 11 {
                debug __err => _27;
            }
            scope 12 {
                debug __value => _29;
            }
        }
        scope 6 {
            debug __val => _17;
        }
        scope 7 {
            debug __err => _18;
        }
        scope 8 {
            debug __value => _20;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_5) -> [return: bb1, unwind: bb32];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb28;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::string::String>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _44 = const _;
        _12 = _44 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb32];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::string::String);
        _3 = move _10;
        _15 = &mut _2;
        _14 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_15) -> [return: bb8, unwind: bb31];
    }

    bb7: {
        _0 = Result::<Claims, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb28;
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _18 = move ((_14 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb27;
    }

    bb10: {
        _17 = move ((_14 as Ok).0: std::option::Option<std::string::String>);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _45 = const _;
        _22 = _45 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 1_usize, move _22) -> [return: bb13, unwind: bb31];
    }

    bb12: {
        _20 = move ((_17 as Some).0: std::string::String);
        _13 = move _20;
        _24 = &mut _2;
        _23 = <__A as SeqAccess<'_>>::next_element::<i64>(_24) -> [return: bb14, unwind: bb30];
    }

    bb13: {
        _0 = Result::<Claims, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb27;
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _27 = move ((_23 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as SeqAccess<'_>>::Error>::Err(move _27);
        goto -> bb26;
    }

    bb16: {
        _26 = ((_23 as Ok).0: std::option::Option<i64>);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _46 = const _;
        _31 = _46 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _30 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 2_usize, move _31) -> [return: bb19, unwind: bb30];
    }

    bb18: {
        _29 = ((_26 as Some).0: i64);
        _33 = &mut _2;
        _32 = <__A as SeqAccess<'_>>::next_element::<i64>(_33) -> [return: bb20, unwind: bb30];
    }

    bb19: {
        _0 = Result::<Claims, <__A as SeqAccess<'_>>::Error>::Err(move _30);
        goto -> bb26;
    }

    bb20: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _36 = move ((_32 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as SeqAccess<'_>>::Error>::Err(move _36);
        goto -> bb26;
    }

    bb22: {
        _35 = ((_32 as Ok).0: std::option::Option<i64>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _47 = const _;
        _40 = _47 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _39 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb25, unwind: bb30];
    }

    bb24: {
        _38 = ((_35 as Some).0: i64);
        _42 = move _3;
        _43 = move _13;
        _41 = Claims { sub: move _42, iss: move _43, iat: _29, exp: _38 };
        _0 = Result::<Claims, <__A as SeqAccess<'_>>::Error>::Ok(move _41);
        drop(_2) -> [return: bb29, unwind continue];
    }

    bb25: {
        _0 = Result::<Claims, <__A as SeqAccess<'_>>::Error>::Err(move _39);
        goto -> bb26;
    }

    bb26: {
        drop(_13) -> [return: bb27, unwind: bb31];
    }

    bb27: {
        drop(_3) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        drop(_2) -> [return: bb29, unwind continue];
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_13) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_3) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_2) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Claims with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Claims with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Claims with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct Claims with 4 elements";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::<impl at src/configuration.rs:189:35: 189:46>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Visitor<'_>, _2: __A) -> Result<Claims, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Claims>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<configuration::Claims, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::string::String>;
    let mut _7: std::result::Result<std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _8: &mut __A;
    let mut _9: isize;
    let mut _12: isize;
    let mut _14: isize;
    let mut _15: bool;
    let _16: &std::option::Option<std::string::String>;
    let mut _17: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _18: std::option::Option<std::string::String>;
    let mut _19: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _20: &mut __A;
    let mut _21: isize;
    let mut _24: bool;
    let _25: &std::option::Option<std::string::String>;
    let mut _26: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _27: std::option::Option<std::string::String>;
    let mut _28: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _29: &mut __A;
    let mut _30: isize;
    let mut _33: bool;
    let _34: &std::option::Option<i64>;
    let mut _35: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _36: std::option::Option<i64>;
    let mut _37: std::result::Result<i64, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _38: &mut __A;
    let mut _39: isize;
    let mut _42: bool;
    let _43: &std::option::Option<i64>;
    let mut _44: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _45: std::option::Option<i64>;
    let mut _46: std::result::Result<i64, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _47: &mut __A;
    let mut _48: isize;
    let mut _51: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _52: &mut __A;
    let mut _53: isize;
    let mut _56: isize;
    let mut _58: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _59: isize;
    let mut _63: isize;
    let mut _65: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _66: isize;
    let mut _70: isize;
    let mut _72: std::result::Result<i64, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _73: isize;
    let mut _77: isize;
    let mut _79: std::result::Result<i64, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _80: isize;
    let mut _83: configuration::Claims;
    let mut _84: std::string::String;
    let mut _85: std::string::String;
    let mut _86: i64;
    let mut _87: i64;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::string::String>;
        scope 2 {
            debug __field1 => _4;
            let mut _5: std::option::Option<i64>;
            scope 3 {
                debug __field2 => _5;
                let mut _6: std::option::Option<i64>;
                scope 4 {
                    debug __field3 => _6;
                    let _55: std::string::String;
                    let _57: std::string::String;
                    let _60: std::string::String;
                    let _61: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                    scope 5 {
                        debug __key => _13;
                        let _10: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field>;
                        let _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                        let _13: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field;
                        let _22: std::string::String;
                        let _23: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                        let _31: std::string::String;
                        let _32: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                        let _40: i64;
                        let _41: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                        let _49: i64;
                        let _50: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                        let _54: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                        scope 6 {
                            debug __val => _10;
                        }
                        scope 7 {
                            debug __err => _11;
                        }
                        scope 8 {
                            debug __val => _22;
                        }
                        scope 9 {
                            debug __err => _23;
                        }
                        scope 10 {
                            debug __val => _31;
                        }
                        scope 11 {
                            debug __err => _32;
                        }
                        scope 12 {
                            debug __val => _40;
                        }
                        scope 13 {
                            debug __err => _41;
                        }
                        scope 14 {
                            debug __val => _49;
                        }
                        scope 15 {
                            debug __err => _50;
                        }
                        scope 16 {
                        }
                        scope 17 {
                            debug __val => const IgnoredAny;
                        }
                        scope 18 {
                            debug __err => _54;
                        }
                    }
                    scope 19 {
                        debug __field0 => _55;
                        let _62: std::string::String;
                        let _64: std::string::String;
                        let _67: std::string::String;
                        let _68: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                        scope 23 {
                            debug __field1 => _62;
                            let _69: i64;
                            let _71: i64;
                            let _74: i64;
                            let _75: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                            scope 27 {
                                debug __field2 => _69;
                                let _76: i64;
                                let _78: i64;
                                let _81: i64;
                                let _82: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                                scope 31 {
                                    debug __field3 => _76;
                                }
                                scope 32 {
                                    debug __field3 => _78;
                                }
                                scope 33 {
                                    debug __val => _81;
                                }
                                scope 34 {
                                    debug __err => _82;
                                }
                            }
                            scope 28 {
                                debug __field2 => _71;
                            }
                            scope 29 {
                                debug __val => _74;
                            }
                            scope 30 {
                                debug __err => _75;
                            }
                        }
                        scope 24 {
                            debug __field1 => _64;
                        }
                        scope 25 {
                            debug __val => _67;
                        }
                        scope 26 {
                            debug __err => _68;
                        }
                    }
                    scope 20 {
                        debug __field0 => _57;
                    }
                    scope 21 {
                        debug __val => _60;
                    }
                    scope 22 {
                        debug __err => _61;
                    }
                }
            }
        }
    }

    bb0: {
        _89 = const false;
        _88 = const false;
        _89 = const true;
        _3 = std::option::Option::<std::string::String>::None;
        _88 = const true;
        _4 = std::option::Option::<std::string::String>::None;
        _5 = std::option::Option::<i64>::None;
        _6 = std::option::Option::<i64>::None;
        goto -> bb1;
    }

    bb1: {
        _8 = &mut _2;
        _7 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Claims::<impl Deserialize<'de> for Claims>::deserialize::__Field>(_8) -> [return: bb2, unwind: bb88];
    }

    bb2: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_7 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _11);
        goto -> bb73;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_7 as Ok).0: std::option::Option<configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field>);
        _12 = discriminant(_10);
        switchInt(move _12) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _56 = discriminant(_3);
        switchInt(move _56) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb7: {
        _13 = move ((_10 as Some).0: configuration::_IMPL_DESERIALIZE_FOR_Claims::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for configuration::Claims>::deserialize::__Field);
        _14 = discriminant(_13);
        switchInt(move _14) -> [0: bb9, 1: bb19, 2: bb29, 3: bb37, otherwise: bb8];
    }

    bb8: {
        _52 = &mut _2;
        _51 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_52) -> [return: bb45, unwind: bb88];
    }

    bb9: {
        _16 = &_3;
        _15 = std::option::Option::<std::string::String>::is_some(_16) -> [return: bb10, unwind: bb88];
    }

    bb10: {
        switchInt(move _15) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _17 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "sub") -> [return: bb12, unwind: bb88];
    }

    bb12: {
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _17);
        goto -> bb73;
    }

    bb13: {
        _20 = &mut _2;
        _19 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_20) -> [return: bb14, unwind: bb88];
    }

    bb14: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _23 = move ((_19 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _23);
        goto -> bb73;
    }

    bb16: {
        _22 = move ((_19 as Ok).0: std::string::String);
        _18 = std::option::Option::<std::string::String>::Some(move _22);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _89 = const true;
        _3 = move _18;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _89 = const true;
        _3 = move _18;
        goto -> bb88;
    }

    bb19: {
        _25 = &_4;
        _24 = std::option::Option::<std::string::String>::is_some(_25) -> [return: bb20, unwind: bb88];
    }

    bb20: {
        switchInt(move _24) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _26 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "iss") -> [return: bb22, unwind: bb88];
    }

    bb22: {
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _26);
        goto -> bb73;
    }

    bb23: {
        _29 = &mut _2;
        _28 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_29) -> [return: bb24, unwind: bb88];
    }

    bb24: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _32 = move ((_28 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _32);
        goto -> bb73;
    }

    bb26: {
        _31 = move ((_28 as Ok).0: std::string::String);
        _27 = std::option::Option::<std::string::String>::Some(move _31);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _88 = const true;
        _4 = move _27;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _88 = const true;
        _4 = move _27;
        goto -> bb88;
    }

    bb29: {
        _34 = &_5;
        _33 = std::option::Option::<i64>::is_some(_34) -> [return: bb30, unwind: bb88];
    }

    bb30: {
        switchInt(move _33) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _35 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "iat") -> [return: bb32, unwind: bb88];
    }

    bb32: {
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _35);
        goto -> bb73;
    }

    bb33: {
        _38 = &mut _2;
        _37 = <__A as MapAccess<'_>>::next_value::<i64>(_38) -> [return: bb34, unwind: bb88];
    }

    bb34: {
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _41 = move ((_37 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _41);
        goto -> bb73;
    }

    bb36: {
        _40 = ((_37 as Ok).0: i64);
        _36 = std::option::Option::<i64>::Some(_40);
        _5 = move _36;
        goto -> bb1;
    }

    bb37: {
        _43 = &_6;
        _42 = std::option::Option::<i64>::is_some(_43) -> [return: bb38, unwind: bb88];
    }

    bb38: {
        switchInt(move _42) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _44 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "exp") -> [return: bb40, unwind: bb88];
    }

    bb40: {
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _44);
        goto -> bb73;
    }

    bb41: {
        _47 = &mut _2;
        _46 = <__A as MapAccess<'_>>::next_value::<i64>(_47) -> [return: bb42, unwind: bb88];
    }

    bb42: {
        _48 = discriminant(_46);
        switchInt(move _48) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        _50 = move ((_46 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _50);
        goto -> bb73;
    }

    bb44: {
        _49 = ((_46 as Ok).0: i64);
        _45 = std::option::Option::<i64>::Some(_49);
        _6 = move _45;
        goto -> bb1;
    }

    bb45: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb1, 1: bb46, otherwise: bb4];
    }

    bb46: {
        _54 = move ((_51 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _54);
        goto -> bb73;
    }

    bb47: {
        _58 = _IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "sub") -> [return: bb49, unwind: bb88];
    }

    bb48: {
        _89 = const false;
        _57 = move ((_3 as Some).0: std::string::String);
        _55 = move _57;
        goto -> bb52;
    }

    bb49: {
        _59 = discriminant(_58);
        switchInt(move _59) -> [0: bb51, 1: bb50, otherwise: bb4];
    }

    bb50: {
        _61 = move ((_58 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _61);
        goto -> bb73;
    }

    bb51: {
        _60 = move ((_58 as Ok).0: std::string::String);
        _55 = move _60;
        goto -> bb52;
    }

    bb52: {
        _63 = discriminant(_4);
        switchInt(move _63) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        _65 = _IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "iss") -> [return: bb55, unwind: bb76];
    }

    bb54: {
        _88 = const false;
        _64 = move ((_4 as Some).0: std::string::String);
        _62 = move _64;
        goto -> bb58;
    }

    bb55: {
        _66 = discriminant(_65);
        switchInt(move _66) -> [0: bb57, 1: bb56, otherwise: bb4];
    }

    bb56: {
        _68 = move ((_65 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _68);
        goto -> bb72;
    }

    bb57: {
        _67 = move ((_65 as Ok).0: std::string::String);
        _62 = move _67;
        goto -> bb58;
    }

    bb58: {
        _70 = discriminant(_5);
        switchInt(move _70) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        _72 = _IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::missing_field::<'_, i64, <__A as MapAccess<'_>>::Error>(const "iat") -> [return: bb61, unwind: bb75];
    }

    bb60: {
        _71 = ((_5 as Some).0: i64);
        _69 = _71;
        goto -> bb64;
    }

    bb61: {
        _73 = discriminant(_72);
        switchInt(move _73) -> [0: bb63, 1: bb62, otherwise: bb4];
    }

    bb62: {
        _75 = move ((_72 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _75);
        goto -> bb71;
    }

    bb63: {
        _74 = ((_72 as Ok).0: i64);
        _69 = _74;
        goto -> bb64;
    }

    bb64: {
        _77 = discriminant(_6);
        switchInt(move _77) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        _79 = _IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::missing_field::<'_, i64, <__A as MapAccess<'_>>::Error>(const "exp") -> [return: bb67, unwind: bb75];
    }

    bb66: {
        _78 = ((_6 as Some).0: i64);
        _76 = _78;
        goto -> bb70;
    }

    bb67: {
        _80 = discriminant(_79);
        switchInt(move _80) -> [0: bb69, 1: bb68, otherwise: bb4];
    }

    bb68: {
        _82 = move ((_79 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Err(move _82);
        goto -> bb71;
    }

    bb69: {
        _81 = ((_79 as Ok).0: i64);
        _76 = _81;
        goto -> bb70;
    }

    bb70: {
        _84 = move _55;
        _85 = move _62;
        _86 = _69;
        _87 = _76;
        _83 = Claims { sub: move _84, iss: move _85, iat: move _86, exp: move _87 };
        _0 = Result::<Claims, <__A as MapAccess<'_>>::Error>::Ok(move _83);
        _88 = const false;
        _89 = const false;
        drop(_2) -> [return: bb74, unwind continue];
    }

    bb71: {
        drop(_62) -> [return: bb72, unwind: bb76];
    }

    bb72: {
        drop(_55) -> [return: bb73, unwind: bb88];
    }

    bb73: {
        _90 = discriminant(_4);
        switchInt(move _90) -> [1: bb81, otherwise: bb80];
    }

    bb74: {
        return;
    }

    bb75 (cleanup): {
        drop(_62) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_55) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        _93 = discriminant(_3);
        switchInt(move _93) -> [1: bb89, otherwise: bb78];
    }

    bb78 (cleanup): {
        drop(_2) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        resume;
    }

    bb80: {
        _88 = const false;
        _91 = discriminant(_3);
        switchInt(move _91) -> [1: bb84, otherwise: bb83];
    }

    bb81: {
        switchInt(_88) -> [0: bb80, otherwise: bb82];
    }

    bb82: {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb80, unwind: bb77];
    }

    bb83: {
        _89 = const false;
        drop(_2) -> [return: bb74, unwind continue];
    }

    bb84: {
        switchInt(_89) -> [0: bb83, otherwise: bb85];
    }

    bb85: {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb83, unwind: bb78];
    }

    bb86 (cleanup): {
        switchInt(_88) -> [0: bb77, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        _92 = discriminant(_4);
        switchInt(move _92) -> [1: bb86, otherwise: bb77];
    }

    bb89 (cleanup): {
        switchInt(_89) -> [0: bb78, otherwise: bb90];
    }

    bb90 (cleanup): {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb78, unwind terminate(cleanup)];
    }
}

const _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 4];
    let _2: &[&str; 4];
    let _3: [&str; 4];
    let mut _4: &[&str; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Claims::<impl at src/configuration.rs:189:35: 189:46>::deserialize::FIELDS: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "sub", const "iss", const "iat", const "exp"];
        _0 = &_1;
        return;
    }
}

fn kvstore::<impl at src/kvstore.rs:10:10: 10:15>::fmt(_1: &KvElement, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 7];
    let _5: [&dyn std::fmt::Debug; 7];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &std::vec::Vec<u8>;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::string::String;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &chrono::DateTime<chrono::Utc>;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &chrono::DateTime<chrono::Utc>;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &chrono::DateTime<chrono::Utc>;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &i32;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &&bool;
    let _20: &bool;
    let _21: &str;
    let mut _22: &[&str];
    let mut _23: &[&str; 7];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _23 = const _;
        _7 = &((*_1).0: std::vec::Vec<u8>);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: std::string::String);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: chrono::DateTime<chrono::Utc>);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: chrono::DateTime<chrono::Utc>);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: chrono::DateTime<chrono::Utc>);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: i32);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _20 = &((*_1).6: bool);
        _19 = &_20;
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _21 = const "KvElement";
        _22 = _23 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _21, move _22, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in kvstore::<impl at src/kvstore.rs:10:10: 10:15>::fmt: &[&str; 7] = {
    let mut _0: &[&str; 7];
    let mut _1: [&str; 7];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;

    bb0: {
        _3 = const "mime_type";
        _2 = &(*_3);
        _5 = const "created_at";
        _4 = &(*_5);
        _7 = const "updated_at";
        _6 = &(*_7);
        _9 = const "expire_at";
        _8 = &(*_9);
        _11 = const "update_count";
        _10 = &(*_11);
        _13 = const "locked";
        _12 = &(*_13);
        _1 = [const "data", move _2, move _4, move _6, move _8, move _10, move _12];
        _0 = &_1;
        return;
    }
}

fn kvstore::<impl at src/kvstore.rs:10:17: 10:22>::clone(_1: &KvElement) -> KvElement {
    debug self => _1;
    let mut _0: kvstore::KvElement;
    let mut _2: std::vec::Vec<u8>;
    let _3: &std::vec::Vec<u8>;
    let mut _4: std::string::String;
    let _5: &std::string::String;
    let mut _6: chrono::DateTime<chrono::Utc>;
    let _7: &chrono::DateTime<chrono::Utc>;
    let mut _8: chrono::DateTime<chrono::Utc>;
    let _9: &chrono::DateTime<chrono::Utc>;
    let mut _10: chrono::DateTime<chrono::Utc>;
    let _11: &chrono::DateTime<chrono::Utc>;
    let mut _12: i32;
    let _13: &i32;
    let mut _14: bool;
    let _15: &bool;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<u8>);
        _2 = <Vec<u8> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::string::String);
        _4 = <std::string::String as Clone>::clone(_5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = &((*_1).2: chrono::DateTime<chrono::Utc>);
        _6 = <DateTime<Utc> as Clone>::clone(_7) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _9 = &((*_1).3: chrono::DateTime<chrono::Utc>);
        _8 = <DateTime<Utc> as Clone>::clone(_9) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _11 = &((*_1).4: chrono::DateTime<chrono::Utc>);
        _10 = <DateTime<Utc> as Clone>::clone(_11) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _13 = &((*_1).5: i32);
        _12 = (*_13);
        _15 = &((*_1).6: bool);
        _14 = (*_15);
        _0 = KvElement { data: move _2, mime_type: move _4, created_at: move _6, updated_at: move _8, expire_at: move _10, update_count: move _12, locked: move _14 };
        return;
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

Cipher::priv_key::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 24_usize;
        return;
    }
}

Cipher::iv::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_usize;
        return;
    }
}

fn kvstore::<impl at src/kvstore.rs:31:1: 31:13>::new(_1: std::option::Option<[&str; 2]>) -> KvStore {
    debug cipher => _1;
    let mut _0: kvstore::KvStore;
    let mut _2: kvstore::KvStore;
    let mut _3: chashmap::CHashMap<std::string::String, kvstore::KvElement>;
    let mut _4: std::option::Option<kvstore::Cipher>;
    let mut _5: isize;
    let mut _9: ([u8; 24], [u8; 16]);
    let mut _10: [u8; 24];
    let mut _11: [u8; 16];
    let _12: ();
    let mut _13: &mut [u8];
    let mut _14: &mut [u8; 24];
    let mut _15: std::ops::RangeTo<usize>;
    let _16: &[u8];
    let _17: &std::vec::Vec<u8>;
    let _18: std::vec::Vec<u8>;
    let mut _19: std::result::Result<std::vec::Vec<u8>, hex::FromHexError>;
    let mut _20: &str;
    let _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let _24: ();
    let mut _25: &mut [u8];
    let mut _26: &mut [u8; 16];
    let mut _27: std::ops::RangeTo<usize>;
    let _28: &[u8];
    let _29: &std::vec::Vec<u8>;
    let _30: std::vec::Vec<u8>;
    let mut _31: std::result::Result<std::vec::Vec<u8>, hex::FromHexError>;
    let mut _32: &str;
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: std::option::Option<kvstore::Cipher>;
    let mut _37: kvstore::Cipher;
    let mut _38: [u8; 24];
    let mut _39: [u8; 16];
    scope 1 {
        debug kv => _2;
        scope 2 {
            debug c => _6;
            let _6: [&str; 2];
            let mut _7: [u8; 24];
            let mut _8: [u8; 16];
            scope 3 {
                debug priv_key => _7;
                debug iv => _8;
            }
        }
    }

    bb0: {
        _3 = CHashMap::<std::string::String, KvElement>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = std::option::Option::<Cipher>::None;
        _2 = KvStore { container: move _3, cipher: move _4 };
        _5 = discriminant(_1);
        switchInt(move _5) -> [1: bb2, otherwise: bb17];
    }

    bb2: {
        _6 = ((_1 as Some).0: [&str; 2]);
        _10 = [const 0_u8; 24];
        _11 = [const 0_u8; 16];
        _9 = (move _10, move _11);
        _7 = (_9.0: [u8; 24]);
        _8 = (_9.1: [u8; 16]);
        _14 = &mut _7;
        _15 = RangeTo::<usize> { end: const 24_usize };
        _13 = <[u8; 24] as IndexMut<RangeTo<usize>>>::index_mut(move _14, move _15) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _21 = const 0_usize;
        _22 = const 2_usize;
        _23 = Lt(_21, _22);
        assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> [success: bb4, unwind: bb20];
    }

    bb4: {
        _20 = _6[_21];
        _19 = hex::decode::<&str>(move _20) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _18 = Result::<Vec<u8>, FromHexError>::unwrap(move _19) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _17 = &_18;
        _16 = <Vec<u8> as Deref>::deref(_17) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _12 = core::slice::<impl [u8]>::copy_from_slice(_13, _16) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        drop(_18) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        _26 = &mut _8;
        _27 = RangeTo::<usize> { end: const 16_usize };
        _25 = <[u8; 16] as IndexMut<RangeTo<usize>>>::index_mut(move _26, move _27) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        _33 = const 1_usize;
        _34 = const 2_usize;
        _35 = Lt(_33, _34);
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> [success: bb11, unwind: bb20];
    }

    bb11: {
        _32 = _6[_33];
        _31 = hex::decode::<&str>(move _32) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        _30 = Result::<Vec<u8>, FromHexError>::unwrap(move _31) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _29 = &_30;
        _28 = <Vec<u8> as Deref>::deref(_29) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        _24 = core::slice::<impl [u8]>::copy_from_slice(_25, _28) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_30) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        _38 = _7;
        _39 = _8;
        _37 = Cipher { priv_key: move _38, iv: move _39 };
        _36 = std::option::Option::<Cipher>::Some(move _37);
        (_2.1: std::option::Option<kvstore::Cipher>) = move _36;
        goto -> bb17;
    }

    bb17: {
        _0 = move _2;
        return;
    }

    bb18 (cleanup): {
        drop(_30) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_18) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }
}

kvstore::<impl at src/kvstore.rs:31:1: 31:13>::new::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

kvstore::<impl at src/kvstore.rs:31:1: 31:13>::new::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 24_usize;
        return;
    }
}

kvstore::<impl at src/kvstore.rs:31:1: 31:13>::new::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_usize;
        return;
    }
}

fn kvstore::<impl at src/kvstore.rs:31:1: 31:13>::set(_1: &KvStore, _2: std::string::String, _3: Vec<u8>, _4: std::option::Option<std::string::String>) -> std::option::Option<KvElement> {
    debug self => _1;
    debug key => _2;
    debug value => _3;
    debug mime => _4;
    let mut _0: std::option::Option<kvstore::KvElement>;
    let mut _5: &std::option::Option<kvstore::Cipher>;
    let mut _6: isize;
    let mut _9: std::result::Result<block_modes::Cbc<serpent::Serpent, block_modes::block_padding::ZeroPadding>, block_modes::InvalidKeyIvLength>;
    let mut _10: &[u8];
    let _11: &[u8; 24];
    let mut _12: &[u8];
    let _13: &[u8; 16];
    let mut _14: std::vec::Vec<u8>;
    let _15: &[u8];
    let _16: &std::vec::Vec<u8>;
    let _17: std::string::String;
    let mut _18: isize;
    let _19: std::string::String;
    let mut _20: &std::string::String;
    let _21: std::string::String;
    let _22: &[u8];
    let mut _23: &std::vec::Vec<u8>;
    let mut _24: &mut std::option::Option<chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>>;
    let mut _25: std::option::Option<chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>>;
    let mut _26: &chashmap::CHashMap<std::string::String, kvstore::KvElement>;
    let _27: &std::string::String;
    let mut _28: isize;
    let mut _30: bool;
    let mut _31: &kvstore::KvElement;
    let mut _32: &chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _33: std::vec::Vec<u8>;
    let mut _34: &mut kvstore::KvElement;
    let mut _35: std::string::String;
    let mut _36: &mut kvstore::KvElement;
    let mut _37: chrono::DateTime<chrono::Utc>;
    let mut _38: &mut kvstore::KvElement;
    let mut _39: i32;
    let mut _40: &kvstore::KvElement;
    let mut _41: &chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _42: (i32, bool);
    let mut _43: &mut kvstore::KvElement;
    let mut _44: kvstore::KvElement;
    let _45: &kvstore::KvElement;
    let mut _46: &chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _48: std::vec::Vec<u8>;
    let mut _49: std::string::String;
    let mut _50: chrono::DateTime<chrono::Utc>;
    let mut _51: chrono::DateTime<chrono::Utc>;
    let mut _52: chrono::DateTime<chrono::Utc>;
    let mut _53: &chashmap::CHashMap<std::string::String, kvstore::KvElement>;
    let mut _54: std::string::String;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: isize;
    scope 1 {
        debug c => _7;
        let _7: &kvstore::Cipher;
        let _8: block_modes::Cbc<serpent::Serpent, block_modes::block_padding::ZeroPadding>;
        scope 2 {
            debug cipher => _8;
        }
    }
    scope 3 {
        debug mime_type => _17;
        let _29: &mut chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>;
        let _47: kvstore::KvElement;
        scope 5 {
            debug kv_element => _29;
        }
        scope 6 {
            debug kv_element => _47;
        }
    }
    scope 4 {
        debug gived_mimetype => _19;
    }

    bb0: {
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _59 = const false;
        _58 = const false;
        _60 = const false;
        _57 = const true;
        _56 = const true;
        _60 = const true;
        _5 = &((*_1).1: std::option::Option<kvstore::Cipher>);
        _6 = discriminant((*_5));
        switchInt(move _6) -> [1: bb1, otherwise: bb8];
    }

    bb1: {
        _7 = &(((*_5) as Some).0: kvstore::Cipher);
        _11 = &((*_7).0: [u8; 24]);
        _10 = _11 as &[u8] (PointerCoercion(Unsize));
        _13 = &((*_7).1: [u8; 16]);
        _12 = _13 as &[u8] (PointerCoercion(Unsize));
        _9 = <Cbc<Serpent, ZeroPadding> as BlockMode<Serpent, ZeroPadding>>::new_var(move _10, move _12) -> [return: bb2, unwind: bb62];
    }

    bb2: {
        _8 = Result::<Cbc<Serpent, ZeroPadding>, InvalidKeyIvLength>::unwrap(move _9) -> [return: bb3, unwind: bb62];
    }

    bb3: {
        _16 = &_3;
        _15 = <Vec<u8> as Deref>::deref(_16) -> [return: bb4, unwind: bb62];
    }

    bb4: {
        _14 = <Cbc<Serpent, ZeroPadding> as BlockMode<Serpent, ZeroPadding>>::encrypt_vec(move _8, _15) -> [return: bb5, unwind: bb62];
    }

    bb5: {
        drop(_3) -> [return: bb6, unwind: bb7];
    }

    bb6: {
        _56 = const true;
        _3 = move _14;
        goto -> bb8;
    }

    bb7 (cleanup): {
        _56 = const true;
        _3 = move _14;
        goto -> bb62;
    }

    bb8: {
        _18 = discriminant(_4);
        switchInt(move _18) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        _23 = &_3;
        _22 = <Vec<u8> as AsRef<[u8]>>::as_ref(move _23) -> [return: bb12, unwind: bb62];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _60 = const false;
        _19 = move ((_4 as Some).0: std::string::String);
        _55 = const true;
        _17 = move _19;
        goto -> bb15;
    }

    bb12: {
        _21 = from_u8(_22) -> [return: bb13, unwind: bb62];
    }

    bb13: {
        _20 = &_21;
        _17 = <std::string::String as ToString>::to_string(move _20) -> [return: bb14, unwind: bb47];
    }

    bb14: {
        _55 = const true;
        drop(_21) -> [return: bb15, unwind: bb62];
    }

    bb15: {
        _26 = &((*_1).0: chashmap::CHashMap<std::string::String, kvstore::KvElement>);
        _27 = &_2;
        _25 = CHashMap::<std::string::String, KvElement>::get_mut::<std::string::String>(move _26, _27) -> [return: bb16, unwind: bb46];
    }

    bb16: {
        _24 = &mut _25;
        _28 = discriminant((*_24));
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb10];
    }

    bb17: {
        _56 = const false;
        _48 = move _3;
        _55 = const false;
        _49 = move _17;
        _50 = Utc::now() -> [return: bb35, unwind: bb43];
    }

    bb18: {
        _29 = &mut (((*_24) as Some).0: chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>);
        _32 = &(*_29);
        _31 = <WriteGuard<'_, std::string::String, KvElement> as Deref>::deref(move _32) -> [return: bb19, unwind: bb59];
    }

    bb19: {
        _30 = ((*_31).6: bool);
        switchInt(move _30) -> [0: bb20, otherwise: bb27];
    }

    bb20: {
        _56 = const false;
        _59 = const true;
        _33 = move _3;
        _34 = <WriteGuard<'_, std::string::String, KvElement> as DerefMut>::deref_mut(_29) -> [return: bb21, unwind: bb57];
    }

    bb21: {
        drop(((*_34).0: std::vec::Vec<u8>)) -> [return: bb22, unwind: bb23];
    }

    bb22: {
        _59 = const false;
        ((*_34).0: std::vec::Vec<u8>) = move _33;
        _59 = const false;
        _55 = const false;
        _58 = const true;
        _35 = move _17;
        _36 = <WriteGuard<'_, std::string::String, KvElement> as DerefMut>::deref_mut(_29) -> [return: bb24, unwind: bb55];
    }

    bb23 (cleanup): {
        _59 = const false;
        ((*_34).0: std::vec::Vec<u8>) = move _33;
        goto -> bb57;
    }

    bb24: {
        drop(((*_36).1: std::string::String)) -> [return: bb25, unwind: bb26];
    }

    bb25: {
        _58 = const false;
        ((*_36).1: std::string::String) = move _35;
        _58 = const false;
        goto -> bb27;
    }

    bb26 (cleanup): {
        _58 = const false;
        ((*_36).1: std::string::String) = move _35;
        goto -> bb55;
    }

    bb27: {
        _37 = Utc::now() -> [return: bb28, unwind: bb59];
    }

    bb28: {
        _38 = <WriteGuard<'_, std::string::String, KvElement> as DerefMut>::deref_mut(_29) -> [return: bb29, unwind: bb59];
    }

    bb29: {
        ((*_38).3: chrono::DateTime<chrono::Utc>) = move _37;
        _41 = &(*_29);
        _40 = <WriteGuard<'_, std::string::String, KvElement> as Deref>::deref(move _41) -> [return: bb30, unwind: bb59];
    }

    bb30: {
        _39 = ((*_40).5: i32);
        _42 = CheckedAdd(_39, const 1_i32);
        assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", move _39, const 1_i32) -> [success: bb31, unwind: bb59];
    }

    bb31: {
        _43 = <WriteGuard<'_, std::string::String, KvElement> as DerefMut>::deref_mut(_29) -> [return: bb32, unwind: bb59];
    }

    bb32: {
        ((*_43).5: i32) = move (_42.0: i32);
        _46 = &(*_29);
        _45 = <WriteGuard<'_, std::string::String, KvElement> as Deref>::deref(move _46) -> [return: bb33, unwind: bb59];
    }

    bb33: {
        _44 = <KvElement as ToOwned>::to_owned(_45) -> [return: bb34, unwind: bb59];
    }

    bb34: {
        _0 = std::option::Option::<KvElement>::Some(move _44);
        goto -> bb38;
    }

    bb35: {
        _51 = Utc::now() -> [return: bb36, unwind: bb43];
    }

    bb36: {
        _52 = Utc::now() -> [return: bb37, unwind: bb43];
    }

    bb37: {
        _47 = KvElement { data: move _48, mime_type: move _49, created_at: move _50, updated_at: move _51, expire_at: move _52, update_count: const 1_i32, locked: const false };
        _53 = &((*_1).0: chashmap::CHashMap<std::string::String, kvstore::KvElement>);
        _57 = const false;
        _54 = move _2;
        _0 = CHashMap::<std::string::String, KvElement>::insert(move _53, move _54, move _47) -> [return: bb65, unwind: bb59];
    }

    bb38: {
        switchInt(_55) -> [0: bb39, otherwise: bb51];
    }

    bb39: {
        _55 = const false;
        drop(_25) -> [return: bb40, unwind: bb62];
    }

    bb40: {
        switchInt(_56) -> [0: bb41, otherwise: bb52];
    }

    bb41: {
        switchInt(_57) -> [0: bb42, otherwise: bb53];
    }

    bb42: {
        return;
    }

    bb43 (cleanup): {
        drop(_49) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_48) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_25) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_17) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_21) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_56) -> [0: bb49, otherwise: bb63];
    }

    bb49 (cleanup): {
        switchInt(_57) -> [0: bb50, otherwise: bb64];
    }

    bb50 (cleanup): {
        resume;
    }

    bb51: {
        drop(_17) -> [return: bb39, unwind: bb45];
    }

    bb52: {
        drop(_3) -> [return: bb41, unwind: bb49];
    }

    bb53: {
        drop(_2) -> [return: bb42, unwind continue];
    }

    bb54 (cleanup): {
        drop(_35) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_58) -> [0: bb59, otherwise: bb54];
    }

    bb56 (cleanup): {
        drop(_33) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_59) -> [0: bb59, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_17) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_55) -> [0: bb45, otherwise: bb58];
    }

    bb60 (cleanup): {
        switchInt(_60) -> [0: bb48, otherwise: bb61];
    }

    bb61 (cleanup): {
        drop(((_4 as Some).0: std::string::String)) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        _61 = discriminant(_4);
        switchInt(move _61) -> [1: bb60, otherwise: bb48];
    }

    bb63 (cleanup): {
        drop(_3) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_2) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb65: {
        goto -> bb38;
    }
}

fn kvstore::<impl at src/kvstore.rs:31:1: 31:13>::get(_1: &KvStore, _2: std::string::String) -> std::option::Option<KvElement> {
    debug self => _1;
    debug key => _2;
    let mut _0: std::option::Option<kvstore::KvElement>;
    let mut _3: std::option::Option<chashmap::ReadGuard<'_, std::string::String, kvstore::KvElement>>;
    let mut _4: &chashmap::CHashMap<std::string::String, kvstore::KvElement>;
    let _5: &std::string::String;
    let mut _6: isize;
    let _7: chashmap::ReadGuard<'_, std::string::String, kvstore::KvElement>;
    let _9: &kvstore::KvElement;
    let mut _10: &chashmap::ReadGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _11: &std::option::Option<kvstore::Cipher>;
    let mut _12: isize;
    let mut _15: std::result::Result<block_modes::Cbc<serpent::Serpent, block_modes::block_padding::ZeroPadding>, block_modes::InvalidKeyIvLength>;
    let mut _16: &[u8];
    let _17: &[u8; 24];
    let mut _18: &[u8];
    let _19: &[u8; 16];
    let mut _20: std::vec::Vec<u8>;
    let mut _21: std::result::Result<std::vec::Vec<u8>, block_modes::BlockModeError>;
    let _22: &[u8];
    let _23: &std::vec::Vec<u8>;
    let _24: &kvstore::KvElement;
    let mut _25: &chashmap::ReadGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _26: kvstore::KvElement;
    scope 1 {
        debug value => _7;
        let mut _8: kvstore::KvElement;
        scope 2 {
            debug cloned_value => _8;
            scope 3 {
                debug c => _13;
                let _13: &kvstore::Cipher;
                let _14: block_modes::Cbc<serpent::Serpent, block_modes::block_padding::ZeroPadding>;
                scope 4 {
                    debug cipher => _14;
                }
            }
        }
    }

    bb0: {
        _4 = &((*_1).0: chashmap::CHashMap<std::string::String, kvstore::KvElement>);
        _5 = &_2;
        _3 = CHashMap::<std::string::String, KvElement>::get::<std::string::String>(move _4, _5) -> [return: bb1, unwind: bb20];
    }

    bb1: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _0 = std::option::Option::<KvElement>::None;
        goto -> bb22;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_3 as Some).0: chashmap::ReadGuard<'_, std::string::String, kvstore::KvElement>);
        _10 = &_7;
        _9 = <ReadGuard<'_, std::string::String, KvElement> as Deref>::deref(move _10) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _8 = <KvElement as Clone>::clone(_9) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _11 = &((*_1).1: std::option::Option<kvstore::Cipher>);
        _12 = discriminant((*_11));
        switchInt(move _12) -> [1: bb7, otherwise: bb16];
    }

    bb7: {
        _13 = &(((*_11) as Some).0: kvstore::Cipher);
        _17 = &((*_13).0: [u8; 24]);
        _16 = _17 as &[u8] (PointerCoercion(Unsize));
        _19 = &((*_13).1: [u8; 16]);
        _18 = _19 as &[u8] (PointerCoercion(Unsize));
        _15 = <Cbc<Serpent, ZeroPadding> as BlockMode<Serpent, ZeroPadding>>::new_var(move _16, move _18) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        _14 = Result::<Cbc<Serpent, ZeroPadding>, InvalidKeyIvLength>::unwrap(move _15) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _25 = &_7;
        _24 = <ReadGuard<'_, std::string::String, KvElement> as Deref>::deref(move _25) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _23 = &((*_24).0: std::vec::Vec<u8>);
        _22 = <Vec<u8> as Deref>::deref(_23) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _21 = <Cbc<Serpent, ZeroPadding> as BlockMode<Serpent, ZeroPadding>>::decrypt_vec(move _14, _22) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        _20 = Result::<Vec<u8>, BlockModeError>::unwrap(move _21) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        drop((_8.0: std::vec::Vec<u8>)) -> [return: bb14, unwind: bb15];
    }

    bb14: {
        (_8.0: std::vec::Vec<u8>) = move _20;
        goto -> bb16;
    }

    bb15 (cleanup): {
        (_8.0: std::vec::Vec<u8>) = move _20;
        goto -> bb18;
    }

    bb16: {
        _26 = move _8;
        _0 = std::option::Option::<KvElement>::Some(move _26);
        drop(_7) -> [return: bb22, unwind: bb20];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_8) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_7) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22: {
        drop(_2) -> [return: bb17, unwind continue];
    }
}

fn kvstore::<impl at src/kvstore.rs:31:1: 31:13>::switch_lock(_1: &KvStore, _2: std::string::String, _3: bool) -> bool {
    debug self => _1;
    debug key => _2;
    debug to_lock => _3;
    let mut _0: bool;
    let mut _4: &mut std::option::Option<chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>>;
    let mut _5: std::option::Option<chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>>;
    let mut _6: &chashmap::CHashMap<std::string::String, kvstore::KvElement>;
    let _7: &std::string::String;
    let mut _8: isize;
    let _9: &mut chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: &kvstore::KvElement;
    let mut _13: &chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _14: &mut kvstore::KvElement;
    scope 1 {
        debug kv_element => _9;
    }

    bb0: {
        _6 = &((*_1).0: chashmap::CHashMap<std::string::String, kvstore::KvElement>);
        _7 = &_2;
        _5 = CHashMap::<std::string::String, KvElement>::get_mut::<std::string::String>(move _6, _7) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _4 = &mut _5;
        _8 = discriminant((*_4));
        switchInt(move _8) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _0 = const false;
        goto -> bb9;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _9 = &mut (((*_4) as Some).0: chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>);
        _13 = &(*_9);
        _12 = <WriteGuard<'_, std::string::String, KvElement> as Deref>::deref(move _13) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _11 = ((*_12).6: bool);
        _10 = Eq(move _11, _3);
        switchInt(move _10) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = const false;
        drop(_5) -> [return: bb11, unwind: bb14];
    }

    bb7: {
        _14 = <WriteGuard<'_, std::string::String, KvElement> as DerefMut>::deref_mut(_9) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        ((*_14).6: bool) = _3;
        _0 = const true;
        goto -> bb9;
    }

    bb9: {
        drop(_5) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        drop(_2) -> [return: bb12, unwind continue];
    }

    bb11: {
        drop(_2) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_5) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_2) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn kvstore::<impl at src/kvstore.rs:31:1: 31:13>::increment_or_decrement(_1: &KvStore, _2: std::string::String, _3: f64) -> bool {
    debug self => _1;
    debug key => _2;
    debug value => _3;
    let mut _0: bool;
    let mut _4: &mut std::option::Option<chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>>;
    let mut _5: std::option::Option<chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>>;
    let mut _6: &chashmap::CHashMap<std::string::String, kvstore::KvElement>;
    let _7: &std::string::String;
    let mut _8: isize;
    let _9: &mut chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _11: std::result::Result<std::string::String, std::string::FromUtf8Error>;
    let mut _12: std::vec::Vec<u8>;
    let mut _13: kvstore::KvElement;
    let _14: &kvstore::KvElement;
    let mut _15: &chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _16: std::result::Result<f64, std::num::ParseFloatError>;
    let _17: &str;
    let _18: &str;
    let mut _19: &std::string::String;
    let mut _20: isize;
    let mut _22: std::vec::Vec<u8>;
    let mut _23: std::string::String;
    let mut _24: &f64;
    let _25: f64;
    let mut _26: &mut kvstore::KvElement;
    let mut _27: chrono::DateTime<chrono::Utc>;
    let mut _28: &mut kvstore::KvElement;
    let mut _29: i32;
    let mut _30: &kvstore::KvElement;
    let mut _31: &chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _32: (i32, bool);
    let mut _33: &mut kvstore::KvElement;
    let mut _34: bool;
    scope 1 {
        debug kv_element => _9;
        let _10: std::string::String;
        scope 2 {
            debug byte_to_string => _10;
            let _21: f64;
            scope 3 {
                debug initial_value => _21;
            }
        }
    }

    bb0: {
        _34 = const false;
        _6 = &((*_1).0: chashmap::CHashMap<std::string::String, kvstore::KvElement>);
        _7 = &_2;
        _5 = CHashMap::<std::string::String, KvElement>::get_mut::<std::string::String>(move _6, _7) -> [return: bb1, unwind: bb30];
    }

    bb1: {
        _4 = &mut _5;
        _8 = discriminant((*_4));
        switchInt(move _8) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _0 = const false;
        goto -> bb25;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _9 = &mut (((*_4) as Some).0: chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>);
        _15 = &(*_9);
        _14 = <WriteGuard<'_, std::string::String, KvElement> as Deref>::deref(move _15) -> [return: bb5, unwind: bb29];
    }

    bb5: {
        _13 = <KvElement as Clone>::clone(_14) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        _12 = move (_13.0: std::vec::Vec<u8>);
        _11 = std::string::String::from_utf8(move _12) -> [return: bb7, unwind: bb35];
    }

    bb7: {
        _10 = Result::<std::string::String, FromUtf8Error>::unwrap(move _11) -> [return: bb8, unwind: bb35];
    }

    bb8: {
        drop((_13.1: std::string::String)) -> [return: bb32, unwind: bb28];
    }

    bb9: {
        _17 = core::str::<impl str>::trim(_18) -> [return: bb10, unwind: bb28];
    }

    bb10: {
        _16 = core::str::<impl str>::parse::<f64>(_17) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _20 = discriminant(_16);
        switchInt(move _20) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _0 = const false;
        goto -> bb24;
    }

    bb13: {
        _21 = ((_16 as Ok).0: f64);
        _25 = Add(_21, _3);
        _24 = &_25;
        _23 = <f64 as ToString>::to_string(move _24) -> [return: bb14, unwind: bb28];
    }

    bb14: {
        _22 = std::string::String::into_bytes(move _23) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        _34 = const true;
        _26 = <WriteGuard<'_, std::string::String, KvElement> as DerefMut>::deref_mut(_9) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        drop(((*_26).0: std::vec::Vec<u8>)) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _34 = const false;
        ((*_26).0: std::vec::Vec<u8>) = move _22;
        _34 = const false;
        _27 = Utc::now() -> [return: bb19, unwind: bb28];
    }

    bb18 (cleanup): {
        _34 = const false;
        ((*_26).0: std::vec::Vec<u8>) = move _22;
        goto -> bb34;
    }

    bb19: {
        _28 = <WriteGuard<'_, std::string::String, KvElement> as DerefMut>::deref_mut(_9) -> [return: bb20, unwind: bb28];
    }

    bb20: {
        ((*_28).3: chrono::DateTime<chrono::Utc>) = move _27;
        _31 = &(*_9);
        _30 = <WriteGuard<'_, std::string::String, KvElement> as Deref>::deref(move _31) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _29 = ((*_30).5: i32);
        _32 = CheckedAdd(_29, const 1_i32);
        assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", move _29, const 1_i32) -> [success: bb22, unwind: bb28];
    }

    bb22: {
        _33 = <WriteGuard<'_, std::string::String, KvElement> as DerefMut>::deref_mut(_9) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        ((*_33).5: i32) = move (_32.0: i32);
        _0 = const true;
        goto -> bb24;
    }

    bb24: {
        drop(_10) -> [return: bb25, unwind: bb29];
    }

    bb25: {
        drop(_5) -> [return: bb26, unwind: bb30];
    }

    bb26: {
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_10) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_5) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32: {
        _19 = &_10;
        _18 = <std::string::String as Deref>::deref(move _19) -> [return: bb9, unwind: bb28];
    }

    bb33 (cleanup): {
        drop(_22) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_34) -> [0: bb28, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop((_13.1: std::string::String)) -> [return: bb29, unwind terminate(cleanup)];
    }
}

fn kvstore::<impl at src/kvstore.rs:31:1: 31:13>::set_expiration(_1: &KvStore, _2: std::string::String, _3: i64) -> std::option::Option<DateTime<Utc>> {
    debug self => _1;
    debug key => _2;
    debug ttl => _3;
    let mut _0: std::option::Option<chrono::DateTime<chrono::Utc>>;
    let mut _4: &mut std::option::Option<chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>>;
    let mut _5: std::option::Option<chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>>;
    let mut _6: &chashmap::CHashMap<std::string::String, kvstore::KvElement>;
    let _7: &std::string::String;
    let mut _8: isize;
    let _9: &mut chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _11: chrono::DateTime<chrono::Utc>;
    let mut _12: chrono::Duration;
    let mut _13: &mut kvstore::KvElement;
    let mut _14: chrono::DateTime<chrono::Utc>;
    let mut _15: &mut kvstore::KvElement;
    let mut _16: i32;
    let mut _17: &kvstore::KvElement;
    let mut _18: &chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>;
    let mut _19: (i32, bool);
    let mut _20: &mut kvstore::KvElement;
    scope 1 {
        debug kv_element => _9;
        let _10: chrono::DateTime<chrono::Utc>;
        scope 2 {
            debug expiration_date => _10;
        }
    }

    bb0: {
        _6 = &((*_1).0: chashmap::CHashMap<std::string::String, kvstore::KvElement>);
        _7 = &_2;
        _5 = CHashMap::<std::string::String, KvElement>::get_mut::<std::string::String>(move _6, _7) -> [return: bb1, unwind: bb18];
    }

    bb1: {
        _4 = &mut _5;
        _8 = discriminant((*_4));
        switchInt(move _8) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _0 = std::option::Option::<DateTime<Utc>>::None;
        goto -> bb14;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _9 = &mut (((*_4) as Some).0: chashmap::WriteGuard<'_, std::string::String, kvstore::KvElement>);
        _11 = Utc::now() -> [return: bb5, unwind: bb17];
    }

    bb5: {
        _12 = chrono::Duration::seconds(_3) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _10 = <DateTime<Utc> as Add<chrono::Duration>>::add(move _11, move _12) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _13 = <WriteGuard<'_, std::string::String, KvElement> as DerefMut>::deref_mut(_9) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        ((*_13).4: chrono::DateTime<chrono::Utc>) = _10;
        _14 = Utc::now() -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _15 = <WriteGuard<'_, std::string::String, KvElement> as DerefMut>::deref_mut(_9) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        ((*_15).3: chrono::DateTime<chrono::Utc>) = move _14;
        _18 = &(*_9);
        _17 = <WriteGuard<'_, std::string::String, KvElement> as Deref>::deref(move _18) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _16 = ((*_17).5: i32);
        _19 = CheckedAdd(_16, const 1_i32);
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _16, const 1_i32) -> [success: bb12, unwind: bb17];
    }

    bb12: {
        _20 = <WriteGuard<'_, std::string::String, KvElement> as DerefMut>::deref_mut(_9) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        ((*_20).5: i32) = move (_19.0: i32);
        _0 = std::option::Option::<DateTime<Utc>>::Some(_10);
        goto -> bb14;
    }

    bb14: {
        drop(_5) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_2) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_5) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_2) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }
}

fn kvstore::<impl at src/kvstore.rs:31:1: 31:13>::drop(_1: &KvStore, _2: std::string::String) -> () {
    debug self => _1;
    debug key => _2;
    let mut _0: ();
    let _3: std::option::Option<kvstore::KvElement>;
    let mut _4: &chashmap::CHashMap<std::string::String, kvstore::KvElement>;
    let _5: &std::string::String;

    bb0: {
        _4 = &((*_1).0: chashmap::CHashMap<std::string::String, kvstore::KvElement>);
        _5 = &_2;
        _3 = CHashMap::<std::string::String, KvElement>::remove::<std::string::String>(move _4, _5) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        drop(_3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn lucid::<impl at src/lucid.rs:10:1: 10:11>::new(_1: Configuration) -> Lucid {
    debug configuration => _1;
    let mut _0: lucid::Lucid;
    let mut _2: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _3: std::sync::RwLock<configuration::Configuration>;

    bb0: {
        _3 = std::sync::RwLock::<Configuration>::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Arc::<std::sync::RwLock<Configuration>>::new(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Lucid { configuration: move _2 };
        return;
    }
}

fn lucid::<impl at src/lucid.rs:10:1: 10:11>::run(_1: &Lucid) -> {async fn body@src/lucid.rs:17:59: 21:6} {
    debug self => _1;
    let mut _0: {async fn body@src/lucid.rs:17:59: 21:6};

    bb0: {
        _0 = {coroutine@src/lucid.rs:17:59: 21:6 (#0)} { self: _1 };
        return;
    }
}

fn lucid::<impl at src/lucid.rs:10:1: 10:11>::run::{closure#0}(_1: Pin<&mut {async fn body@src/lucid.rs:17:59: 21:6}>, _2: &mut std::task::Context<'_>) -> Poll<Result<(), std::io::Error>> {
    debug _task_context => _17;
    debug self => ((*(_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6})).0: &lucid::Lucid);
    let mut _0: std::task::Poll<std::result::Result<(), std::io::Error>>;
    let _3: &lucid::Lucid;
    let mut _4: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _5: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _6: {async fn body@src/server.rs:41:29: 109:6};
    let mut _7: {async fn body@src/server.rs:41:29: 109:6};
    let mut _8: &server::Server;
    let mut _9: std::task::Poll<()>;
    let mut _10: std::pin::Pin<&mut {async fn body@src/server.rs:41:29: 109:6}>;
    let mut _11: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _12: &mut std::task::Context<'_>;
    let mut _13: isize;
    let mut _15: ();
    let mut _16: std::result::Result<(), std::io::Error>;
    let mut _17: &mut std::task::Context<'_>;
    let mut _18: u32;
    let mut _19: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _20: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _21: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _22: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _23: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _24: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _25: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _26: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _27: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _28: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _29: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _30: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _31: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    scope 1 {
        debug self => _3;
        scope 2 {
            debug server => (((*(_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6})) as variant#3).0: server::Server);
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6})) as variant#3).1: {async fn body@src/server.rs:41:29: 109:6});
                let _14: ();
                scope 4 {
                }
                scope 5 {
                    debug result => _14;
                }
            }
        }
    }

    bb0: {
        _19 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        _18 = discriminant((*_19));
        switchInt(move _18) -> [0: bb1, 1: bb19, 2: bb18, 3: bb17, otherwise: bb10];
    }

    bb1: {
        _17 = move _2;
        _20 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        _3 = ((*_20).0: &lucid::Lucid);
        _5 = &((*_3).0: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
        _4 = <Arc<std::sync::RwLock<Configuration>> as Clone>::clone(move _5) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _21 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        (((*_21) as variant#3).0: server::Server) = server::Server::new(move _4) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        _8 = &(((*_22) as variant#3).0: server::Server);
        _7 = server::Server::run(move _8) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _6 = <{async fn body@src/server.rs:41:29: 109:6} as IntoFuture>::into_future(move _7) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        _23 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        (((*_23) as variant#3).1: {async fn body@src/server.rs:41:29: 109:6}) = move _6;
        goto -> bb6;
    }

    bb6: {
        _24 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        _11 = &mut (((*_24) as variant#3).1: {async fn body@src/server.rs:41:29: 109:6});
        _10 = Pin::<&mut {async fn body@src/server.rs:41:29: 109:6}>::new_unchecked(_11) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _12 = _17;
        _9 = <{async fn body@src/server.rs:41:29: 109:6} as Future>::poll(move _10, _12) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        _0 = Poll::<Result<(), std::io::Error>>::Pending;
        _25 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        discriminant((*_25)) = 3;
        return;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _14 = ((_9 as Ready).0: ());
        _26 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        drop((((*_26) as variant#3).1: {async fn body@src/server.rs:41:29: 109:6})) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        _15 = ();
        _16 = Result::<(), std::io::Error>::Ok(move _15);
        _27 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        drop((((*_27) as variant#3).0: server::Server)) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _0 = Poll::<Result<(), std::io::Error>>::Ready(move _16);
        _28 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        discriminant((*_28)) = 1;
        return;
    }

    bb14 (cleanup): {
        _29 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        drop((((*_29) as variant#3).1: {async fn body@src/server.rs:41:29: 109:6})) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        _30 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        drop((((*_30) as variant#3).0: server::Server)) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        _31 = deref_copy (_1.0: &mut {async fn body@src/lucid.rs:17:59: 21:6});
        discriminant((*_31)) = 2;
        resume;
    }

    bb17: {
        _17 = move _2;
        goto -> bb6;
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb18, unwind continue];
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb19, unwind continue];
    }
}

fn server::<impl at src/server.rs:21:10: 21:15>::fmt(_1: &SseMessage, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::string::String;
    let _10: &std::string::String;

    bb0: {
        _3 = const "SseMessage";
        _4 = const "key";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "value";
        _10 = &((*_1).1: std::string::String);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn server::<impl at src/server.rs:21:17: 21:22>::clone(_1: &SseMessage) -> SseMessage {
    debug self => _1;
    let mut _0: server::SseMessage;
    let mut _2: std::string::String;
    let _3: &std::string::String;
    let mut _4: std::string::String;
    let _5: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <std::string::String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::string::String);
        _4 = <std::string::String as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = SseMessage { key: move _2, value: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

const _IMPL_SERIALIZE_FOR_JsonMessage: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_SERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:10: 27:19>::serialize(_1: &JsonMessage, _2: __S) -> Result<<__S as Serializer>::Ok, <__S as Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Ok, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _3: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _4: std::result::Result<<__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct, <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _5: __S;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: (usize, bool);
    let mut _9: isize;
    let _10: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _11: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
    let mut _12: std::result::Result<(), <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error>;
    let mut _13: &mut <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let _14: &std::string::String;
    let mut _15: isize;
    let mut _17: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct;
    let mut _18: bool;
    let mut _19: bool;
    scope 1 {
        debug __serde_state => _3;
        let _16: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _16;
        }
    }
    scope 2 {
        debug __val => _10;
    }
    scope 3 {
        debug __err => _11;
    }

    bb0: {
        _18 = const false;
        _19 = const false;
        _19 = const true;
        _5 = move _2;
        _7 = const false as usize (IntToInt);
        _8 = CheckedAdd(_7, const 1_usize);
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> [success: bb1, unwind: bb16];
    }

    bb1: {
        _6 = move (_8.0: usize);
        _19 = const false;
        _4 = <__S as Serializer>::serialize_struct(move _5, const "JsonMessage", move _6) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _19 = const false;
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_4 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _11);
        goto -> bb10;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_4 as Ok).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::SerializeStruct);
        _18 = const true;
        _3 = move _10;
        _13 = &mut _3;
        _14 = &((*_1).0: std::string::String);
        _12 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_13, const "message", _14) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb8, 1: bb7, otherwise: bb4];
    }

    bb7: {
        _16 = move ((_12 as Err).0: <__S as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Serializer>::Error);
        _0 = Result::<<__S as Serializer>::Ok, <__S as Serializer>::Error>::Err(move _16);
        drop(_3) -> [return: bb10, unwind continue];
    }

    bb8: {
        _18 = const false;
        _17 = move _3;
        _0 = <<__S as Serializer>::SerializeStruct as SerializeStruct>::end(move _17) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _18 = const false;
        goto -> bb11;
    }

    bb10: {
        _18 = const false;
        goto -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_18) -> [0: bb12, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_19) -> [0: bb12, otherwise: bb15];
    }
}

const _IMPL_DESERIALIZE_FOR_JsonMessage: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize(_1: __D) -> Result<JsonMessage, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<server::JsonMessage, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Visitor<'_>>(move _1, const "JsonMessage", const _, const _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<JsonMessage>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::<impl at src/server.rs:27:21: 27:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::<impl at src/server.rs:27:21: 27:32>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field, __E>;
    let mut _3: server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field;
    let mut _4: __E;
    let mut _5: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _6: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _7: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = Unexpected::<'_>::Unsigned(_2);
        _7 = const _;
        _6 = _7 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _4 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb4;
    }

    bb3: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field, __E>::Err(move _4);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::<impl at src/server.rs:27:21: 27:32>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 1";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::<impl at src/server.rs:27:21: 27:32>::visit_str(_1: _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field;
    let mut _5: server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "message") -> [return: bb3, unwind continue];
    }

    bb1: {
        _4 = _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb4;
    }

    bb2: {
        _5 = _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb4;
    }

    bb3: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::<impl at src/server.rs:27:21: 27:32>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field;
    let mut _7: server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field;

    bb0: {
        _3 = Len((*_2));
        _4 = const 7_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [109: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [101: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [115: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [115: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [97: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [103: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [101: bb9, otherwise: bb8];
    }

    bb8: {
        _7 = _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb10;
    }

    bb9: {
        _6 = _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::<impl at src/server.rs:27:21: 27:32>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::<impl at src/server.rs:27:21: 27:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct JsonMessage";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::<impl at src/server.rs:27:21: 27:32>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Visitor<'_>, _2: __A) -> Result<JsonMessage, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<JsonMessage>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<server::JsonMessage, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<std::string::String>;
    let _7: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: std::string::String;
    let mut _10: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _12: server::JsonMessage;
    let mut _13: &&str;
    scope 1 {
        debug __field0 => _9;
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_4) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<JsonMessage, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb8;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = move ((_3 as Ok).0: std::option::Option<std::string::String>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _13 = const _;
        _11 = _13 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb10];
    }

    bb6: {
        _9 = move ((_6 as Some).0: std::string::String);
        _12 = JsonMessage { message: move _9 };
        _0 = Result::<JsonMessage, <__A as SeqAccess<'_>>::Error>::Ok(move _12);
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb7: {
        _0 = Result::<JsonMessage, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb8;
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::<impl at src/server.rs:27:21: 27:32>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct JsonMessage with 1 element";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::<impl at src/server.rs:27:21: 27:32>::visit_map(_1: _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Visitor<'_>, _2: __A) -> Result<JsonMessage, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<JsonMessage>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<server::JsonMessage, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::string::String>;
    let mut _4: std::result::Result<std::option::Option<server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let mut _9: isize;
    let mut _11: isize;
    let mut _12: bool;
    let _13: &std::option::Option<std::string::String>;
    let mut _14: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _15: std::option::Option<std::string::String>;
    let mut _16: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _17: &mut __A;
    let mut _18: isize;
    let mut _21: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _29: isize;
    let mut _32: server::JsonMessage;
    let mut _33: std::string::String;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    scope 1 {
        debug __field0 => _3;
        let _25: std::string::String;
        let _27: std::string::String;
        let _30: std::string::String;
        let _31: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
        scope 2 {
            debug __key => _10;
            let _7: std::option::Option<server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field>;
            let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _10: server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field;
            let _19: std::string::String;
            let _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            let _24: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __val => _7;
            }
            scope 4 {
                debug __err => _8;
            }
            scope 5 {
                debug __val => _19;
            }
            scope 6 {
                debug __err => _20;
            }
            scope 7 {
            }
            scope 8 {
                debug __val => const IgnoredAny;
            }
            scope 9 {
                debug __err => _24;
            }
        }
        scope 10 {
            debug __field0 => _25;
        }
        scope 11 {
            debug __field0 => _27;
        }
        scope 12 {
            debug __val => _30;
        }
        scope 13 {
            debug __err => _31;
        }
    }

    bb0: {
        _34 = const false;
        _34 = const true;
        _3 = std::option::Option::<std::string::String>::None;
        goto -> bb1;
    }

    bb1: {
        _5 = &mut _2;
        _4 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_JsonMessage::<impl Deserialize<'de> for JsonMessage>::deserialize::__Field>(_5) -> [return: bb2, unwind: bb36];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<JsonMessage, <__A as MapAccess<'_>>::Error>::Err(move _8);
        goto -> bb33;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Ok).0: std::option::Option<server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = discriminant(_3);
        switchInt(move _26) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb7: {
        _10 = move ((_7 as Some).0: server::_IMPL_DESERIALIZE_FOR_JsonMessage::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::JsonMessage>::deserialize::__Field);
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = &mut _2;
        _21 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_22) -> [return: bb19, unwind: bb36];
    }

    bb9: {
        _13 = &_3;
        _12 = std::option::Option::<std::string::String>::is_some(_13) -> [return: bb10, unwind: bb36];
    }

    bb10: {
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _14 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "message") -> [return: bb12, unwind: bb36];
    }

    bb12: {
        _0 = Result::<JsonMessage, <__A as MapAccess<'_>>::Error>::Err(move _14);
        goto -> bb33;
    }

    bb13: {
        _17 = &mut _2;
        _16 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_17) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _20 = move ((_16 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<JsonMessage, <__A as MapAccess<'_>>::Error>::Err(move _20);
        goto -> bb33;
    }

    bb16: {
        _19 = move ((_16 as Ok).0: std::string::String);
        _15 = std::option::Option::<std::string::String>::Some(move _19);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _34 = const true;
        _3 = move _15;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _34 = const true;
        _3 = move _15;
        goto -> bb36;
    }

    bb19: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb1, 1: bb20, otherwise: bb4];
    }

    bb20: {
        _24 = move ((_21 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<JsonMessage, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb33;
    }

    bb21: {
        _28 = _IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "message") -> [return: bb23, unwind: bb36];
    }

    bb22: {
        _34 = const false;
        _27 = move ((_3 as Some).0: std::string::String);
        _25 = move _27;
        goto -> bb26;
    }

    bb23: {
        _29 = discriminant(_28);
        switchInt(move _29) -> [0: bb25, 1: bb24, otherwise: bb4];
    }

    bb24: {
        _31 = move ((_28 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<JsonMessage, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb33;
    }

    bb25: {
        _30 = move ((_28 as Ok).0: std::string::String);
        _25 = move _30;
        goto -> bb26;
    }

    bb26: {
        _33 = move _25;
        _32 = JsonMessage { message: move _33 };
        _0 = Result::<JsonMessage, <__A as MapAccess<'_>>::Error>::Ok(move _32);
        _34 = const false;
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30: {
        _34 = const false;
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb31: {
        switchInt(_34) -> [0: bb30, otherwise: bb32];
    }

    bb32: {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb30, unwind: bb28];
    }

    bb33: {
        _35 = discriminant(_3);
        switchInt(move _35) -> [1: bb31, otherwise: bb30];
    }

    bb34 (cleanup): {
        switchInt(_34) -> [0: bb28, otherwise: bb35];
    }

    bb35 (cleanup): {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        _36 = discriminant(_3);
        switchInt(move _36) -> [1: bb34, otherwise: bb28];
    }
}

const _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 1];
    let _2: &[&str; 1];
    let _3: [&str; 1];
    let mut _4: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_JsonMessage::<impl at src/server.rs:27:21: 27:32>::deserialize::FIELDS: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "message"];
        _0 = &_1;
        return;
    }
}

fn server::<impl at src/server.rs:36:1: 36:12>::new(_1: Arc<std::sync::RwLock<Configuration>>) -> server::Server {
    debug configuration => _1;
    let mut _0: server::Server;

    bb0: {
        _0 = server::Server { configuration: move _1 };
        return;
    }
}

fn server::<impl at src/server.rs:36:1: 36:12>::run(_1: &server::Server) -> {async fn body@src/server.rs:41:29: 109:6} {
    debug self => _1;
    let mut _0: {async fn body@src/server.rs:41:29: 109:6};

    bb0: {
        _0 = {coroutine@src/server.rs:41:29: 109:6 (#0)} { self: _1 };
        return;
    }
}

fn server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}(_1: Pin<&mut {async fn body@src/server.rs:41:29: 109:6}>, _2: &mut std::task::Context<'_>) -> Poll<()> {
    debug _task_context => _262;
    debug self => ((*(_1.0: &mut {async fn body@src/server.rs:41:29: 109:6})).0: &server::Server);
    let mut _0: std::task::Poll<()>;
    let _3: &server::Server;
    let mut _4: std::result::Result<std::sync::RwLockReadGuard<'_, configuration::Configuration>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, configuration::Configuration>>>;
    let _5: &std::sync::RwLock<configuration::Configuration>;
    let mut _6: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _8: bool;
    let mut _9: &configuration::Configuration;
    let mut _10: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _11: bool;
    let mut _12: &std::string::String;
    let _13: &configuration::Configuration;
    let mut _14: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let _15: !;
    let mut _16: bool;
    let mut _17: &std::string::String;
    let _18: &configuration::Configuration;
    let mut _19: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let _20: !;
    let mut _21: std::option::Option<[&str; 2]>;
    let mut _22: [&str; 2];
    let mut _23: &str;
    let mut _24: &std::string::String;
    let _25: &configuration::Configuration;
    let mut _26: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: &configuration::Configuration;
    let mut _30: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _32: kvstore::KvStore;
    let mut _33: std::option::Option<[&str; 2]>;
    let mut _35: tokio::sync::broadcast::Sender<server::SseMessage>;
    let mut _36: (tokio::sync::broadcast::Sender<server::SseMessage>, tokio::sync::broadcast::Receiver<server::SseMessage>);
    let mut _38: warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>;
    let mut _39: std::sync::Arc<kvstore::KvStore>;
    let mut _40: std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>;
    let mut _41: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _42: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _43: bool;
    let mut _44: &configuration::Configuration;
    let mut _45: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _46: (std::net::IpAddr, u16);
    let mut _47: std::net::IpAddr;
    let mut _48: &configuration::Configuration;
    let mut _49: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _50: u16;
    let mut _51: &configuration::Configuration;
    let mut _52: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _54: bool;
    let mut _55: &log::Level;
    let mut _56: bool;
    let mut _57: &log::Level;
    let mut _58: &log::LevelFilter;
    let _59: log::LevelFilter;
    let _60: ();
    let mut _61: std::fmt::Arguments<'_>;
    let mut _62: &[&str];
    let mut _63: &[core::fmt::rt::Argument<'_>];
    let _64: &[core::fmt::rt::Argument<'_>; 2];
    let _65: [core::fmt::rt::Argument<'_>; 2];
    let mut _66: core::fmt::rt::Argument<'_>;
    let _67: &std::net::SocketAddr;
    let mut _68: core::fmt::rt::Argument<'_>;
    let _69: &u32;
    let _70: u32;
    let mut _71: log::Level;
    let mut _73: bool;
    let mut _74: &log::Level;
    let mut _75: bool;
    let mut _76: &log::Level;
    let mut _77: &log::LevelFilter;
    let _78: log::LevelFilter;
    let _79: ();
    let mut _80: std::fmt::Arguments<'_>;
    let mut _81: &[&str];
    let mut _82: &[core::fmt::rt::Argument<'_>];
    let _83: &[core::fmt::rt::Argument<'_>; 1];
    let _84: [core::fmt::rt::Argument<'_>; 1];
    let mut _85: core::fmt::rt::Argument<'_>;
    let _86: &std::net::SocketAddr;
    let mut _87: log::Level;
    let mut _89: bool;
    let mut _90: &log::Level;
    let mut _91: bool;
    let mut _92: &log::Level;
    let mut _93: &log::LevelFilter;
    let _94: log::LevelFilter;
    let _95: ();
    let mut _96: std::fmt::Arguments<'_>;
    let mut _97: &[&str];
    let mut _98: &[core::fmt::rt::Argument<'_>];
    let _99: &[core::fmt::rt::Argument<'_>; 1];
    let _100: [core::fmt::rt::Argument<'_>; 1];
    let mut _101: core::fmt::rt::Argument<'_>;
    let _102: &&std::string::String;
    let _103: &std::string::String;
    let _104: &configuration::Configuration;
    let mut _105: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _106: log::Level;
    let mut _108: bool;
    let mut _109: &log::Level;
    let mut _110: bool;
    let mut _111: &log::Level;
    let mut _112: &log::LevelFilter;
    let _113: log::LevelFilter;
    let _114: ();
    let mut _115: std::fmt::Arguments<'_>;
    let mut _116: &[&str];
    let mut _117: &[core::fmt::rt::Argument<'_>];
    let _118: &[core::fmt::rt::Argument<'_>; 1];
    let _119: [core::fmt::rt::Argument<'_>; 1];
    let mut _120: core::fmt::rt::Argument<'_>;
    let _121: &&std::string::String;
    let _122: &std::string::String;
    let _123: &configuration::Configuration;
    let mut _124: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _125: log::Level;
    let mut _127: bool;
    let mut _128: &log::Level;
    let mut _129: bool;
    let mut _130: &log::Level;
    let mut _131: &log::LevelFilter;
    let _132: log::LevelFilter;
    let _133: ();
    let mut _134: std::fmt::Arguments<'_>;
    let mut _135: &[&str];
    let mut _136: log::Level;
    let mut _137: {async fn body@warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind<(std::net::IpAddr, u16)>::{closure#0}};
    let mut _138: {async fn body@warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind<(std::net::IpAddr, u16)>::{closure#0}};
    let mut _139: warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>;
    let mut _140: warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>;
    let mut _141: warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>;
    let mut _142: warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>;
    let mut _143: &std::string::String;
    let _144: &configuration::Configuration;
    let mut _145: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _146: &std::string::String;
    let _147: &configuration::Configuration;
    let mut _148: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _149: (std::net::IpAddr, u16);
    let mut _150: std::net::IpAddr;
    let mut _151: &configuration::Configuration;
    let mut _152: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _153: u16;
    let mut _154: &configuration::Configuration;
    let mut _155: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _156: std::task::Poll<()>;
    let mut _157: std::pin::Pin<&mut {async fn body@warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind<(std::net::IpAddr, u16)>::{closure#0}}>;
    let mut _158: &mut {async fn body@warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind<(std::net::IpAddr, u16)>::{closure#0}};
    let mut _159: &mut std::task::Context<'_>;
    let mut _160: isize;
    let mut _162: (std::net::IpAddr, u16);
    let mut _163: std::net::IpAddr;
    let mut _164: &configuration::Configuration;
    let mut _165: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _166: u16;
    let mut _167: &configuration::Configuration;
    let mut _168: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _170: bool;
    let mut _171: &log::Level;
    let mut _172: bool;
    let mut _173: &log::Level;
    let mut _174: &log::LevelFilter;
    let _175: log::LevelFilter;
    let _176: ();
    let mut _177: std::fmt::Arguments<'_>;
    let mut _178: &[&str];
    let mut _179: &[core::fmt::rt::Argument<'_>];
    let _180: &[core::fmt::rt::Argument<'_>; 2];
    let _181: [core::fmt::rt::Argument<'_>; 2];
    let mut _182: core::fmt::rt::Argument<'_>;
    let _183: &std::net::SocketAddr;
    let mut _184: core::fmt::rt::Argument<'_>;
    let _185: &u32;
    let _186: u32;
    let mut _187: log::Level;
    let mut _189: bool;
    let mut _190: &log::Level;
    let mut _191: bool;
    let mut _192: &log::Level;
    let mut _193: &log::LevelFilter;
    let _194: log::LevelFilter;
    let _195: ();
    let mut _196: std::fmt::Arguments<'_>;
    let mut _197: &[&str];
    let mut _198: &[core::fmt::rt::Argument<'_>];
    let _199: &[core::fmt::rt::Argument<'_>; 1];
    let _200: [core::fmt::rt::Argument<'_>; 1];
    let mut _201: core::fmt::rt::Argument<'_>;
    let _202: &std::net::SocketAddr;
    let mut _203: log::Level;
    let mut _205: bool;
    let mut _206: &log::Level;
    let mut _207: bool;
    let mut _208: &log::Level;
    let mut _209: &log::LevelFilter;
    let _210: log::LevelFilter;
    let _211: ();
    let mut _212: std::fmt::Arguments<'_>;
    let mut _213: &[&str];
    let mut _214: log::Level;
    let mut _215: futures_util::future::future::map::Map<warp::hyper::Server<warp::hyper::server::conn::AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#0}}>;
    let mut _216: futures_util::future::future::map::Map<warp::hyper::Server<warp::hyper::server::conn::AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#0}}>;
    let mut _217: warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>;
    let mut _218: (std::net::IpAddr, u16);
    let mut _219: std::net::IpAddr;
    let mut _220: &configuration::Configuration;
    let mut _221: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _222: u16;
    let mut _223: &configuration::Configuration;
    let mut _224: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _225: std::task::Poll<()>;
    let mut _226: std::pin::Pin<&mut futures_util::future::future::map::Map<warp::hyper::Server<warp::hyper::server::conn::AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#0}}>>;
    let mut _227: &mut futures_util::future::future::map::Map<warp::hyper::Server<warp::hyper::server::conn::AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#0}}>;
    let mut _228: &mut std::task::Context<'_>;
    let mut _229: isize;
    let mut _255: bool;
    let mut _256: bool;
    let mut _257: bool;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: bool;
    let mut _261: ();
    let mut _262: &mut std::task::Context<'_>;
    let mut _263: u32;
    let mut _264: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _265: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _266: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _267: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _268: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _269: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _270: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _271: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _272: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _273: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _274: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _275: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _276: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _277: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _278: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _279: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _280: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _281: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _282: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _283: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _284: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _285: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _286: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _287: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _288: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _289: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _290: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _291: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _292: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _293: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _294: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _295: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _296: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _297: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _298: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _299: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _300: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _301: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _302: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _303: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _304: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _305: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _306: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _307: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _308: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _309: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _310: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _311: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _312: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _313: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _314: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _315: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _316: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _317: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _318: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _319: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _320: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _321: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _322: &mut {async fn body@src/server.rs:41:29: 109:6};
    let mut _323: &mut {async fn body@src/server.rs:41:29: 109:6};
    scope 1 {
        debug self => _3;
        scope 2 {
            debug configuration => (((*(_1.0: &mut {async fn body@src/server.rs:41:29: 109:6})) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
            let mut _7: std::option::Option<[&str; 2]>;
            scope 3 {
                debug encryption_key => _7;
                let _31: std::sync::Arc<kvstore::KvStore>;
                scope 4 {
                    debug store => _31;
                    let _34: std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>;
                    scope 5 {
                        debug event_tx => _34;
                        let _37: warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>;
                        scope 6 {
                            debug instance => _37;
                            scope 7 {
                                debug bind_endpoint => (((*(_1.0: &mut {async fn body@src/server.rs:41:29: 109:6})) as variant#3).1: std::net::SocketAddr);
                                let _53: log::Level;
                                let _72: log::Level;
                                let _88: log::Level;
                                let _107: log::Level;
                                let _126: log::Level;
                                scope 8 {
                                    debug lvl => _53;
                                    let mut _243: &(&str, &str, &str, u32);
                                    let mut _244: &[&str; 2];
                                    let mut _245: &log::LevelFilter;
                                }
                                scope 9 {
                                    debug lvl => _72;
                                    let mut _240: &(&str, &str, &str, u32);
                                    let mut _241: &[&str; 2];
                                    let mut _242: &log::LevelFilter;
                                }
                                scope 10 {
                                    debug lvl => _88;
                                    let mut _237: &(&str, &str, &str, u32);
                                    let mut _238: &[&str; 1];
                                    let mut _239: &log::LevelFilter;
                                }
                                scope 11 {
                                    debug lvl => _107;
                                    let mut _234: &(&str, &str, &str, u32);
                                    let mut _235: &[&str; 1];
                                    let mut _236: &log::LevelFilter;
                                }
                                scope 12 {
                                    debug lvl => _126;
                                    let mut _231: &(&str, &str, &str, u32);
                                    let mut _232: &[&str; 1];
                                    let mut _233: &log::LevelFilter;
                                }
                                scope 13 {
                                    debug __awaitee => (((*(_1.0: &mut {async fn body@src/server.rs:41:29: 109:6})) as variant#3).2: {async fn body@warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind<(std::net::IpAddr, u16)>::{closure#0}});
                                    let _161: ();
                                    scope 14 {
                                    }
                                    scope 15 {
                                        debug result => _161;
                                    }
                                }
                            }
                            scope 16 {
                                debug bind_endpoint => (((*(_1.0: &mut {async fn body@src/server.rs:41:29: 109:6})) as variant#4).1: std::net::SocketAddr);
                                let _169: log::Level;
                                let _188: log::Level;
                                let _204: log::Level;
                                scope 17 {
                                    debug lvl => _169;
                                    let mut _252: &(&str, &str, &str, u32);
                                    let mut _253: &[&str; 2];
                                    let mut _254: &log::LevelFilter;
                                }
                                scope 18 {
                                    debug lvl => _188;
                                    let mut _249: &(&str, &str, &str, u32);
                                    let mut _250: &[&str; 2];
                                    let mut _251: &log::LevelFilter;
                                }
                                scope 19 {
                                    debug lvl => _204;
                                    let mut _246: &(&str, &str, &str, u32);
                                    let mut _247: &[&str; 1];
                                    let mut _248: &log::LevelFilter;
                                }
                                scope 20 {
                                    debug __awaitee => (((*(_1.0: &mut {async fn body@src/server.rs:41:29: 109:6})) as variant#4).2: futures_util::future::future::map::Map<warp::hyper::Server<warp::hyper::server::conn::AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#0}}>);
                                    let _230: ();
                                    scope 21 {
                                    }
                                    scope 22 {
                                        debug result => _230;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _264 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _263 = discriminant((*_264));
        switchInt(move _263) -> [0: bb1, 1: bb171, 2: bb170, 3: bb168, 4: bb169, otherwise: bb88];
    }

    bb1: {
        _262 = move _2;
        _265 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_265) as variant#3).5: bool) = const false;
        _266 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_266) as variant#3).4: bool) = const false;
        _267 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_267) as variant#3).3: bool) = const false;
        _260 = const false;
        _259 = const false;
        _256 = const false;
        _257 = const false;
        _258 = const false;
        _255 = const false;
        _268 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _3 = ((*_268).0: &server::Server);
        _6 = &((*_3).0: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
        _5 = <Arc<std::sync::RwLock<Configuration>> as Deref>::deref(move _6) -> [return: bb2, unwind: bb156];
    }

    bb2: {
        _4 = std::sync::RwLock::<Configuration>::read(_5) -> [return: bb3, unwind: bb156];
    }

    bb3: {
        _269 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_269) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>) = Result::<std::sync::RwLockReadGuard<'_, Configuration>, PoisonError<std::sync::RwLockReadGuard<'_, Configuration>>>::unwrap(move _4) -> [return: bb4, unwind: bb156];
    }

    bb4: {
        _7 = std::option::Option::<[&str; 2]>::None;
        _270 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _10 = &(((*_270) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _9 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _10) -> [return: bb5, unwind: bb155];
    }

    bb5: {
        _8 = (((*_9).3: configuration::Encryption).0: bool);
        switchInt(move _8) -> [0: bb19, otherwise: bb6];
    }

    bb6: {
        _271 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _14 = &(((*_271) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _13 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _14) -> [return: bb7, unwind: bb155];
    }

    bb7: {
        _12 = &(((*_13).3: configuration::Encryption).1: std::string::String);
        _11 = std::string::String::is_empty(move _12) -> [return: bb8, unwind: bb155];
    }

    bb8: {
        switchInt(move _11) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _15 = begin_panic::<&str>(const "The private key must be filled.") -> bb155;
    }

    bb10: {
        _272 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _19 = &(((*_272) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _18 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _19) -> [return: bb11, unwind: bb155];
    }

    bb11: {
        _17 = &(((*_18).3: configuration::Encryption).2: std::string::String);
        _16 = std::string::String::is_empty(move _17) -> [return: bb12, unwind: bb155];
    }

    bb12: {
        switchInt(move _16) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _20 = begin_panic::<&str>(const "The initialization vector must be filled.") -> bb155;
    }

    bb14: {
        _273 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _26 = &(((*_273) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _25 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _26) -> [return: bb15, unwind: bb155];
    }

    bb15: {
        _24 = &(((*_25).3: configuration::Encryption).1: std::string::String);
        _23 = std::string::String::as_str(move _24) -> [return: bb16, unwind: bb155];
    }

    bb16: {
        _274 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _30 = &(((*_274) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _29 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _30) -> [return: bb17, unwind: bb155];
    }

    bb17: {
        _28 = &(((*_29).3: configuration::Encryption).2: std::string::String);
        _27 = std::string::String::as_str(move _28) -> [return: bb18, unwind: bb155];
    }

    bb18: {
        _22 = [move _23, _27];
        _21 = std::option::Option::<[&str; 2]>::Some(move _22);
        _7 = move _21;
        goto -> bb19;
    }

    bb19: {
        _33 = _7;
        _32 = KvStore::new(move _33) -> [return: bb20, unwind: bb154];
    }

    bb20: {
        _31 = Arc::<KvStore>::new(move _32) -> [return: bb21, unwind: bb154];
    }

    bb21: {
        _275 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_275) as variant#3).5: bool) = const true;
        _36 = tokio::sync::broadcast::channel::<SseMessage>(const 512_usize) -> [return: bb22, unwind: bb153];
    }

    bb22: {
        _35 = move (_36.0: tokio::sync::broadcast::Sender<server::SseMessage>);
        _34 = Arc::<tokio::sync::broadcast::Sender<SseMessage>>::new(move _35) -> [return: bb23, unwind: bb152];
    }

    bb23: {
        _276 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_276) as variant#3).4: bool) = const true;
        drop((_36.1: tokio::sync::broadcast::Receiver<server::SseMessage>)) -> [return: bb157, unwind: bb166];
    }

    bb24: {
        _260 = const false;
        _259 = const false;
        _38 = routes_filter(move _39, move _40, move _41) -> [return: bb25, unwind: bb148];
    }

    bb25: {
        _259 = const false;
        _260 = const false;
        _37 = serve::<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>(move _38) -> [return: bb26, unwind: bb151];
    }

    bb26: {
        _279 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_279) as variant#3).3: bool) = const true;
        _280 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _45 = &(((*_280) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _44 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _45) -> [return: bb27, unwind: bb147];
    }

    bb27: {
        _43 = (((*_44).0: configuration::General).3: bool);
        switchInt(move _43) -> [0: bb91, otherwise: bb28];
    }

    bb28: {
        _281 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _49 = &(((*_281) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _48 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _49) -> [return: bb29, unwind: bb147];
    }

    bb29: {
        _47 = (((*_48).0: configuration::General).0: std::net::IpAddr);
        _282 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _52 = &(((*_282) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _51 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _52) -> [return: bb30, unwind: bb147];
    }

    bb30: {
        _50 = (((*_51).0: configuration::General).2: u16);
        _46 = (move _47, move _50);
        _283 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_283) as variant#3).1: std::net::SocketAddr) = <std::net::SocketAddr as From<(IpAddr, u16)>>::from(move _46) -> [return: bb31, unwind: bb147];
    }

    bb31: {
        _53 = log::Level::Info;
        _55 = &_53;
        _245 = const _;
        _54 = <Level as PartialOrd<LevelFilter>>::le(move _55, _245) -> [return: bb32, unwind: bb147];
    }

    bb32: {
        switchInt(move _54) -> [0: bb41, otherwise: bb33];
    }

    bb33: {
        _57 = &_53;
        _59 = max_level() -> [return: bb34, unwind: bb147];
    }

    bb34: {
        _58 = &_59;
        _56 = <Level as PartialOrd<LevelFilter>>::le(move _57, move _58) -> [return: bb35, unwind: bb147];
    }

    bb35: {
        switchInt(move _56) -> [0: bb41, otherwise: bb36];
    }

    bb36: {
        _244 = const _;
        _62 = _244 as &[&str] (PointerCoercion(Unsize));
        _284 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _67 = &(((*_284) as variant#3).1: std::net::SocketAddr);
        _66 = core::fmt::rt::Argument::<'_>::new_display::<std::net::SocketAddr>(_67) -> [return: bb37, unwind: bb147];
    }

    bb37: {
        _70 = std::process::id() -> [return: bb38, unwind: bb147];
    }

    bb38: {
        _69 = &_70;
        _68 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_69) -> [return: bb39, unwind: bb147];
    }

    bb39: {
        _65 = [move _66, move _68];
        _64 = &_65;
        _63 = _64 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _61 = Arguments::<'_>::new_v1(move _62, move _63) -> [return: bb40, unwind: bb147];
    }

    bb40: {
        _71 = _53;
        _243 = const _;
        _60 = __private_api_log(move _61, move _71, _243) -> [return: bb172, unwind: bb147];
    }

    bb41: {
        _72 = log::Level::Info;
        _74 = &_72;
        _242 = const _;
        _73 = <Level as PartialOrd<LevelFilter>>::le(move _74, _242) -> [return: bb42, unwind: bb147];
    }

    bb42: {
        switchInt(move _73) -> [0: bb49, otherwise: bb43];
    }

    bb43: {
        _76 = &_72;
        _78 = max_level() -> [return: bb44, unwind: bb147];
    }

    bb44: {
        _77 = &_78;
        _75 = <Level as PartialOrd<LevelFilter>>::le(move _76, move _77) -> [return: bb45, unwind: bb147];
    }

    bb45: {
        switchInt(move _75) -> [0: bb49, otherwise: bb46];
    }

    bb46: {
        _241 = const _;
        _81 = _241 as &[&str] (PointerCoercion(Unsize));
        _285 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _86 = &(((*_285) as variant#3).1: std::net::SocketAddr);
        _85 = core::fmt::rt::Argument::<'_>::new_display::<std::net::SocketAddr>(_86) -> [return: bb47, unwind: bb147];
    }

    bb47: {
        _84 = [move _85];
        _83 = &_84;
        _82 = _83 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _80 = Arguments::<'_>::new_v1(move _81, move _82) -> [return: bb48, unwind: bb147];
    }

    bb48: {
        _87 = _72;
        _240 = const _;
        _79 = __private_api_log(move _80, move _87, _240) -> [return: bb173, unwind: bb147];
    }

    bb49: {
        _88 = log::Level::Info;
        _90 = &_88;
        _239 = const _;
        _89 = <Level as PartialOrd<LevelFilter>>::le(move _90, _239) -> [return: bb50, unwind: bb147];
    }

    bb50: {
        switchInt(move _89) -> [0: bb58, otherwise: bb51];
    }

    bb51: {
        _92 = &_88;
        _94 = max_level() -> [return: bb52, unwind: bb147];
    }

    bb52: {
        _93 = &_94;
        _91 = <Level as PartialOrd<LevelFilter>>::le(move _92, move _93) -> [return: bb53, unwind: bb147];
    }

    bb53: {
        switchInt(move _91) -> [0: bb58, otherwise: bb54];
    }

    bb54: {
        _238 = const _;
        _97 = _238 as &[&str] (PointerCoercion(Unsize));
        _286 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _105 = &(((*_286) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _104 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _105) -> [return: bb55, unwind: bb147];
    }

    bb55: {
        _103 = &(((*_104).0: configuration::General).4: std::string::String);
        _102 = &_103;
        _101 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_102) -> [return: bb56, unwind: bb147];
    }

    bb56: {
        _100 = [move _101];
        _99 = &_100;
        _98 = _99 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _96 = Arguments::<'_>::new_v1(move _97, move _98) -> [return: bb57, unwind: bb147];
    }

    bb57: {
        _106 = _88;
        _237 = const _;
        _95 = __private_api_log(move _96, move _106, _237) -> [return: bb174, unwind: bb147];
    }

    bb58: {
        _107 = log::Level::Info;
        _109 = &_107;
        _236 = const _;
        _108 = <Level as PartialOrd<LevelFilter>>::le(move _109, _236) -> [return: bb59, unwind: bb147];
    }

    bb59: {
        switchInt(move _108) -> [0: bb67, otherwise: bb60];
    }

    bb60: {
        _111 = &_107;
        _113 = max_level() -> [return: bb61, unwind: bb147];
    }

    bb61: {
        _112 = &_113;
        _110 = <Level as PartialOrd<LevelFilter>>::le(move _111, move _112) -> [return: bb62, unwind: bb147];
    }

    bb62: {
        switchInt(move _110) -> [0: bb67, otherwise: bb63];
    }

    bb63: {
        _235 = const _;
        _116 = _235 as &[&str] (PointerCoercion(Unsize));
        _287 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _124 = &(((*_287) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _123 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _124) -> [return: bb64, unwind: bb147];
    }

    bb64: {
        _122 = &(((*_123).0: configuration::General).5: std::string::String);
        _121 = &_122;
        _120 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_121) -> [return: bb65, unwind: bb147];
    }

    bb65: {
        _119 = [move _120];
        _118 = &_119;
        _117 = _118 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _115 = Arguments::<'_>::new_v1(move _116, move _117) -> [return: bb66, unwind: bb147];
    }

    bb66: {
        _125 = _107;
        _234 = const _;
        _114 = __private_api_log(move _115, move _125, _234) -> [return: bb175, unwind: bb147];
    }

    bb67: {
        _126 = log::Level::Info;
        _128 = &_126;
        _233 = const _;
        _127 = <Level as PartialOrd<LevelFilter>>::le(move _128, _233) -> [return: bb68, unwind: bb147];
    }

    bb68: {
        switchInt(move _127) -> [0: bb74, otherwise: bb69];
    }

    bb69: {
        _130 = &_126;
        _132 = max_level() -> [return: bb70, unwind: bb147];
    }

    bb70: {
        _131 = &_132;
        _129 = <Level as PartialOrd<LevelFilter>>::le(move _130, move _131) -> [return: bb71, unwind: bb147];
    }

    bb71: {
        switchInt(move _129) -> [0: bb74, otherwise: bb72];
    }

    bb72: {
        _232 = const _;
        _135 = _232 as &[&str] (PointerCoercion(Unsize));
        _134 = Arguments::<'_>::new_const(move _135) -> [return: bb73, unwind: bb147];
    }

    bb73: {
        _136 = _126;
        _231 = const _;
        _133 = __private_api_log(move _134, move _136, _231) -> [return: bb176, unwind: bb147];
    }

    bb74: {
        _288 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_288) as variant#3).3: bool) = const false;
        _142 = move _37;
        _141 = warp::Server::<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::tls(move _142) -> [return: bb75, unwind: bb146];
    }

    bb75: {
        _258 = const true;
        _289 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _145 = &(((*_289) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _144 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _145) -> [return: bb76, unwind: bb144];
    }

    bb76: {
        _143 = &(((*_144).0: configuration::General).4: std::string::String);
        _258 = const false;
        _140 = TlsServer::<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::cert_path::<&std::string::String>(move _141, move _143) -> [return: bb77, unwind: bb144];
    }

    bb77: {
        _257 = const true;
        _258 = const false;
        _290 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _148 = &(((*_290) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _147 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _148) -> [return: bb78, unwind: bb142];
    }

    bb78: {
        _146 = &(((*_147).0: configuration::General).5: std::string::String);
        _257 = const false;
        _139 = TlsServer::<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::key_path::<&std::string::String>(move _140, move _146) -> [return: bb79, unwind: bb142];
    }

    bb79: {
        _256 = const true;
        _257 = const false;
        _291 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _152 = &(((*_291) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _151 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _152) -> [return: bb80, unwind: bb140];
    }

    bb80: {
        _150 = (((*_151).0: configuration::General).0: std::net::IpAddr);
        _292 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _155 = &(((*_292) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _154 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _155) -> [return: bb81, unwind: bb138];
    }

    bb81: {
        _153 = (((*_154).0: configuration::General).2: u16);
        _149 = (move _150, move _153);
        _256 = const false;
        _138 = TlsServer::<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::bind::<(IpAddr, u16)>(move _139, move _149) -> [return: bb82, unwind: bb138];
    }

    bb82: {
        _256 = const false;
        _137 = <{async fn body@TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::bind<(IpAddr, u16)>::{closure#0}} as IntoFuture>::into_future(move _138) -> [return: bb83, unwind: bb147];
    }

    bb83: {
        _293 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_293) as variant#3).2: {async fn body@warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind<(std::net::IpAddr, u16)>::{closure#0}}) = move _137;
        goto -> bb84;
    }

    bb84: {
        _294 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _158 = &mut (((*_294) as variant#3).2: {async fn body@warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind<(std::net::IpAddr, u16)>::{closure#0}});
        _157 = Pin::<&mut {async fn body@TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::bind<(IpAddr, u16)>::{closure#0}}>::new_unchecked(_158) -> [return: bb85, unwind: bb137];
    }

    bb85: {
        _159 = _262;
        _156 = <{async fn body@TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::bind<(IpAddr, u16)>::{closure#0}} as Future>::poll(move _157, _159) -> [return: bb86, unwind: bb137];
    }

    bb86: {
        _160 = discriminant(_156);
        switchInt(move _160) -> [0: bb89, 1: bb87, otherwise: bb88];
    }

    bb87: {
        _0 = Poll::<()>::Pending;
        _295 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        discriminant((*_295)) = 3;
        return;
    }

    bb88: {
        unreachable;
    }

    bb89: {
        _161 = ((_156 as Ready).0: ());
        _296 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        drop((((*_296) as variant#3).2: {async fn body@warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind<(std::net::IpAddr, u16)>::{closure#0}})) -> [return: bb90, unwind: bb147];
    }

    bb90: {
        _261 = const ();
        goto -> bb130;
    }

    bb91: {
        _297 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _165 = &(((*_297) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _164 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _165) -> [return: bb92, unwind: bb147];
    }

    bb92: {
        _163 = (((*_164).0: configuration::General).0: std::net::IpAddr);
        _298 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _168 = &(((*_298) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _167 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _168) -> [return: bb93, unwind: bb147];
    }

    bb93: {
        _166 = (((*_167).0: configuration::General).1: u16);
        _162 = (move _163, move _166);
        _299 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_299) as variant#4).1: std::net::SocketAddr) = <std::net::SocketAddr as From<(IpAddr, u16)>>::from(move _162) -> [return: bb94, unwind: bb147];
    }

    bb94: {
        _169 = log::Level::Info;
        _171 = &_169;
        _254 = const _;
        _170 = <Level as PartialOrd<LevelFilter>>::le(move _171, _254) -> [return: bb95, unwind: bb147];
    }

    bb95: {
        switchInt(move _170) -> [0: bb104, otherwise: bb96];
    }

    bb96: {
        _173 = &_169;
        _175 = max_level() -> [return: bb97, unwind: bb147];
    }

    bb97: {
        _174 = &_175;
        _172 = <Level as PartialOrd<LevelFilter>>::le(move _173, move _174) -> [return: bb98, unwind: bb147];
    }

    bb98: {
        switchInt(move _172) -> [0: bb104, otherwise: bb99];
    }

    bb99: {
        _253 = const _;
        _178 = _253 as &[&str] (PointerCoercion(Unsize));
        _300 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _183 = &(((*_300) as variant#4).1: std::net::SocketAddr);
        _182 = core::fmt::rt::Argument::<'_>::new_display::<std::net::SocketAddr>(_183) -> [return: bb100, unwind: bb147];
    }

    bb100: {
        _186 = std::process::id() -> [return: bb101, unwind: bb147];
    }

    bb101: {
        _185 = &_186;
        _184 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_185) -> [return: bb102, unwind: bb147];
    }

    bb102: {
        _181 = [move _182, move _184];
        _180 = &_181;
        _179 = _180 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _177 = Arguments::<'_>::new_v1(move _178, move _179) -> [return: bb103, unwind: bb147];
    }

    bb103: {
        _187 = _169;
        _252 = const _;
        _176 = __private_api_log(move _177, move _187, _252) -> [return: bb177, unwind: bb147];
    }

    bb104: {
        _188 = log::Level::Info;
        _190 = &_188;
        _251 = const _;
        _189 = <Level as PartialOrd<LevelFilter>>::le(move _190, _251) -> [return: bb105, unwind: bb147];
    }

    bb105: {
        switchInt(move _189) -> [0: bb112, otherwise: bb106];
    }

    bb106: {
        _192 = &_188;
        _194 = max_level() -> [return: bb107, unwind: bb147];
    }

    bb107: {
        _193 = &_194;
        _191 = <Level as PartialOrd<LevelFilter>>::le(move _192, move _193) -> [return: bb108, unwind: bb147];
    }

    bb108: {
        switchInt(move _191) -> [0: bb112, otherwise: bb109];
    }

    bb109: {
        _250 = const _;
        _197 = _250 as &[&str] (PointerCoercion(Unsize));
        _301 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _202 = &(((*_301) as variant#4).1: std::net::SocketAddr);
        _201 = core::fmt::rt::Argument::<'_>::new_display::<std::net::SocketAddr>(_202) -> [return: bb110, unwind: bb147];
    }

    bb110: {
        _200 = [move _201];
        _199 = &_200;
        _198 = _199 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _196 = Arguments::<'_>::new_v1(move _197, move _198) -> [return: bb111, unwind: bb147];
    }

    bb111: {
        _203 = _188;
        _249 = const _;
        _195 = __private_api_log(move _196, move _203, _249) -> [return: bb178, unwind: bb147];
    }

    bb112: {
        _204 = log::Level::Info;
        _206 = &_204;
        _248 = const _;
        _205 = <Level as PartialOrd<LevelFilter>>::le(move _206, _248) -> [return: bb113, unwind: bb147];
    }

    bb113: {
        switchInt(move _205) -> [0: bb119, otherwise: bb114];
    }

    bb114: {
        _208 = &_204;
        _210 = max_level() -> [return: bb115, unwind: bb147];
    }

    bb115: {
        _209 = &_210;
        _207 = <Level as PartialOrd<LevelFilter>>::le(move _208, move _209) -> [return: bb116, unwind: bb147];
    }

    bb116: {
        switchInt(move _207) -> [0: bb119, otherwise: bb117];
    }

    bb117: {
        _247 = const _;
        _213 = _247 as &[&str] (PointerCoercion(Unsize));
        _212 = Arguments::<'_>::new_const(move _213) -> [return: bb118, unwind: bb147];
    }

    bb118: {
        _214 = _204;
        _246 = const _;
        _211 = __private_api_log(move _212, move _214, _246) -> [return: bb179, unwind: bb147];
    }

    bb119: {
        _302 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_302) as variant#3).3: bool) = const false;
        _255 = const true;
        _217 = move _37;
        _303 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _221 = &(((*_303) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _220 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _221) -> [return: bb120, unwind: bb135];
    }

    bb120: {
        _219 = (((*_220).0: configuration::General).0: std::net::IpAddr);
        _304 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _224 = &(((*_304) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>);
        _223 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _224) -> [return: bb121, unwind: bb133];
    }

    bb121: {
        _222 = (((*_223).0: configuration::General).1: u16);
        _218 = (move _219, move _222);
        _255 = const false;
        _216 = warp::Server::<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::bind::<(IpAddr, u16)>(move _217, move _218) -> [return: bb122, unwind: bb133];
    }

    bb122: {
        _255 = const false;
        _215 = <futures_util::future::future::map::Map<warp::hyper::Server<AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::bind_ephemeral<(IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::bind_ephemeral<(IpAddr, u16)>::{closure#0}}> as IntoFuture>::into_future(move _216) -> [return: bb123, unwind: bb147];
    }

    bb123: {
        _305 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_305) as variant#4).2: futures_util::future::future::map::Map<warp::hyper::Server<warp::hyper::server::conn::AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#0}}>) = move _215;
        goto -> bb124;
    }

    bb124: {
        _306 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        _227 = &mut (((*_306) as variant#4).2: futures_util::future::future::map::Map<warp::hyper::Server<warp::hyper::server::conn::AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#0}}>);
        _226 = Pin::<&mut futures_util::future::future::map::Map<warp::hyper::Server<AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::bind_ephemeral<(IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::bind_ephemeral<(IpAddr, u16)>::{closure#0}}>>::new_unchecked(_227) -> [return: bb125, unwind: bb132];
    }

    bb125: {
        _228 = _262;
        _225 = <futures_util::future::future::map::Map<warp::hyper::Server<AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::bind_ephemeral<(IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>>>::bind_ephemeral<(IpAddr, u16)>::{closure#0}}> as Future>::poll(move _226, _228) -> [return: bb126, unwind: bb132];
    }

    bb126: {
        _229 = discriminant(_225);
        switchInt(move _229) -> [0: bb128, 1: bb127, otherwise: bb88];
    }

    bb127: {
        _0 = Poll::<()>::Pending;
        _307 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        discriminant((*_307)) = 4;
        return;
    }

    bb128: {
        _230 = ((_225 as Ready).0: ());
        _308 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        drop((((*_308) as variant#4).2: futures_util::future::future::map::Map<warp::hyper::Server<warp::hyper::server::conn::AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#0}}>)) -> [return: bb129, unwind: bb147];
    }

    bb129: {
        _261 = const ();
        goto -> bb130;
    }

    bb130: {
        _309 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_309) as variant#3).3: bool) = const false;
        _310 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_310) as variant#3).4: bool) = const false;
        _311 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_311) as variant#3).5: bool) = const false;
        _312 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        drop((((*_312) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>)) -> [return: bb131, unwind: bb156];
    }

    bb131: {
        _0 = Poll::<()>::Ready(move _261);
        _313 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        discriminant((*_313)) = 1;
        return;
    }

    bb132 (cleanup): {
        _314 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        drop((((*_314) as variant#4).2: futures_util::future::future::map::Map<warp::hyper::Server<warp::hyper::server::conn::AddrIncoming, warp::hyper::service::make::MakeServiceFn<{closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#1}::{closure#0}}>>, {closure@warp::Server<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind_ephemeral<(std::net::IpAddr, u16)>::{closure#0}}>)) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        switchInt(_255) -> [0: bb134, otherwise: bb158];
    }

    bb134 (cleanup): {
        _255 = const false;
        goto -> bb147;
    }

    bb135 (cleanup): {
        drop(_217) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        _255 = const false;
        goto -> bb147;
    }

    bb137 (cleanup): {
        _315 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        drop((((*_315) as variant#3).2: {async fn body@warp::TlsServer<warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>>::bind<(std::net::IpAddr, u16)>::{closure#0}})) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        switchInt(_256) -> [0: bb139, otherwise: bb159];
    }

    bb139 (cleanup): {
        _256 = const false;
        goto -> bb147;
    }

    bb140 (cleanup): {
        drop(_139) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        _256 = const false;
        goto -> bb147;
    }

    bb142 (cleanup): {
        switchInt(_257) -> [0: bb143, otherwise: bb160];
    }

    bb143 (cleanup): {
        _257 = const false;
        _256 = const false;
        goto -> bb147;
    }

    bb144 (cleanup): {
        switchInt(_258) -> [0: bb145, otherwise: bb161];
    }

    bb145 (cleanup): {
        _258 = const false;
        _257 = const false;
        _256 = const false;
        goto -> bb147;
    }

    bb146 (cleanup): {
        _258 = const false;
        _257 = const false;
        _256 = const false;
        goto -> bb147;
    }

    bb147 (cleanup): {
        _320 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        switchInt((((*_320) as variant#3).3: bool)) -> [0: bb151, otherwise: bb162];
    }

    bb148 (cleanup): {
        switchInt(_259) -> [0: bb149, otherwise: bb163];
    }

    bb149 (cleanup): {
        _259 = const false;
        switchInt(_260) -> [0: bb150, otherwise: bb164];
    }

    bb150 (cleanup): {
        _260 = const false;
        goto -> bb151;
    }

    bb151 (cleanup): {
        _316 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_316) as variant#3).3: bool) = const false;
        goto -> bb166;
    }

    bb152 (cleanup): {
        drop((_36.1: tokio::sync::broadcast::Receiver<server::SseMessage>)) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        _317 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_317) as variant#3).4: bool) = const false;
        _322 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        switchInt((((*_322) as variant#3).5: bool)) -> [0: bb154, otherwise: bb167];
    }

    bb154 (cleanup): {
        _318 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_318) as variant#3).5: bool) = const false;
        goto -> bb155;
    }

    bb155 (cleanup): {
        _319 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        drop((((*_319) as variant#3).0: std::sync::RwLockReadGuard<'_, configuration::Configuration>)) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        _323 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        discriminant((*_323)) = 2;
        resume;
    }

    bb157: {
        _277 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_277) as variant#3).5: bool) = const false;
        _260 = const true;
        _39 = move _31;
        _278 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        (((*_278) as variant#3).4: bool) = const false;
        _259 = const true;
        _40 = move _34;
        _42 = &((*_3).0: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
        _41 = <Arc<std::sync::RwLock<Configuration>> as Clone>::clone(move _42) -> [return: bb24, unwind: bb148];
    }

    bb158 (cleanup): {
        drop(_217) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        drop(_139) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        drop(_140) -> [return: bb143, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        drop(_141) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        drop(_37) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        drop(_40) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb164 (cleanup): {
        drop(_39) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        drop(_34) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        _321 = deref_copy (_1.0: &mut {async fn body@src/server.rs:41:29: 109:6});
        switchInt((((*_321) as variant#3).4: bool)) -> [0: bb153, otherwise: bb165];
    }

    bb167 (cleanup): {
        drop(_31) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb168: {
        _262 = move _2;
        goto -> bb84;
    }

    bb169: {
        _262 = move _2;
        goto -> bb124;
    }

    bb170: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb170, unwind continue];
    }

    bb171: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb171, unwind continue];
    }

    bb172: {
        goto -> bb41;
    }

    bb173: {
        goto -> bb49;
    }

    bb174: {
        goto -> bb58;
    }

    bb175: {
        goto -> bb67;
    }

    bb176: {
        goto -> bb74;
    }

    bb177: {
        goto -> bb104;
    }

    bb178: {
        goto -> bb112;
    }

    bb179: {
        goto -> bb119;
    }
}

promoted[0] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid::server";
        _2 = &(*_3);
        _1 = (move _2, const "lucid::server", const "src/server.rs", const 80_u32);
        _0 = &_1;
        return;
    }
}

promoted[1] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Use Ctrl+C to stop the server."];
        _0 = &_1;
        return;
    }
}

promoted[2] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid::server";
        _2 = &(*_3);
        _1 = (move _2, const "lucid::server", const "src/server.rs", const 76_u32);
        _0 = &_1;
        return;
    }
}

promoted[4] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "SSL Private Key: "];
        _0 = &_1;
        return;
    }
}

promoted[5] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid::server";
        _2 = &(*_3);
        _1 = (move _2, const "lucid::server", const "src/server.rs", const 72_u32);
        _0 = &_1;
        return;
    }
}

promoted[7] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "SSL Certificate: "];
        _0 = &_1;
        return;
    }
}

promoted[8] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[9] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid::server";
        _2 = &(*_3);
        _1 = (move _2, const "lucid::server", const "src/server.rs", const 71_u32);
        _0 = &_1;
        return;
    }
}

promoted[10] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Lucid API Endpoint: https://", const "/api/"];
        _0 = &_1;
        return;
    }
}

promoted[11] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[12] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid::server";
        _2 = &(*_3);
        _1 = (move _2, const "lucid::server", const "src/server.rs", const 66_u32);
        _0 = &_1;
        return;
    }
}

promoted[13] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Running Lucid server on ", const " | PID: "];
        _0 = &_1;
        return;
    }
}

promoted[14] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[15] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid::server";
        _2 = &(*_3);
        _1 = (move _2, const "lucid::server", const "src/server.rs", const 101_u32);
        _0 = &_1;
        return;
    }
}

promoted[16] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Use Ctrl+C to stop the server."];
        _0 = &_1;
        return;
    }
}

promoted[17] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[18] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid::server";
        _2 = &(*_3);
        _1 = (move _2, const "lucid::server", const "src/server.rs", const 100_u32);
        _0 = &_1;
        return;
    }
}

promoted[19] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Lucid API Endpoint: http://", const "/api/"];
        _0 = &_1;
        return;
    }
}

promoted[20] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[21] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid::server";
        _2 = &(*_3);
        _1 = (move _2, const "lucid::server", const "src/server.rs", const 95_u32);
        _0 = &_1;
        return;
    }
}

promoted[22] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Running Lucid server on ", const " | PID: "];
        _0 = &_1;
        return;
    }
}

promoted[23] in server::<impl at src/server.rs:36:1: 36:12>::run::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn routes_filter(_1: Arc<KvStore>, _2: Arc<tokio::sync::broadcast::Sender<SseMessage>>, _3: Arc<std::sync::RwLock<Configuration>>) -> warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>>> {
    debug store => _1;
    debug event_tx => _2;
    debug config => _3;
    let mut _0: warp::log::internal::WithLog<{closure@warp::log::{closure#0}}, warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>>;
    let _4: std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _5: std::result::Result<std::sync::RwLockReadGuard<'_, configuration::Configuration>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, configuration::Configuration>>>;
    let _6: &std::sync::RwLock<configuration::Configuration>;
    let mut _7: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _9: warp::filters::any::Any;
    let mut _10: {closure@src/server.rs:119:33: 119:40};
    let mut _12: warp::filters::any::Any;
    let mut _13: {closure@src/server.rs:120:36: 120:43};
    let mut _15: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _17: warp::filters::any::Any;
    let mut _18: {closure@src/server.rs:123:34: 123:41};
    let mut _20: warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>;
    let mut _21: warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>;
    let mut _22: warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>;
    let mut _23: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>;
    let mut _24: &warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>;
    let mut _26: warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>;
    let mut _27: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>;
    let mut _28: &warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>;
    let mut _30: warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>;
    let mut _31: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>;
    let mut _32: &warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>;
    let mut _35: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>;
    let mut _36: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>;
    let mut _37: warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>;
    let mut _38: warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>;
    let mut _39: warp::filters::any::Any;
    let mut _40: warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>;
    let mut _41: warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>;
    let mut _42: warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>;
    let mut _43: warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>;
    let mut _44: warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>;
    let mut _46: warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>;
    let mut _47: &warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>;
    let mut _48: warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>;
    let mut _49: warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>;
    let mut _50: warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>;
    let mut _51: warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>;
    let mut _52: warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>;
    let mut _53: warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>;
    let mut _54: warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>;
    let mut _55: warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>;
    let mut _56: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>;
    let mut _57: &warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>;
    let mut _58: warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>;
    let mut _59: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>;
    let mut _60: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>;
    let mut _61: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>;
    let mut _62: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>;
    let mut _63: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>;
    let mut _64: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>;
    let mut _65: warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>;
    let mut _66: warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>;
    let mut _67: warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>;
    let mut _68: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>;
    let mut _69: &warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>;
    let mut _70: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>;
    let mut _71: &warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>;
    let mut _72: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>;
    let mut _73: &warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>;
    let mut _74: warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>;
    let mut _75: u64;
    let mut _76: &configuration::Configuration;
    let mut _77: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _78: warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>;
    let mut _79: u64;
    let mut _80: &configuration::Configuration;
    let mut _81: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _82: warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>;
    let mut _83: warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>;
    let mut _84: &warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>;
    let mut _85: warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>;
    let mut _86: warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>;
    let mut _87: warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>;
    let mut _88: warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>;
    let mut _89: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>;
    let mut _90: &warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>;
    let mut _91: warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>;
    let mut _92: warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>;
    let mut _93: warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>;
    let mut _94: warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>;
    let mut _95: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>;
    let mut _96: &warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>;
    let mut _97: warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>;
    let mut _98: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>;
    let mut _99: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>;
    let mut _100: warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>;
    let mut _101: warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>;
    let mut _102: warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>;
    let mut _103: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>;
    let mut _104: &warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>;
    let mut _105: warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>;
    let mut _106: u64;
    let mut _107: &configuration::Configuration;
    let mut _108: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _109: warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>;
    let mut _111: warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>;
    let mut _112: warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>;
    let mut _113: warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>;
    let mut _114: warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>;
    let mut _115: warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>;
    let mut _116: warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>;
    let mut _117: warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>;
    let mut _118: warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>;
    let mut _119: warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>;
    let mut _121: warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>;
    let mut _122: warp::path::Exact<warp::path::internal::Opaque<&str>>;
    let mut _123: warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>;
    let mut _124: warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>;
    let mut _125: warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>;
    let mut _127: warp::cors::Builder;
    let mut _128: warp::cors::Builder;
    let mut _129: std::vec::Vec<&str>;
    let mut _130: std::boxed::Box<[&str]>;
    let mut _131: usize;
    let mut _132: usize;
    let mut _133: *mut u8;
    let mut _134: std::boxed::Box<[&str; 6]>;
    let _135: &str;
    let _136: &str;
    let _137: &str;
    let _138: &str;
    let _139: &str;
    let mut _141: warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>;
    let mut _142: warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>;
    let mut _143: warp::filters::any::Any;
    let mut _144: warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>;
    let mut _145: warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>;
    let mut _147: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>;
    let mut _148: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>;
    let mut _149: warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>;
    let mut _150: warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>;
    let mut _151: warp::path::Exact<warp::path::internal::Opaque<&str>>;
    let mut _152: warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>;
    let mut _153: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>;
    let mut _154: warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>;
    let mut _155: warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>;
    let mut _156: warp::cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>>;
    let mut _157: warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>, warp::filters::reply::sealed::WithHeader_>;
    let mut _158: warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(warp::Rejection) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::process_error}>;
    let mut _159: warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>;
    let mut _160: warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>;
    let mut _161: warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>;
    let mut _162: warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>;
    let mut _163: warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>;
    let mut _164: warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>;
    let mut _165: warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>;
    let mut _166: warp::filters::reply::WithHeader;
    let mut _168: std::fmt::Arguments<'_>;
    let mut _169: &[&str];
    let mut _170: &[core::fmt::rt::Argument<'_>];
    let _171: &[core::fmt::rt::Argument<'_>; 0];
    let _172: [core::fmt::rt::Argument<'_>; 0];
    let mut _173: warp::cors::Builder;
    let mut _174: warp::log::Log<{closure@warp::log::{closure#0}}>;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: bool;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: bool;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: bool;
    let mut _201: bool;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: bool;
    let mut _205: bool;
    let mut _206: *const [&str; 6];
    scope 1 {
        debug configuration => _4;
        let _8: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>;
        scope 2 {
            debug store => _8;
            let _11: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>;
            scope 3 {
                debug event_tx => _11;
                let _14: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
                scope 4 {
                    debug config => _14;
                    let _16: warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>;
                    scope 5 {
                        debug config => _16;
                        let _19: warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>;
                        scope 6 {
                            debug auth => _19;
                            let _25: warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>;
                            scope 7 {
                                debug webui_enabled => _25;
                                let _29: warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>;
                                scope 8 {
                                    debug sse_enabled => _29;
                                    let _33: warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>;
                                    scope 9 {
                                        debug mime => _33;
                                        let _34: warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>;
                                        scope 10 {
                                            debug api_kv_key_path => const warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,) >::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: warp::filter::FilterFn::<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }};
                                            let _45: warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@warp::path::param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<headers::common::content_length::ContentLength, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#0}}>, {closure@warp::body::content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<warp::hyper::Body, warp::Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<server::PatchValue>::{closure#0}}>>, fn(std::sync::Arc<kvstore::KvStore>, std::string::String, server::PatchValue) -> impl warp::Future<Output = std::result::Result<impl warp::Reply, warp::Rejection>> {server::patch_key}>>>;
                                            scope 11 {
                                                debug api_kv_key => _45;
                                                let _110: warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@warp::fs::file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@warp::fs::file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::path::tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, std::convert::Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::if_range::IfRange>, std::convert::Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<headers::common::range::Range>, std::convert::Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl warp::Future<Output = std::result::Result<warp::fs::File, warp::Rejection>> + std::marker::Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>;
                                                scope 12 {
                                                    debug webui => _110;
                                                    let _120: warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>;
                                                    scope 13 {
                                                        debug robots => _120;
                                                        let _126: warp::cors::Builder;
                                                        let mut _207: *const ();
                                                        let mut _208: usize;
                                                        let mut _209: usize;
                                                        let mut _210: usize;
                                                        let mut _211: usize;
                                                        let mut _212: bool;
                                                        scope 14 {
                                                            debug cors => _126;
                                                            let _140: warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, warp::path::Exact<warp::path::internal::Opaque<server::routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>;
                                                            scope 16 {
                                                                debug health => const warp::filter::map::Map::<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}> {{ filter: warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}, callback: ZeroSized: {closure@src/server.rs:193:14: 193:16} }};
                                                                let _146: warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::path::Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<std::result::Result<std::option::Option<std::string::String>, warp::Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(std::sync::Arc<std::sync::RwLock<configuration::Configuration>>) -> impl warp::Future<Output = std::result::Result<(), warp::Rejection>> {server::check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>;
                                                                scope 17 {
                                                                    debug sse => _146;
                                                                    let _167: std::string::String;
                                                                    let mut _175: &[&str; 1];
                                                                    scope 18 {
                                                                        debug res => _167;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 15 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _205 = const false;
        _204 = const false;
        _203 = const false;
        _202 = const false;
        _201 = const false;
        _200 = const false;
        _199 = const false;
        _185 = const false;
        _198 = const false;
        _188 = const false;
        _189 = const false;
        _190 = const false;
        _197 = const false;
        _191 = const false;
        _192 = const false;
        _193 = const false;
        _194 = const false;
        _195 = const false;
        _196 = const false;
        _186 = const false;
        _187 = const false;
        _181 = const false;
        _182 = const false;
        _183 = const false;
        _184 = const false;
        _179 = const false;
        _180 = const false;
        _178 = const false;
        _176 = const false;
        _177 = const false;
        _205 = const true;
        _204 = const true;
        _7 = &_3;
        _6 = <Arc<std::sync::RwLock<Configuration>> as Deref>::deref(move _7) -> [return: bb1, unwind: bb137];
    }

    bb1: {
        _5 = std::sync::RwLock::<Configuration>::read(_6) -> [return: bb2, unwind: bb137];
    }

    bb2: {
        _4 = Result::<std::sync::RwLockReadGuard<'_, Configuration>, PoisonError<std::sync::RwLockReadGuard<'_, Configuration>>>::unwrap(move _5) -> [return: bb3, unwind: bb137];
    }

    bb3: {
        _9 = warp::any() -> [return: bb4, unwind: bb136];
    }

    bb4: {
        _205 = const false;
        _10 = {closure@src/server.rs:119:33: 119:40} { store: move _1 };
        _8 = <warp::filters::any::Any as warp::Filter>::map::<{closure@src/server.rs:119:33: 119:40}>(const warp::filters::any::Any, move _10) -> [return: bb5, unwind: bb136];
    }

    bb5: {
        _12 = warp::any() -> [return: bb6, unwind: bb135];
    }

    bb6: {
        _204 = const false;
        _13 = {closure@src/server.rs:120:36: 120:43} { event_tx: move _2 };
        _11 = <warp::filters::any::Any as warp::Filter>::map::<{closure@src/server.rs:120:36: 120:43}>(const warp::filters::any::Any, move _13) -> [return: bb7, unwind: bb135];
    }

    bb7: {
        _203 = const true;
        _15 = &_3;
        _14 = <Arc<std::sync::RwLock<Configuration>> as Clone>::clone(move _15) -> [return: bb8, unwind: bb195];
    }

    bb8: {
        _202 = const true;
        _17 = warp::any() -> [return: bb9, unwind: bb193];
    }

    bb9: {
        _202 = const false;
        _18 = {closure@src/server.rs:123:34: 123:41} { config: move _14 };
        _16 = <warp::filters::any::Any as warp::Filter>::map::<{closure@src/server.rs:123:34: 123:41}>(const warp::filters::any::Any, move _18) -> [return: bb10, unwind: bb193];
    }

    bb10: {
        _22 = warp::header::optional::<std::string::String>(const "authorization") -> [return: bb11, unwind: bb134];
    }

    bb11: {
        _24 = &_16;
        _23 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}> as Clone>::clone(move _24) -> [return: bb12, unwind: bb134];
    }

    bb12: {
        _21 = <warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}> as warp::Filter>::and::<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>(move _22, move _23) -> [return: bb13, unwind: bb134];
    }

    bb13: {
        _20 = <warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>> as warp::Filter>::and_then::<fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>(move _21, verify_auth) -> [return: bb14, unwind: bb134];
    }

    bb14: {
        _19 = <warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}> as warp::Filter>::untuple_one::<()>(move _20) -> [return: bb15, unwind: bb134];
    }

    bb15: {
        _201 = const true;
        _28 = &_16;
        _27 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}> as Clone>::clone(move _28) -> [return: bb16, unwind: bb191];
    }

    bb16: {
        _26 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}> as warp::Filter>::and_then::<fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>(move _27, check_webui) -> [return: bb17, unwind: bb191];
    }

    bb17: {
        _25 = <warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}> as warp::Filter>::untuple_one::<()>(move _26) -> [return: bb18, unwind: bb191];
    }

    bb18: {
        _200 = const true;
        _32 = &_16;
        _31 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}> as Clone>::clone(move _32) -> [return: bb19, unwind: bb189];
    }

    bb19: {
        _30 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}> as warp::Filter>::and_then::<fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>(move _31, check_sse) -> [return: bb20, unwind: bb189];
    }

    bb20: {
        _29 = <warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}> as warp::Filter>::untuple_one::<()>(move _30) -> [return: bb21, unwind: bb189];
    }

    bb21: {
        _199 = const true;
        _33 = warp::header::optional::<std::string::String>(const "content-type") -> [return: bb22, unwind: bb187];
    }

    bb22: {
        _39 = warp::any() -> [return: bb23, unwind: bb187];
    }

    bb23: {
        _40 = path::<routes_filter::__StaticPath>(const routes_filter::__StaticPath) -> [return: bb24, unwind: bb187];
    }

    bb24: {
        _38 = <warp::filters::any::Any as warp::Filter>::and::<Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>(const warp::filters::any::Any, const Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath))) -> [return: bb25, unwind: bb187];
    }

    bb25: {
        _41 = path::<routes_filter::__StaticPath>(const routes_filter::__StaticPath) -> [return: bb26, unwind: bb187];
    }

    bb26: {
        _37 = <warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> as warp::Filter>::and::<Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>(const warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, const Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath))) -> [return: bb27, unwind: bb187];
    }

    bb27: {
        _42 = param::<std::string::String>() -> [return: bb28, unwind: bb187];
    }

    bb28: {
        _36 = <warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> as warp::Filter>::and::<warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>(const warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, const warp::filter::FilterFn::<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}} }}) -> [return: bb29, unwind: bb187];
    }

    bb29: {
        _43 = warp::path::end() -> [return: bb30, unwind: bb187];
    }

    bb30: {
        _35 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>> as warp::Filter>::and::<warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>(const warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: warp::filter::FilterFn::<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}} }} }}, const warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }}) -> [return: bb31, unwind: bb187];
    }

    bb31: {
        _44 = warp::path::end() -> [return: bb32, unwind: bb187];
    }

    bb32: {
        _34 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> as warp::Filter>::and::<warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>(const warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: warp::filter::FilterFn::<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}, const warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }}) -> [return: bb33, unwind: bb187];
    }

    bb33: {
        _47 = &_19;
        _46 = <warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>> as Clone>::clone(move _47) -> [return: bb34, unwind: bb187];
    }

    bb34: {
        _198 = const true;
        _55 = warp::get() -> [return: bb35, unwind: bb185];
    }

    bb35: {
        _57 = &_8;
        _56 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}> as Clone>::clone(move _57) -> [return: bb36, unwind: bb185];
    }

    bb36: {
        _54 = <warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}> as warp::Filter>::and::<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>(const warp::filter::FilterFn::<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}} }}, move _56) -> [return: bb37, unwind: bb185];
    }

    bb37: {
        _53 = <warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>> as warp::Filter>::and::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>(move _54, const warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: warp::filter::FilterFn::<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}) -> [return: bb38, unwind: bb185];
    }

    bb38: {
        _52 = <warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>> as warp::Filter>::and_then::<fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>(move _53, get_key) -> [return: bb39, unwind: bb185];
    }

    bb39: {
        _197 = const true;
        _67 = warp::put() -> [return: bb40, unwind: bb183];
    }

    bb40: {
        _69 = &_8;
        _68 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}> as Clone>::clone(move _69) -> [return: bb41, unwind: bb183];
    }

    bb41: {
        _66 = <warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}> as warp::Filter>::and::<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>(const warp::filter::FilterFn::<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}} }}, move _68) -> [return: bb42, unwind: bb183];
    }

    bb42: {
        _196 = const true;
        _71 = &_11;
        _70 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}> as Clone>::clone(move _71) -> [return: bb43, unwind: bb181];
    }

    bb43: {
        _196 = const false;
        _65 = <warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>> as warp::Filter>::and::<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>(move _66, move _70) -> [return: bb44, unwind: bb181];
    }

    bb44: {
        _195 = const true;
        _196 = const false;
        _73 = &_16;
        _72 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}> as Clone>::clone(move _73) -> [return: bb45, unwind: bb179];
    }

    bb45: {
        _195 = const false;
        _64 = <warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>> as warp::Filter>::and::<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>(move _65, move _72) -> [return: bb46, unwind: bb179];
    }

    bb46: {
        _195 = const false;
        _63 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>> as warp::Filter>::and::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>(move _64, const warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: warp::filter::FilterFn::<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}) -> [return: bb47, unwind: bb183];
    }

    bb47: {
        _194 = const true;
        _77 = &_4;
        _76 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _77) -> [return: bb48, unwind: bb177];
    }

    bb48: {
        _75 = (((*_76).7: configuration::Http).0: u64);
        _74 = content_length_limit(move _75) -> [return: bb49, unwind: bb177];
    }

    bb49: {
        _194 = const false;
        _62 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>> as warp::Filter>::and::<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>(move _63, move _74) -> [return: bb50, unwind: bb177];
    }

    bb50: {
        _193 = const true;
        _194 = const false;
        _81 = &_4;
        _80 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _81) -> [return: bb51, unwind: bb175];
    }

    bb51: {
        _79 = (((*_80).6: configuration::Store).0: u64);
        _78 = content_length_limit(move _79) -> [return: bb52, unwind: bb175];
    }

    bb52: {
        _193 = const false;
        _61 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>> as warp::Filter>::and::<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>(move _62, move _78) -> [return: bb53, unwind: bb175];
    }

    bb53: {
        _192 = const true;
        _193 = const false;
        _82 = warp::body::bytes() -> [return: bb54, unwind: bb173];
    }

    bb54: {
        _192 = const false;
        _60 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>> as warp::Filter>::and::<warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>(move _61, const warp::filter::and_then::AndThen::<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}> {{ filter: warp::filter::FilterFn::<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}} }}, callback: ZeroSized: {closure@warp::body::bytes::{closure#0}} }}) -> [return: bb55, unwind: bb173];
    }

    bb55: {
        _191 = const true;
        _192 = const false;
        _84 = &_33;
        _83 = <warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}> as Clone>::clone(move _84) -> [return: bb56, unwind: bb171];
    }

    bb56: {
        _191 = const false;
        _59 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>> as warp::Filter>::and::<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>(move _60, move _83) -> [return: bb57, unwind: bb171];
    }

    bb57: {
        _191 = const false;
        _58 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>> as warp::Filter>::and_then::<fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>(move _59, put_key) -> [return: bb58, unwind: bb183];
    }

    bb58: {
        _197 = const false;
        _51 = <warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}> as warp::Filter>::or::<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>(move _52, move _58) -> [return: bb59, unwind: bb183];
    }

    bb59: {
        _190 = const true;
        _197 = const false;
        _88 = delete() -> [return: bb60, unwind: bb169];
    }

    bb60: {
        _90 = &_8;
        _89 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}> as Clone>::clone(move _90) -> [return: bb61, unwind: bb169];
    }

    bb61: {
        _87 = <warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}> as warp::Filter>::and::<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>(const warp::filter::FilterFn::<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}} }}, move _89) -> [return: bb62, unwind: bb169];
    }

    bb62: {
        _86 = <warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>> as warp::Filter>::and::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>(move _87, const warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: warp::filter::FilterFn::<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}) -> [return: bb63, unwind: bb169];
    }

    bb63: {
        _85 = <warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>> as warp::Filter>::and_then::<fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>(move _86, delete_key) -> [return: bb64, unwind: bb169];
    }

    bb64: {
        _190 = const false;
        _50 = <warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>> as warp::Filter>::or::<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>(move _51, move _85) -> [return: bb65, unwind: bb169];
    }

    bb65: {
        _189 = const true;
        _190 = const false;
        _94 = head() -> [return: bb66, unwind: bb167];
    }

    bb66: {
        _96 = &_8;
        _95 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}> as Clone>::clone(move _96) -> [return: bb67, unwind: bb167];
    }

    bb67: {
        _93 = <warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}> as warp::Filter>::and::<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>(const warp::filter::FilterFn::<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}} }}, move _95) -> [return: bb68, unwind: bb167];
    }

    bb68: {
        _92 = <warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>> as warp::Filter>::and::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>(move _93, const warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: warp::filter::FilterFn::<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}) -> [return: bb69, unwind: bb167];
    }

    bb69: {
        _91 = <warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>> as warp::Filter>::and_then::<fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>(move _92, find_key) -> [return: bb70, unwind: bb167];
    }

    bb70: {
        _189 = const false;
        _49 = <warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>> as warp::Filter>::or::<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>(move _50, move _91) -> [return: bb71, unwind: bb167];
    }

    bb71: {
        _188 = const true;
        _189 = const false;
        _102 = patch() -> [return: bb72, unwind: bb165];
    }

    bb72: {
        _104 = &_8;
        _103 = <warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}> as Clone>::clone(move _104) -> [return: bb73, unwind: bb165];
    }

    bb73: {
        _101 = <warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}> as warp::Filter>::and::<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>(const warp::filter::FilterFn::<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}} }}, move _103) -> [return: bb74, unwind: bb165];
    }

    bb74: {
        _100 = <warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>> as warp::Filter>::and::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>(move _101, const warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: warp::filter::FilterFn::<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}) -> [return: bb75, unwind: bb165];
    }

    bb75: {
        _187 = const true;
        _108 = &_4;
        _107 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _108) -> [return: bb76, unwind: bb163];
    }

    bb76: {
        _106 = (((*_107).7: configuration::Http).0: u64);
        _105 = content_length_limit(move _106) -> [return: bb77, unwind: bb163];
    }

    bb77: {
        _187 = const false;
        _99 = <warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>> as warp::Filter>::and::<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>(move _100, move _105) -> [return: bb78, unwind: bb163];
    }

    bb78: {
        _186 = const true;
        _187 = const false;
        _109 = warp::body::json::<PatchValue>() -> [return: bb79, unwind: bb161];
    }

    bb79: {
        _186 = const false;
        _98 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>> as warp::Filter>::and::<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>(move _99, const warp::filter::and_then::AndThen::<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}> {{ filter: warp::filter::and::And::<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>> {{ first: warp::filter::FilterFn::<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}> {{ func: ZeroSized: {closure@warp::body::is_content_type<warp::body::Json>::{closure#0}} }}, second: warp::filter::and_then::AndThen::<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}> {{ filter: warp::filter::FilterFn::<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}} }}, callback: ZeroSized: {closure@warp::body::aggregate::{closure#0}} }} }}, callback: ZeroSized: {closure@warp::body::json<PatchValue>::{closure#0}} }}) -> [return: bb80, unwind: bb161];
    }

    bb80: {
        _186 = const false;
        _97 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>> as warp::Filter>::and_then::<fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>(move _98, patch_key) -> [return: bb81, unwind: bb165];
    }

    bb81: {
        _188 = const false;
        _48 = <warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>> as warp::Filter>::or::<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>(move _49, move _97) -> [return: bb82, unwind: bb165];
    }

    bb82: {
        _188 = const false;
        _198 = const false;
        _45 = <warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>> as warp::Filter>::and::<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>(move _46, move _48) -> [return: bb83, unwind: bb185];
    }

    bb83: {
        _185 = const true;
        _198 = const false;
        _114 = file::<&str>(const "assets/webui/dist/index.html") -> [return: bb84, unwind: bb159];
    }

    bb84: {
        _184 = const true;
        _115 = dir::<&str>(const "assets/webui/dist") -> [return: bb85, unwind: bb157];
    }

    bb85: {
        _184 = const false;
        _113 = <warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}> as warp::Filter>::or::<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>(move _114, move _115) -> [return: bb86, unwind: bb157];
    }

    bb86: {
        _184 = const false;
        _200 = const false;
        _116 = move _25;
        _112 = <warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>> as warp::Filter>::and::<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>(move _113, move _116) -> [return: bb87, unwind: bb159];
    }

    bb87: {
        _183 = const true;
        _118 = warp::get() -> [return: bb88, unwind: bb155];
    }

    bb88: {
        _117 = <warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}> as warp::Filter>::map::<{closure@src/server.rs:181:29: 181:36}>(const warp::filter::FilterFn::<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}} }}, const ZeroSized: {closure@src/server.rs:181:29: 181:36}) -> [return: bb89, unwind: bb155];
    }

    bb89: {
        _183 = const false;
        _111 = <warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>> as warp::Filter>::or::<warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>(move _112, const warp::filter::map::Map::<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}> {{ filter: warp::filter::FilterFn::<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}} }}, callback: ZeroSized: {closure@src/server.rs:181:29: 181:36} }}) -> [return: bb90, unwind: bb155];
    }

    bb90: {
        _182 = const true;
        _183 = const false;
        _119 = warp::path::end() -> [return: bb91, unwind: bb153];
    }

    bb91: {
        _182 = const false;
        _110 = <warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>> as warp::Filter>::and::<warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>(move _111, const warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }}) -> [return: bb92, unwind: bb153];
    }

    bb92: {
        _181 = const true;
        _182 = const false;
        _122 = path::<&str>(const "robots.txt") -> [return: bb93, unwind: bb151];
    }

    bb93: {
        _123 = warp::path::end() -> [return: bb94, unwind: bb151];
    }

    bb94: {
        _121 = <Exact<warp::path::internal::Opaque<&str>> as warp::Filter>::and::<warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>(move _122, const warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }}) -> [return: bb95, unwind: bb151];
    }

    bb95: {
        _125 = warp::get() -> [return: bb96, unwind: bb151];
    }

    bb96: {
        _124 = <warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}> as warp::Filter>::map::<{closure@src/server.rs:186:30: 186:32}>(const warp::filter::FilterFn::<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}} }}, const ZeroSized: {closure@src/server.rs:186:30: 186:32}) -> [return: bb97, unwind: bb151];
    }

    bb97: {
        _120 = <warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> as warp::Filter>::and::<warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>(move _121, const warp::filter::map::Map::<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}> {{ filter: warp::filter::FilterFn::<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}} }}, callback: ZeroSized: {closure@src/server.rs:186:30: 186:32} }}) -> [return: bb98, unwind: bb151];
    }

    bb98: {
        _128 = cors() -> [return: bb99, unwind: bb151];
    }

    bb99: {
        _180 = const true;
        _131 = SizeOf([&str; 6]);
        _132 = AlignOf([&str; 6]);
        _133 = alloc::alloc::exchange_malloc(move _131, move _132) -> [return: bb100, unwind: bb149];
    }

    bb100: {
        _134 = ShallowInitBox(move _133, [&str; 6]);
        _135 = const "GET";
        _136 = const "PUT";
        _137 = const "POST";
        _138 = const "PATCH";
        _139 = const "DELETE";
        _206 = (((_134.0: std::ptr::Unique<[&str; 6]>).0: std::ptr::NonNull<[&str; 6]>).0: *const [&str; 6]);
        _207 = _206 as *const () (PtrToPtr);
        _208 = _207 as usize (Transmute);
        _209 = AlignOf([&str; 6]);
        _210 = Sub(_209, const 1_usize);
        _211 = BitAnd(_208, _210);
        _212 = Eq(_211, const 0_usize);
        assert(_212, "misaligned pointer dereference: address must be a multiple of {} but is {}", _209, _208) -> [success: bb199, unwind unreachable];
    }

    bb101: {
        _180 = const false;
        _127 = warp::cors::Builder::allow_methods::<Vec<&str>>(move _128, move _129) -> [return: bb102, unwind: bb149];
    }

    bb102: {
        _180 = const false;
        _126 = warp::cors::Builder::allow_any_origin(move _127) -> [return: bb103, unwind: bb151];
    }

    bb103: {
        _179 = const true;
        _143 = warp::any() -> [return: bb104, unwind: bb147];
    }

    bb104: {
        _144 = path::<routes_filter::__StaticPath>(const routes_filter::__StaticPath) -> [return: bb105, unwind: bb147];
    }

    bb105: {
        _142 = <warp::filters::any::Any as warp::Filter>::and::<Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>(const warp::filters::any::Any, const Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath))) -> [return: bb106, unwind: bb147];
    }

    bb106: {
        _145 = warp::path::end() -> [return: bb107, unwind: bb147];
    }

    bb107: {
        _141 = <warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> as warp::Filter>::and::<warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>(const warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, const warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }}) -> [return: bb108, unwind: bb147];
    }

    bb108: {
        _140 = <warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> as warp::Filter>::map::<{closure@src/server.rs:193:14: 193:16}>(const warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}, const ZeroSized: {closure@src/server.rs:193:14: 193:16}) -> [return: bb109, unwind: bb147];
    }

    bb109: {
        _151 = path::<&str>(const "notifications") -> [return: bb110, unwind: bb147];
    }

    bb110: {
        _152 = warp::get() -> [return: bb111, unwind: bb147];
    }

    bb111: {
        _150 = <Exact<warp::path::internal::Opaque<&str>> as warp::Filter>::and::<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>(move _151, const warp::filter::FilterFn::<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}> {{ func: ZeroSized: {closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}} }}) -> [return: bb112, unwind: bb147];
    }

    bb112: {
        _203 = const false;
        _153 = move _11;
        _149 = <warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>> as warp::Filter>::and::<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>(move _150, move _153) -> [return: bb113, unwind: bb147];
    }

    bb113: {
        _201 = const false;
        _154 = move _19;
        _148 = <warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>> as warp::Filter>::and::<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>(move _149, move _154) -> [return: bb114, unwind: bb147];
    }

    bb114: {
        _199 = const false;
        _155 = move _29;
        _147 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>> as warp::Filter>::and::<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>(move _148, move _155) -> [return: bb115, unwind: bb147];
    }

    bb115: {
        _146 = <warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>> as warp::Filter>::map::<{closure@src/server.rs:200:14: 200:60}>(move _147, const ZeroSized: {closure@src/server.rs:200:14: 200:60}) -> [return: bb116, unwind: bb147];
    }

    bb116: {
        _178 = const true;
        _185 = const false;
        _163 = move _45;
        _181 = const false;
        _164 = move _110;
        _162 = <warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>> as warp::Filter>::or::<warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>(move _163, move _164) -> [return: bb117, unwind: bb145];
    }

    bb117: {
        _178 = const false;
        _165 = move _146;
        _161 = <warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>> as warp::Filter>::or::<warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>(move _162, move _165) -> [return: bb118, unwind: bb145];
    }

    bb118: {
        _160 = <warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>> as warp::Filter>::or::<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>(move _161, _120) -> [return: bb119, unwind: bb145];
    }

    bb119: {
        _159 = <warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>> as warp::Filter>::or::<warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>(move _160, const warp::filter::map::Map::<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}> {{ filter: warp::filter::and::And::<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>> {{ first: warp::filter::and::And::<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>> {{ first: warp::filters::any::Any, second: Exact::<warp::path::internal::Opaque<routes_filter::__StaticPath>>(warp::path::internal::Opaque::<routes_filter::__StaticPath>(routes_filter::__StaticPath)) }}, second: warp::filter::FilterFn::<{closure@warp::path::end::{closure#0}}> {{ func: ZeroSized: {closure@warp::path::end::{closure#0}} }} }}, callback: ZeroSized: {closure@src/server.rs:193:14: 193:16} }}) -> [return: bb120, unwind: bb145];
    }

    bb120: {
        _158 = <warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>> as warp::Filter>::recover::<fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>(move _159, process_error) -> [return: bb121, unwind: bb145];
    }

    bb121: {
        _177 = const true;
        _175 = const _;
        _169 = _175 as &[&str] (PointerCoercion(Unsize));
        _172 = core::fmt::rt::Argument::<'_>::none() -> [return: bb122, unwind: bb143];
    }

    bb122: {
        _171 = &_172;
        _170 = _171 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _168 = Arguments::<'_>::new_v1(move _169, move _170) -> [return: bb123, unwind: bb143];
    }

    bb123: {
        _167 = std::fmt::format(move _168) -> [return: bb124, unwind: bb143];
    }

    bb124: {
        _166 = warp::filters::reply::header::<&str, std::string::String>(const "Server", move _167) -> [return: bb125, unwind: bb143];
    }

    bb125: {
        _177 = const false;
        _157 = <warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}> as warp::Filter>::with::<warp::filters::reply::WithHeader>(move _158, move _166) -> [return: bb126, unwind: bb143];
    }

    bb126: {
        _177 = const false;
        _179 = const false;
        _173 = move _126;
        _156 = <warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_> as warp::Filter>::with::<warp::cors::Builder>(move _157, move _173) -> [return: bb127, unwind: bb145];
    }

    bb127: {
        _176 = const true;
        _174 = warp::log(const "lucid::server") -> [return: bb128, unwind: bb141];
    }

    bb128: {
        _176 = const false;
        _0 = <cors::internal::CorsFilter<warp::filter::map::Map<warp::filter::recover::Recover<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and::And<warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>, warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {get_key}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::put::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::bytes::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>>, fn(Arc<KvStore>, Arc<tokio::sync::broadcast::Sender<SseMessage>>, Arc<std::sync::RwLock<Configuration>>, std::string::String, bytes::Bytes, std::option::Option<std::string::String>) -> impl Future<Output = Result<impl Reply, Rejection>> {put_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@delete::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {delete_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@head::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, fn(Arc<KvStore>, std::string::String) -> impl Future<Output = Result<impl Reply, Rejection>> {find_key}>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@patch::{closure#0}}>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:119:33: 119:40}>>, warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::filter_segment<{closure@param<std::string::String>::{closure#0}}, (std::string::String,)>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map_err::MapErr<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::header2<headers::common::content_length::ContentLength>::{closure#0}}, futures_util::future::ready::Ready<Result<headers::common::content_length::ContentLength, Rejection>>>::{closure#0}}>, {closure@content_length_limit::{closure#0}}>, {closure@content_length_limit::{closure#1}}>>>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::body::is_content_type<warp::body::Json>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::body::body::{closure#0}}, futures_util::future::ready::Ready<Result<Body, Rejection>>>::{closure#0}}>, {closure@warp::body::aggregate::{closure#0}}>>, {closure@warp::body::json<PatchValue>::{closure#0}}>>, fn(Arc<KvStore>, std::string::String, PatchValue) -> impl Future<Output = Result<impl Reply, Rejection>> {patch_key}>>>, warp::filter::and::And<warp::filter::or::Or<warp::filter::and::And<warp::filter::or::Or<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::map::Map<warp::filters::any::Any, {closure@file<&str>::{closure#0}}>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, {closure@file<&str>::{closure#1}}>, warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, warp::filter::and_then::AndThen<warp::filter::FilterFn<{closure@tail::{closure#0}}>, {closure@warp::fs::path_from_tail::{closure#0}}>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_modified_since::IfModifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_modified_since::IfModifiedSince>, Infallible>>>::{closure#0}}>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_unmodified_since::IfUnmodifiedSince>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_unmodified_since::IfUnmodifiedSince>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::if_range::IfRange>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::if_range::IfRange>, Infallible>>>::{closure#0}}>>, warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional2<headers::common::range::Range>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<headers::common::range::Range>, Infallible>>>::{closure#0}}>>, {closure@warp::fs::conditionals::{closure#0}}>>, fn(warp::fs::ArcPath, warp::fs::Conditionals) -> impl Future<Output = Result<warp::fs::File, Rejection>> + Send {warp::fs::file_reply}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_webui}>>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:181:29: 181:36}>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:120:36: 120:43}>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::FilterFn<{closure@warp::filter::filter_fn_one<{closure@warp::header::optional<std::string::String>::{closure#0}}, futures_util::future::ready::Ready<Result<std::option::Option<std::string::String>, Rejection>>>::{closure#0}}>, warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>>, fn(std::option::Option<std::string::String>, Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {verify_auth}>>>, warp::filter::untuple_one::UntupleOne<warp::filter::and_then::AndThen<warp::filter::map::Map<warp::filters::any::Any, {closure@src/server.rs:123:34: 123:41}>, fn(Arc<std::sync::RwLock<Configuration>>) -> impl Future<Output = Result<(), Rejection>> {check_sse}>>>, {closure@src/server.rs:200:14: 200:60}>>, warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, warp::filter::map::Map<warp::filter::FilterFn<{closure@warp::filters::method::method_is<{closure@warp::get::{closure#0}}>::{closure#0}}>, {closure@src/server.rs:186:30: 186:32}>>>, warp::filter::map::Map<warp::filter::and::And<warp::filter::and::And<warp::filters::any::Any, Exact<warp::path::internal::Opaque<routes_filter::__StaticPath>>>, warp::filter::FilterFn<{closure@warp::path::end::{closure#0}}>>, {closure@src/server.rs:193:14: 193:16}>>, fn(Rejection) -> impl Future<Output = Result<impl Reply, Rejection>> {process_error}>, with::sealed::WithHeader_>> as warp::Filter>::with::<warp::log::Log<{closure@warp::log::{closure#0}}>>(move _156, move _174) -> [return: bb129, unwind: bb141];
    }

    bb129: {
        _176 = const false;
        _178 = const false;
        _179 = const false;
        _181 = const false;
        _185 = const false;
        _199 = const false;
        _200 = const false;
        _201 = const false;
        drop(_16) -> [return: bb130, unwind: bb193];
    }

    bb130: {
        _202 = const false;
        _203 = const false;
        drop(_8) -> [return: bb131, unwind: bb136];
    }

    bb131: {
        drop(_4) -> [return: bb132, unwind: bb137];
    }

    bb132: {
        drop(_3) -> [return: bb133, unwind: bb197];
    }

    bb133: {
        return;
    }

    bb134 (cleanup): {
        drop(_16) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        drop(_8) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        drop(_4) -> [return: bb137, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        drop(_3) -> [return: bb197, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        switchInt(_205) -> [0: bb139, otherwise: bb198];
    }

    bb139 (cleanup): {
        resume;
    }

    bb140 (cleanup): {
        drop(_156) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        switchInt(_176) -> [0: bb145, otherwise: bb140];
    }

    bb142 (cleanup): {
        drop(_158) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        switchInt(_177) -> [0: bb145, otherwise: bb142];
    }

    bb144 (cleanup): {
        drop(_146) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        switchInt(_178) -> [0: bb147, otherwise: bb144];
    }

    bb146 (cleanup): {
        drop(_126) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        switchInt(_179) -> [0: bb151, otherwise: bb146];
    }

    bb148 (cleanup): {
        drop(_128) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        switchInt(_180) -> [0: bb151, otherwise: bb148];
    }

    bb150 (cleanup): {
        drop(_110) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        switchInt(_181) -> [0: bb159, otherwise: bb150];
    }

    bb152 (cleanup): {
        drop(_111) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        switchInt(_182) -> [0: bb159, otherwise: bb152];
    }

    bb154 (cleanup): {
        drop(_112) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        switchInt(_183) -> [0: bb159, otherwise: bb154];
    }

    bb156 (cleanup): {
        drop(_114) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        switchInt(_184) -> [0: bb159, otherwise: bb156];
    }

    bb158 (cleanup): {
        drop(_45) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        switchInt(_185) -> [0: bb187, otherwise: bb158];
    }

    bb160 (cleanup): {
        drop(_99) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        switchInt(_186) -> [0: bb165, otherwise: bb160];
    }

    bb162 (cleanup): {
        drop(_100) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        switchInt(_187) -> [0: bb165, otherwise: bb162];
    }

    bb164 (cleanup): {
        drop(_49) -> [return: bb185, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        switchInt(_188) -> [0: bb185, otherwise: bb164];
    }

    bb166 (cleanup): {
        drop(_50) -> [return: bb185, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        switchInt(_189) -> [0: bb185, otherwise: bb166];
    }

    bb168 (cleanup): {
        drop(_51) -> [return: bb185, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        switchInt(_190) -> [0: bb185, otherwise: bb168];
    }

    bb170 (cleanup): {
        drop(_60) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        switchInt(_191) -> [0: bb183, otherwise: bb170];
    }

    bb172 (cleanup): {
        drop(_61) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        switchInt(_192) -> [0: bb183, otherwise: bb172];
    }

    bb174 (cleanup): {
        drop(_62) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        switchInt(_193) -> [0: bb183, otherwise: bb174];
    }

    bb176 (cleanup): {
        drop(_63) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        switchInt(_194) -> [0: bb183, otherwise: bb176];
    }

    bb178 (cleanup): {
        drop(_65) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        switchInt(_195) -> [0: bb183, otherwise: bb178];
    }

    bb180 (cleanup): {
        drop(_66) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        switchInt(_196) -> [0: bb183, otherwise: bb180];
    }

    bb182 (cleanup): {
        drop(_52) -> [return: bb185, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        switchInt(_197) -> [0: bb185, otherwise: bb182];
    }

    bb184 (cleanup): {
        drop(_46) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        switchInt(_198) -> [0: bb187, otherwise: bb184];
    }

    bb186 (cleanup): {
        drop(_29) -> [return: bb189, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        switchInt(_199) -> [0: bb189, otherwise: bb186];
    }

    bb188 (cleanup): {
        drop(_25) -> [return: bb191, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        switchInt(_200) -> [0: bb191, otherwise: bb188];
    }

    bb190 (cleanup): {
        drop(_19) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        switchInt(_201) -> [0: bb134, otherwise: bb190];
    }

    bb192 (cleanup): {
        drop(_14) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        switchInt(_202) -> [0: bb195, otherwise: bb192];
    }

    bb194 (cleanup): {
        drop(_11) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        switchInt(_203) -> [0: bb135, otherwise: bb194];
    }

    bb196 (cleanup): {
        drop(_2) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb197 (cleanup): {
        switchInt(_204) -> [0: bb138, otherwise: bb196];
    }

    bb198 (cleanup): {
        drop(_1) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb199: {
        (*_206) = [const "HEAD", _135, _136, _137, _138, _139];
        _130 = move _134 as std::boxed::Box<[&str]> (PointerCoercion(Unsize));
        _129 = std::slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _130) -> [return: bb101, unwind: bb149];
    }
}

promoted[0] in routes_filter: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Lucid v0.1.4"];
        _0 = &_1;
        return;
    }
}

fn routes_filter::{closure#0}(_1: &{closure@src/server.rs:119:33: 119:40}) -> Arc<KvStore> {
    debug store => ((*_1).0: std::sync::Arc<kvstore::KvStore>);
    let mut _0: std::sync::Arc<kvstore::KvStore>;
    let mut _2: &std::sync::Arc<kvstore::KvStore>;

    bb0: {
        _2 = &((*_1).0: std::sync::Arc<kvstore::KvStore>);
        _0 = <Arc<KvStore> as Clone>::clone(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn routes_filter::{closure#1}(_1: &{closure@src/server.rs:120:36: 120:43}) -> Arc<tokio::sync::broadcast::Sender<SseMessage>> {
    debug event_tx => ((*_1).0: std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>);
    let mut _0: std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>;
    let mut _2: &std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>;

    bb0: {
        _2 = &((*_1).0: std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>);
        _0 = <Arc<tokio::sync::broadcast::Sender<SseMessage>> as Clone>::clone(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn routes_filter::{closure#2}(_1: &{closure@src/server.rs:123:34: 123:41}) -> Arc<std::sync::RwLock<Configuration>> {
    debug config => ((*_1).0: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
    let mut _0: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _2: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;

    bb0: {
        _2 = &((*_1).0: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
        _0 = <Arc<std::sync::RwLock<Configuration>> as Clone>::clone(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn routes_filter::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/warp-0.2.3/src/filters/path.rs:571:18: 571:23>::clone(_1: &routes_filter::__StaticPath) -> routes_filter::__StaticPath {
    debug self => _1;
    let mut _0: server::routes_filter::__StaticPath;

    bb0: {
        return;
    }
}

fn routes_filter::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/warp-0.2.3/src/filters/path.rs:573:9: 573:57>::as_ref(_1: &routes_filter::__StaticPath) -> &str {
    debug self => _1;
    let mut _0: &str;
    let _2: &&str;

    bb0: {
        _2 = const {alloc37: &&str};
        _0 = deref_copy (*_2);
        return;
    }
}

alloc37 (static: <routes_filter::__StaticPath as AsRef<str>>::as_ref::S, size: 16, align: 8) {
    ╾───alloc1055<imm>────╼ 03 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1055 (size: 3, align: 1) {
    61 70 69                                        │ api
}

static routes_filter::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/warp-0.2.3/src/filters/path.rs:573:9: 573:57>::as_ref::S: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "api";
        return;
    }
}

fn routes_filter::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/warp-0.2.3/src/filters/path.rs:571:18: 571:23>::clone(_1: &routes_filter::__StaticPath) -> routes_filter::__StaticPath {
    debug self => _1;
    let mut _0: server::routes_filter::__StaticPath;

    bb0: {
        return;
    }
}

fn routes_filter::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/warp-0.2.3/src/filters/path.rs:573:9: 573:57>::as_ref(_1: &routes_filter::__StaticPath) -> &str {
    debug self => _1;
    let mut _0: &str;
    let _2: &&str;

    bb0: {
        _2 = const {alloc38: &&str};
        _0 = deref_copy (*_2);
        return;
    }
}

alloc38 (static: <routes_filter::__StaticPath as AsRef<str>>::as_ref::S, size: 16, align: 8) {
    ╾───alloc1059<imm>────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1059 (size: 2, align: 1) {
    6b 76                                           │ kv
}

static routes_filter::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/warp-0.2.3/src/filters/path.rs:573:9: 573:57>::as_ref::S: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "kv";
        return;
    }
}

const WELCOME_PAGE: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n<link rel=\"dns-prefetch\" href=\"//fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin />\n<link href=\"https://fonts.googleapis.com/css?family=Noto+Sans:400,900&display=swap\" rel=\"stylesheet\" />\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\" integrity=\"sha256-46qynGAkLSFpVbEBog43gvNhfrOj+BmwXdxFgVK/Kvc=\" crossorigin=\"anonymous\" />\n<link rel=\"preload\" href=\"https://avatars3.githubusercontent.com/u/56896360\" as=\"image\" />\n<meta name=\"title\" content=\"Lucid KV\" />\n<meta name=\"description\" content=\"Lucid is currently in a development stage but we want to achieve a fast, secure and distributed key-value store accessible through an HTTP API, we also want to propose persistence, encryption, WebSocket streaming, replication and a lot of features. 🦀\" />\n<meta name=\"keywords\" content=\"lucid,kv,lucid kv,key-value,kv store,store,key-value store,lucid kv store,http,rest api,http kv store,key-value as a service\" />\n<meta name=\"robots\" content=\"index, follow\" />\n<meta name=\"language\" content=\"English\" />\n<meta name=\"author\" content=\"https://github.com/lucid-kv\" />\n<meta name=\"twitter:site\" content=\"lucid_kv\" />\n<meta name=\"twitter:title\" content=\"Lucid KV\" />\n<meta name=\"twitter:description\" content=\"Lucid is currently in a development stage but we want to achieve a fast, secure and distributed key-value store accessible through an HTTP API, we also want to propose persistence, encryption, WebSocket streaming, replication and a lot of features. 🦀\" />\n<meta name=\"twitter:image\" content=\"https://lucid-kv.store/preview.jpg\" />\n<meta name=\"twitter:card\" content=\"summary_large_image\" />\n<meta property=\"og:title\" content=\"Lucid KV\" />\n<meta property=\"og:description\" content=\"Lucid is currently in a development stage but we want to achieve a fast, secure and distributed key-value store accessible through an HTTP API, we also want to propose persistence, encryption, WebSocket streaming, replication and a lot of features. 🦀\" />\n<meta property=\"og:image\" content=\"https://image\" />\n<meta property=\"og:url\" content=\"https://lucid-kv.store\" />\n<meta property=\"og:site_name\" content=\"Lucid KV\" />\n<meta property=\"og:type\" content=\"article\" />\n<link rel=\"icon\" type=\"image/png\" href=\"https://avatars3.githubusercontent.com/u/56896360\" />\n<title>Lucid KV | High performance and distributed KV store w/ REST API. 🦀</title>\n<style>\nbody {\n    background-color: #FFFFFF;\n    font-family: \"Inter UI\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n    margin: 0;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #1d1b26;\n    text-align: left;\n}\n\n.showcase {\n    font-family: 'Noto Sans', sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    height: 95vh;\n}\n\n.showcase img {\n    height: 30vh;\n    -webkit-filter: drop-shadow(5px 5px 5px rgba(17, 24, 20, .21));\n    filter: drop-shadow(5px 5px 5px rgba(17, 24, 20, .21));\n    animation: float 6s ease-in-out infinite;\n}\n\n.showcase h1 {\n    font-weight: 900;\n    font-size: 60pt;\n    margin: 20px 20px 0;\n}\n\n.showcase h2 {\n    font-size: 30pt;\n    margin: 0;\n    font-weight: 400;\n}\n\n.showcase p {\n    font-size: 17pt;\n    text-align: center;\n}\n\n.showcase div {\n    margin-top: 30px;\n}\n\n.btn {\n    border: 1px solid #1d1b26;\n    padding: 12px 15px;\n    color: #1d1b26;\n    text-decoration: none;\n    border-radius: 3px;\n    margin-top: 15px;\n    text-align: center;\n}\n\n.btn.fill {\n    background-color: #1d1b26;\n    color: #FFFFFF;\n}\n\n.showcase .btn:not(.fill)\n{\n    margin-left: 10px;\n}\n\n@keyframes float {\n    0% {\n        -webkit-transform: translatey(0px);\n        transform: translatey(0px);\n    }\n\n    50% {\n        -webkit-transform: translatey(-20px);\n        transform: translatey(-20px);\n    }\n\n    100% {\n        -webkit-transform: translatey(0px);\n        transform: translatey(0px);\n    }\n}\n\n@media (max-width: 991px) {\n    .showcase {\n        height: 100vh;\n    }\n\n    .showcase img {\n        height: initial;\n        width: 60vw;\n    }\n\n    .showcase h1 {\n        font-size: 40pt;\n    }\n\n    .showcase p {\n        font-size: 12pt;\n        padding: 0 20px;\n    }\n\n    .showcase div {\n        display: flex;\n        margin-top: initial;\n        flex-direction: column;\n    }\n\n    .showcase .btn:not(.fill)\n    {\n        margin-left: initial;\n    }\n}\n</style>\n</head>\n<body>\n<div class=\"showcase\">\n    <a href=\"https://github.com/lucid-kv/lucid\" target=\"_blank\">\n        <img src=\"https://avatars3.githubusercontent.com/u/56896360\" alt=\"lucid-kv logo\" />\n    </a>\n    <h1>Lucid KV</h1>\n    <p>Lucid is an high performance and distributed KV store<br />accessible through an HTTP API. 🦀</p>\n    <div>\n        <a class=\"btn fill\" href=\"https://medium.com/@clintnetwork/lucid-an-http-key-value-store-c0e734586e26\"><i class=\"fas fa-info-circle\"></i>&nbsp; Read About Lucid KV</a>\n        <a class=\"btn \" href=\"https://docs.lucid-kv.store/\"><i class=\"fas fa-book\"></i>&nbsp; Official Documentation</a>\n    </div>\n</div>\n</body>\n</html>\n";
        return;
    }
}

fn routes_filter::{closure#3}(_1: &{closure@src/server.rs:181:29: 181:36}) -> warp::reply::Html<&str> {
    let mut _0: warp::reply::Html<&str>;

    bb0: {
        _0 = html::<&str>(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn routes_filter::{closure#4}(_1: &{closure@src/server.rs:186:30: 186:32}) -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "User-agent: *\nDisallow: /api";
        return;
    }
}

fn routes_filter::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/warp-0.2.3/src/filters/path.rs:571:18: 571:23>::clone(_1: &routes_filter::__StaticPath) -> routes_filter::__StaticPath {
    debug self => _1;
    let mut _0: server::routes_filter::__StaticPath;

    bb0: {
        return;
    }
}

fn routes_filter::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/warp-0.2.3/src/filters/path.rs:573:9: 573:57>::as_ref(_1: &routes_filter::__StaticPath) -> &str {
    debug self => _1;
    let mut _0: &str;
    let _2: &&str;

    bb0: {
        _2 = const {alloc39: &&str};
        _0 = deref_copy (*_2);
        return;
    }
}

alloc39 (static: <routes_filter::__StaticPath as AsRef<str>>::as_ref::S, size: 16, align: 8) {
    ╾───alloc1069<imm>────╼ 06 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1069 (size: 6, align: 1) {
    68 65 61 6c 74 68                               │ health
}

static routes_filter::<impl at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/warp-0.2.3/src/filters/path.rs:573:9: 573:57>::as_ref::S: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "health";
        return;
    }
}

fn routes_filter::{closure#5}(_1: &{closure@src/server.rs:193:14: 193:16}) -> StatusCode {
    let mut _0: warp::http::StatusCode;

    bb0: {
        _0 = const _;
        return;
    }
}

fn routes_filter::{closure#6}(_1: &{closure@src/server.rs:200:14: 200:60}, _2: Arc<tokio::sync::broadcast::Sender<SseMessage>>) -> sse::SseReply<sse::SseKeepAlive<stream::filter_map::FilterMap<tokio::sync::broadcast::Receiver<SseMessage>, {closure@src/server.rs:433:25: 433:35}>>> {
    debug event_tx => _2;
    let mut _0: warp::sse::SseReply<warp::sse::SseKeepAlive<tokio::stream::filter_map::FilterMap<tokio::sync::broadcast::Receiver<server::SseMessage>, {closure@src/server.rs:433:25: 433:35}>>>;
    let _3: tokio::stream::filter_map::FilterMap<tokio::sync::broadcast::Receiver<server::SseMessage>, {closure@src/server.rs:433:25: 433:35}>;
    let mut _4: tokio::sync::broadcast::Receiver<server::SseMessage>;
    let _5: &tokio::sync::broadcast::Sender<server::SseMessage>;
    let mut _6: &std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>;
    let mut _7: warp::sse::SseKeepAlive<tokio::stream::filter_map::FilterMap<tokio::sync::broadcast::Receiver<server::SseMessage>, {closure@src/server.rs:433:25: 433:35}>>;
    let mut _8: warp::sse::KeepAlive;
    let mut _9: tokio::stream::filter_map::FilterMap<tokio::sync::broadcast::Receiver<server::SseMessage>, {closure@src/server.rs:433:25: 433:35}>;
    let mut _10: bool;
    scope 1 {
        debug stream => _3;
    }

    bb0: {
        _10 = const false;
        _6 = &_2;
        _5 = <Arc<tokio::sync::broadcast::Sender<SseMessage>> as Deref>::deref(move _6) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _4 = tokio::sync::broadcast::Sender::<SseMessage>::subscribe(_5) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _3 = sse_event_stream(move _4) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _10 = const true;
        _8 = keep_alive() -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _10 = const false;
        _9 = move _3;
        _7 = KeepAlive::stream::<stream::filter_map::FilterMap<tokio::sync::broadcast::Receiver<SseMessage>, {closure@src/server.rs:433:25: 433:35}>>(move _8, move _9) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _0 = warp::sse::reply::<sse::SseKeepAlive<stream::filter_map::FilterMap<tokio::sync::broadcast::Receiver<SseMessage>, {closure@src/server.rs:433:25: 433:35}>>>(move _7) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _10 = const false;
        drop(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_10) -> [0: bb8, otherwise: bb10];
    }
}

fn put_key(_1: Arc<KvStore>, _2: Arc<tokio::sync::broadcast::Sender<SseMessage>>, _3: Arc<std::sync::RwLock<Configuration>>, _4: std::string::String, _5: bytes::Bytes, _6: std::option::Option<std::string::String>) -> {async fn body@src/server.rs:226:36: 268:2} {
    debug store => _1;
    debug event_tx => _2;
    debug config => _3;
    debug key => _4;
    debug body => _5;
    debug mime => _6;
    let mut _0: {async fn body@src/server.rs:226:36: 268:2};

    bb0: {
        _0 = {coroutine@src/server.rs:226:36: 268:2 (#0)} { store: move _1, event_tx: move _2, config: move _3, key: move _4, body: move _5, mime: move _6 };
        return;
    }
}

fn put_key::{closure#0}(_1: Pin<&mut {async fn body@src/server.rs:226:36: 268:2}>, _2: &mut std::task::Context<'_>) -> Poll<Result<WithStatus<warp::reply::Json>, Rejection>> {
    debug _task_context => _2;
    debug store => ((*(_1.0: &mut {async fn body@src/server.rs:226:36: 268:2})).0: std::sync::Arc<kvstore::KvStore>);
    debug event_tx => ((*(_1.0: &mut {async fn body@src/server.rs:226:36: 268:2})).1: std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>);
    debug config => ((*(_1.0: &mut {async fn body@src/server.rs:226:36: 268:2})).2: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
    debug key => ((*(_1.0: &mut {async fn body@src/server.rs:226:36: 268:2})).3: std::string::String);
    debug body => ((*(_1.0: &mut {async fn body@src/server.rs:226:36: 268:2})).4: bytes::Bytes);
    debug mime => ((*(_1.0: &mut {async fn body@src/server.rs:226:36: 268:2})).5: std::option::Option<std::string::String>);
    let mut _0: std::task::Poll<std::result::Result<warp::reply::WithStatus<warp::reply::Json>, warp::Rejection>>;
    let _3: std::sync::Arc<kvstore::KvStore>;
    let mut _9: usize;
    let mut _10: &bytes::Bytes;
    let mut _11: warp::Rejection;
    let mut _12: server::Error;
    let mut _13: bool;
    let mut _14: u64;
    let mut _15: usize;
    let _16: &[u8];
    let mut _17: &bytes::Bytes;
    let mut _18: u64;
    let mut _19: &configuration::Configuration;
    let mut _20: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let _21: std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _22: std::result::Result<std::sync::RwLockReadGuard<'_, configuration::Configuration>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, configuration::Configuration>>>;
    let _23: &std::sync::RwLock<configuration::Configuration>;
    let mut _24: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _25: warp::Rejection;
    let mut _26: server::Error;
    let mut _27: u64;
    let mut _28: &configuration::Configuration;
    let mut _29: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let _30: std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _31: std::result::Result<std::sync::RwLockReadGuard<'_, configuration::Configuration>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, configuration::Configuration>>>;
    let _32: &std::sync::RwLock<configuration::Configuration>;
    let mut _33: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _34: std::option::Option<kvstore::KvElement>;
    let _35: &kvstore::KvStore;
    let mut _36: &std::sync::Arc<kvstore::KvStore>;
    let mut _37: std::string::String;
    let mut _38: &std::string::String;
    let mut _39: std::vec::Vec<u8>;
    let _40: &[u8];
    let mut _41: &bytes::Bytes;
    let mut _42: std::option::Option<std::string::String>;
    let mut _43: isize;
    let mut _45: bool;
    let mut _46: warp::reply::WithStatus<warp::reply::Json>;
    let mut _47: warp::reply::Json;
    let _48: &server::JsonMessage;
    let _49: server::JsonMessage;
    let mut _50: std::string::String;
    let _51: &str;
    let mut _52: bool;
    let mut _53: &configuration::Configuration;
    let mut _54: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let _55: std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _56: std::result::Result<std::sync::RwLockReadGuard<'_, configuration::Configuration>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, configuration::Configuration>>>;
    let _57: &std::sync::RwLock<configuration::Configuration>;
    let mut _58: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _59: std::result::Result<std::string::String, std::string::FromUtf8Error>;
    let mut _60: std::vec::Vec<u8>;
    let _61: &[u8];
    let _62: &bytes::Bytes;
    let mut _63: isize;
    let _65: std::option::Option<usize>;
    let mut _66: std::result::Result<usize, ()>;
    let mut _67: std::result::Result<usize, tokio::sync::broadcast::SendError<server::SseMessage>>;
    let _68: &tokio::sync::broadcast::Sender<server::SseMessage>;
    let mut _69: &std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>;
    let mut _70: server::SseMessage;
    let mut _71: std::string::String;
    let mut _72: &std::string::String;
    let mut _73: std::string::String;
    let mut _74: {closure@src/server.rs:250:46: 250:53};
    let mut _77: bool;
    let mut _78: &log::Level;
    let mut _79: bool;
    let mut _80: &log::Level;
    let mut _81: &log::LevelFilter;
    let _82: log::LevelFilter;
    let _83: ();
    let mut _84: std::fmt::Arguments<'_>;
    let mut _85: &[&str];
    let mut _86: &[core::fmt::rt::Argument<'_>];
    let _87: &[core::fmt::rt::Argument<'_>; 1];
    let _88: [core::fmt::rt::Argument<'_>; 1];
    let mut _89: core::fmt::rt::Argument<'_>;
    let _90: &std::string::FromUtf8Error;
    let mut _91: log::Level;
    let mut _92: warp::reply::WithStatus<warp::reply::Json>;
    let mut _93: warp::reply::Json;
    let _94: &server::JsonMessage;
    let _95: server::JsonMessage;
    let mut _96: std::string::String;
    let _97: &str;
    let mut _98: warp::reply::WithStatus<warp::reply::Json>;
    let mut _99: warp::reply::Json;
    let _100: &server::JsonMessage;
    let _101: server::JsonMessage;
    let mut _102: std::string::String;
    let _103: &str;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: std::result::Result<warp::reply::WithStatus<warp::reply::Json>, warp::Rejection>;
    let mut _111: u32;
    let mut _112: &mut {async fn body@src/server.rs:226:36: 268:2};
    let mut _113: &mut {async fn body@src/server.rs:226:36: 268:2};
    let mut _114: &mut {async fn body@src/server.rs:226:36: 268:2};
    let mut _115: &mut {async fn body@src/server.rs:226:36: 268:2};
    let mut _116: &mut {async fn body@src/server.rs:226:36: 268:2};
    let mut _117: &mut {async fn body@src/server.rs:226:36: 268:2};
    let mut _118: &mut {async fn body@src/server.rs:226:36: 268:2};
    let mut _119: &mut {async fn body@src/server.rs:226:36: 268:2};
    let mut _120: &mut {async fn body@src/server.rs:226:36: 268:2};
    scope 1 {
        debug store => _3;
        let _4: std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>;
        scope 2 {
            debug event_tx => _4;
            let _5: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
            scope 3 {
                debug config => _5;
                let _6: std::string::String;
                scope 4 {
                    debug key => _6;
                    let _7: bytes::Bytes;
                    scope 5 {
                        debug body => _7;
                        let _8: std::option::Option<std::string::String>;
                        scope 6 {
                            debug mime => _8;
                            let _44: kvstore::KvElement;
                            scope 7 {
                                debug kv_element => _44;
                                let _64: std::string::String;
                                let _75: std::string::FromUtf8Error;
                                scope 8 {
                                    debug byte_to_string => _64;
                                }
                                scope 9 {
                                    debug error => _75;
                                    let _76: log::Level;
                                    scope 10 {
                                        debug lvl => _76;
                                        let mut _104: &(&str, &str, &str, u32);
                                        let mut _105: &[&str; 1];
                                        let mut _106: &log::LevelFilter;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _112 = deref_copy (_1.0: &mut {async fn body@src/server.rs:226:36: 268:2});
        _111 = discriminant((*_112));
        switchInt(move _111) -> [0: bb1, 1: bb98, 2: bb97, otherwise: bb26];
    }

    bb1: {
        _107 = const false;
        _109 = const false;
        _108 = const false;
        _113 = deref_copy (_1.0: &mut {async fn body@src/server.rs:226:36: 268:2});
        _3 = move ((*_113).0: std::sync::Arc<kvstore::KvStore>);
        _114 = deref_copy (_1.0: &mut {async fn body@src/server.rs:226:36: 268:2});
        _4 = move ((*_114).1: std::sync::Arc<tokio::sync::broadcast::Sender<server::SseMessage>>);
        _115 = deref_copy (_1.0: &mut {async fn body@src/server.rs:226:36: 268:2});
        _5 = move ((*_115).2: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
        _116 = deref_copy (_1.0: &mut {async fn body@src/server.rs:226:36: 268:2});
        _6 = move ((*_116).3: std::string::String);
        _117 = deref_copy (_1.0: &mut {async fn body@src/server.rs:226:36: 268:2});
        _7 = move ((*_117).4: bytes::Bytes);
        _107 = const true;
        _118 = deref_copy (_1.0: &mut {async fn body@src/server.rs:226:36: 268:2});
        _8 = move ((*_118).5: std::option::Option<std::string::String>);
        _10 = &_7;
        _9 = <bytes::Bytes as Buf>::remaining(move _10) -> [return: bb2, unwind: bb86];
    }

    bb2: {
        switchInt(move _9) -> [0: bb3, otherwise: bb5];
    }

    bb3: {
        _12 = server::Error::MissingBody;
        _11 = warp::reject::custom::<server::Error>(move _12) -> [return: bb4, unwind: bb86];
    }

    bb4: {
        _110 = Result::<WithStatus<warp::reply::Json>, Rejection>::Err(move _11);
        goto -> bb66;
    }

    bb5: {
        _17 = &_7;
        _16 = <bytes::Bytes as Buf>::bytes(move _17) -> [return: bb6, unwind: bb86];
    }

    bb6: {
        _15 = Len((*_16));
        _14 = move _15 as u64 (IntToInt);
        _24 = &_5;
        _23 = <Arc<std::sync::RwLock<Configuration>> as Deref>::deref(move _24) -> [return: bb7, unwind: bb86];
    }

    bb7: {
        _22 = std::sync::RwLock::<Configuration>::read(_23) -> [return: bb8, unwind: bb86];
    }

    bb8: {
        _21 = Result::<std::sync::RwLockReadGuard<'_, Configuration>, PoisonError<std::sync::RwLockReadGuard<'_, Configuration>>>::unwrap(move _22) -> [return: bb9, unwind: bb86];
    }

    bb9: {
        _20 = &_21;
        _19 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _20) -> [return: bb10, unwind: bb85];
    }

    bb10: {
        _18 = (((*_19).6: configuration::Store).0: u64);
        _13 = Gt(move _14, move _18);
        switchInt(move _13) -> [0: bb18, otherwise: bb11];
    }

    bb11: {
        drop(_21) -> [return: bb12, unwind: bb86];
    }

    bb12: {
        _33 = &_5;
        _32 = <Arc<std::sync::RwLock<Configuration>> as Deref>::deref(move _33) -> [return: bb13, unwind: bb86];
    }

    bb13: {
        _31 = std::sync::RwLock::<Configuration>::read(_32) -> [return: bb14, unwind: bb86];
    }

    bb14: {
        _30 = Result::<std::sync::RwLockReadGuard<'_, Configuration>, PoisonError<std::sync::RwLockReadGuard<'_, Configuration>>>::unwrap(move _31) -> [return: bb15, unwind: bb86];
    }

    bb15: {
        _29 = &_30;
        _28 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _29) -> [return: bb16, unwind: bb84];
    }

    bb16: {
        _27 = (((*_28).6: configuration::Store).0: u64);
        _26 = server::Error::ValueSizeLimit { max_limit: move _27 };
        _25 = warp::reject::custom::<server::Error>(move _26) -> [return: bb17, unwind: bb84];
    }

    bb17: {
        _110 = Result::<WithStatus<warp::reply::Json>, Rejection>::Err(move _25);
        drop(_30) -> [return: bb66, unwind: bb86];
    }

    bb18: {
        drop(_21) -> [return: bb19, unwind: bb86];
    }

    bb19: {
        _36 = &_3;
        _35 = <Arc<KvStore> as Deref>::deref(move _36) -> [return: bb20, unwind: bb86];
    }

    bb20: {
        _38 = &_6;
        _37 = <std::string::String as Clone>::clone(move _38) -> [return: bb21, unwind: bb83];
    }

    bb21: {
        _109 = const true;
        _41 = &_7;
        _40 = <bytes::Bytes as Deref>::deref(move _41) -> [return: bb22, unwind: bb81];
    }

    bb22: {
        _39 = std::slice::<impl [u8]>::to_vec(_40) -> [return: bb23, unwind: bb81];
    }

    bb23: {
        _107 = const false;
        _42 = move _8;
        _109 = const false;
        _34 = KvStore::set(_35, move _37, move _39, move _42) -> [return: bb24, unwind: bb81];
    }

    bb24: {
        _109 = const false;
        _43 = discriminant(_34);
        switchInt(move _43) -> [0: bb25, 1: bb27, otherwise: bb26];
    }

    bb25: {
        _103 = const "The specified key was successfully created.";
        _102 = <str as ToString>::to_string(_103) -> [return: bb63, unwind: bb86];
    }

    bb26: {
        unreachable;
    }

    bb27: {
        _44 = move ((_34 as Some).0: kvstore::KvElement);
        _45 = (_44.6: bool);
        switchInt(move _45) -> [0: bb32, otherwise: bb28];
    }

    bb28: {
        _51 = const "The specified key cannot be updated, it is currently locked.";
        _50 = <str as ToString>::to_string(_51) -> [return: bb29, unwind: bb80];
    }

    bb29: {
        _49 = JsonMessage { message: move _50 };
        _48 = &_49;
        _47 = warp::reply::json::<JsonMessage>(_48) -> [return: bb30, unwind: bb79];
    }

    bb30: {
        _46 = with_status::<warp::reply::Json>(move _47, const _) -> [return: bb31, unwind: bb79];
    }

    bb31: {
        _110 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _46);
        drop(_49) -> [return: bb62, unwind: bb80];
    }

    bb32: {
        _58 = &_5;
        _57 = <Arc<std::sync::RwLock<Configuration>> as Deref>::deref(move _58) -> [return: bb33, unwind: bb80];
    }

    bb33: {
        _56 = std::sync::RwLock::<Configuration>::read(_57) -> [return: bb34, unwind: bb80];
    }

    bb34: {
        _55 = Result::<std::sync::RwLockReadGuard<'_, Configuration>, PoisonError<std::sync::RwLockReadGuard<'_, Configuration>>>::unwrap(move _56) -> [return: bb35, unwind: bb80];
    }

    bb35: {
        _54 = &_55;
        _53 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _54) -> [return: bb36, unwind: bb78];
    }

    bb36: {
        _52 = (((*_53).4: configuration::ServerSentEvent).0: bool);
        switchInt(move _52) -> [0: bb57, otherwise: bb37];
    }

    bb37: {
        drop(_55) -> [return: bb38, unwind: bb80];
    }

    bb38: {
        _62 = &_7;
        _61 = <bytes::Bytes as Buf>::bytes(_62) -> [return: bb39, unwind: bb80];
    }

    bb39: {
        _60 = std::slice::<impl [u8]>::to_vec(_61) -> [return: bb40, unwind: bb80];
    }

    bb40: {
        _59 = std::string::String::from_utf8(move _60) -> [return: bb41, unwind: bb80];
    }

    bb41: {
        _63 = discriminant(_59);
        switchInt(move _63) -> [0: bb43, 1: bb42, otherwise: bb26];
    }

    bb42: {
        _75 = move ((_59 as Err).0: std::string::FromUtf8Error);
        _76 = log::Level::Warn;
        _78 = &_76;
        _106 = const _;
        _77 = <Level as PartialOrd<LevelFilter>>::le(move _78, _106) -> [return: bb49, unwind: bb75];
    }

    bb43: {
        _108 = const true;
        _64 = move ((_59 as Ok).0: std::string::String);
        _69 = &_4;
        _68 = <Arc<tokio::sync::broadcast::Sender<SseMessage>> as Deref>::deref(move _69) -> [return: bb44, unwind: bb76];
    }

    bb44: {
        _72 = &_6;
        _71 = <std::string::String as Clone>::clone(move _72) -> [return: bb45, unwind: bb76];
    }

    bb45: {
        _108 = const false;
        _73 = move _64;
        _70 = SseMessage { key: move _71, value: move _73 };
        _67 = tokio::sync::broadcast::Sender::<SseMessage>::send(_68, move _70) -> [return: bb46, unwind: bb76];
    }

    bb46: {
        _74 = {closure@src/server.rs:250:46: 250:53};
        _66 = Result::<usize, tokio::sync::broadcast::SendError<SseMessage>>::map_err::<(), {closure@src/server.rs:250:46: 250:53}>(move _67, move _74) -> [return: bb47, unwind: bb76];
    }

    bb47: {
        _65 = Result::<usize, ()>::ok(move _66) -> [return: bb48, unwind: bb76];
    }

    bb48: {
        _108 = const false;
        goto -> bb58;
    }

    bb49: {
        switchInt(move _77) -> [0: bb56, otherwise: bb50];
    }

    bb50: {
        _80 = &_76;
        _82 = max_level() -> [return: bb51, unwind: bb75];
    }

    bb51: {
        _81 = &_82;
        _79 = <Level as PartialOrd<LevelFilter>>::le(move _80, move _81) -> [return: bb52, unwind: bb75];
    }

    bb52: {
        switchInt(move _79) -> [0: bb56, otherwise: bb53];
    }

    bb53: {
        _105 = const _;
        _85 = _105 as &[&str] (PointerCoercion(Unsize));
        _90 = &_75;
        _89 = core::fmt::rt::Argument::<'_>::new_display::<FromUtf8Error>(_90) -> [return: bb54, unwind: bb75];
    }

    bb54: {
        _88 = [move _89];
        _87 = &_88;
        _86 = _87 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _84 = Arguments::<'_>::new_v1(move _85, move _86) -> [return: bb55, unwind: bb75];
    }

    bb55: {
        _91 = _76;
        _104 = const _;
        _83 = __private_api_log(move _84, move _91, _104) -> [return: bb99, unwind: bb75];
    }

    bb56: {
        drop(_75) -> [return: bb58, unwind: bb80];
    }

    bb57: {
        drop(_55) -> [return: bb58, unwind: bb80];
    }

    bb58: {
        _97 = const "The specified key was successfully updated.";
        _96 = <str as ToString>::to_string(_97) -> [return: bb59, unwind: bb80];
    }

    bb59: {
        _95 = JsonMessage { message: move _96 };
        _94 = &_95;
        _93 = warp::reply::json::<JsonMessage>(_94) -> [return: bb60, unwind: bb74];
    }

    bb60: {
        _92 = with_status::<warp::reply::Json>(move _93, const _) -> [return: bb61, unwind: bb74];
    }

    bb61: {
        _110 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _92);
        drop(_95) -> [return: bb62, unwind: bb80];
    }

    bb62: {
        drop(_44) -> [return: bb66, unwind: bb86];
    }

    bb63: {
        _101 = JsonMessage { message: move _102 };
        _100 = &_101;
        _99 = warp::reply::json::<JsonMessage>(_100) -> [return: bb64, unwind: bb73];
    }

    bb64: {
        _98 = with_status::<warp::reply::Json>(move _99, const _) -> [return: bb65, unwind: bb73];
    }

    bb65: {
        _110 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _98);
        drop(_101) -> [return: bb66, unwind: bb86];
    }

    bb66: {
        switchInt(_107) -> [0: bb67, otherwise: bb93];
    }

    bb67: {
        _107 = const false;
        drop(_7) -> [return: bb68, unwind: bb88];
    }

    bb68: {
        drop(_6) -> [return: bb69, unwind: bb89];
    }

    bb69: {
        drop(_5) -> [return: bb70, unwind: bb90];
    }

    bb70: {
        drop(_4) -> [return: bb71, unwind: bb91];
    }

    bb71: {
        drop(_3) -> [return: bb72, unwind: bb92];
    }

    bb72: {
        _0 = Poll::<Result<WithStatus<warp::reply::Json>, Rejection>>::Ready(move _110);
        _119 = deref_copy (_1.0: &mut {async fn body@src/server.rs:226:36: 268:2});
        discriminant((*_119)) = 1;
        return;
    }

    bb73 (cleanup): {
        drop(_101) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_95) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_75) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_108) -> [0: bb77, otherwise: bb94];
    }

    bb77 (cleanup): {
        _108 = const false;
        goto -> bb80;
    }

    bb78 (cleanup): {
        drop(_55) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_49) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_44) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_109) -> [0: bb82, otherwise: bb95];
    }

    bb82 (cleanup): {
        _109 = const false;
        goto -> bb86;
    }

    bb83 (cleanup): {
        _109 = const false;
        goto -> bb86;
    }

    bb84 (cleanup): {
        drop(_30) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_21) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_107) -> [0: bb87, otherwise: bb96];
    }

    bb87 (cleanup): {
        _107 = const false;
        drop(_7) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_6) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_5) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_4) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_3) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        _120 = deref_copy (_1.0: &mut {async fn body@src/server.rs:226:36: 268:2});
        discriminant((*_120)) = 2;
        resume;
    }

    bb93: {
        drop(_8) -> [return: bb67, unwind: bb87];
    }

    bb94 (cleanup): {
        drop(_64) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_37) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_8) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb97: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb97, unwind continue];
    }

    bb98: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb98, unwind continue];
    }

    bb99: {
        goto -> bb56;
    }
}

promoted[0] in put_key::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid::server";
        _2 = &(*_3);
        _1 = (move _2, const "lucid::server", const "src/server.rs", const 255_u32);
        _0 = &_1;
        return;
    }
}

promoted[1] in put_key::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unable to broadcast binary data, "];
        _0 = &_1;
        return;
    }
}

promoted[2] in put_key::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn put_key::{closure#0}::{closure#0}(_1: {closure@src/server.rs:250:46: 250:53}, _2: tokio::sync::broadcast::SendError<SseMessage>) -> () {
    debug error => _2;
    let mut _0: ();
    let _3: log::Level;
    let mut _4: bool;
    let mut _5: &log::Level;
    let mut _6: bool;
    let mut _7: &log::Level;
    let mut _8: &log::LevelFilter;
    let _9: log::LevelFilter;
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &&std::string::String;
    let _18: &std::string::String;
    let mut _19: log::Level;
    scope 1 {
        debug lvl => _3;
        let mut _20: &(&str, &str, &str, u32);
        let mut _21: &[&str; 1];
        let mut _22: &log::LevelFilter;
    }

    bb0: {
        _3 = log::Level::Error;
        _5 = &_3;
        _22 = const _;
        _4 = <Level as PartialOrd<LevelFilter>>::le(move _5, _22) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        switchInt(move _4) -> [0: bb8, otherwise: bb2];
    }

    bb2: {
        _7 = &_3;
        _9 = max_level() -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _8 = &_9;
        _6 = <Level as PartialOrd<LevelFilter>>::le(move _7, move _8) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        switchInt(move _6) -> [0: bb8, otherwise: bb5];
    }

    bb5: {
        _21 = const _;
        _12 = _21 as &[&str] (PointerCoercion(Unsize));
        _18 = &((_2.0: server::SseMessage).0: std::string::String);
        _17 = &_18;
        _16 = core::fmt::rt::Argument::<'_>::new_debug::<&std::string::String>(_17) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _19 = _3;
        _20 = const _;
        _10 = __private_api_log(move _11, move _19, _20) -> [return: bb12, unwind: bb10];
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb8;
    }
}

promoted[0] in put_key::{closure#0}::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid::server";
        _2 = &(*_3);
        _1 = (move _2, const "lucid::server", const "src/server.rs", const 251_u32);
        _0 = &_1;
        return;
    }
}

promoted[1] in put_key::{closure#0}::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unable to broadcast this key: "];
        _0 = &_1;
        return;
    }
}

promoted[2] in put_key::{closure#0}::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn get_key(_1: Arc<KvStore>, _2: std::string::String) -> {async fn body@src/server.rs:270:85: 277:2} {
    debug store => _1;
    debug key => _2;
    let mut _0: {async fn body@src/server.rs:270:85: 277:2};

    bb0: {
        _0 = {coroutine@src/server.rs:270:85: 277:2 (#0)} { store: move _1, key: move _2 };
        return;
    }
}

fn get_key::{closure#0}(_1: Pin<&mut {async fn body@src/server.rs:270:85: 277:2}>, _2: &mut std::task::Context<'_>) -> Poll<Result<Result<Response<Vec<u8>>, warp::http::Error>, Rejection>> {
    debug _task_context => _2;
    debug store => ((*(_1.0: &mut {async fn body@src/server.rs:270:85: 277:2})).0: std::sync::Arc<kvstore::KvStore>);
    debug key => ((*(_1.0: &mut {async fn body@src/server.rs:270:85: 277:2})).1: std::string::String);
    let mut _0: std::task::Poll<std::result::Result<std::result::Result<warp::http::Response<std::vec::Vec<u8>>, warp::http::Error>, warp::Rejection>>;
    let _3: std::sync::Arc<kvstore::KvStore>;
    let mut _5: std::option::Option<kvstore::KvElement>;
    let _6: &kvstore::KvStore;
    let mut _7: &std::sync::Arc<kvstore::KvStore>;
    let mut _8: std::string::String;
    let mut _9: isize;
    let mut _11: std::result::Result<warp::http::Response<std::vec::Vec<u8>>, warp::http::Error>;
    let mut _12: warp::http::response::Builder;
    let mut _13: warp::http::response::Builder;
    let mut _14: std::string::String;
    let mut _15: std::vec::Vec<u8>;
    let mut _16: warp::Rejection;
    let mut _17: server::Error;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: std::result::Result<std::result::Result<warp::http::Response<std::vec::Vec<u8>>, warp::http::Error>, warp::Rejection>;
    let mut _22: u32;
    let mut _23: &mut {async fn body@src/server.rs:270:85: 277:2};
    let mut _24: &mut {async fn body@src/server.rs:270:85: 277:2};
    let mut _25: &mut {async fn body@src/server.rs:270:85: 277:2};
    let mut _26: &mut {async fn body@src/server.rs:270:85: 277:2};
    let mut _27: &mut {async fn body@src/server.rs:270:85: 277:2};
    scope 1 {
        debug store => _3;
        let _4: std::string::String;
        scope 2 {
            debug key => _4;
            let _10: kvstore::KvElement;
            scope 3 {
                debug value => _10;
            }
        }
    }

    bb0: {
        _23 = deref_copy (_1.0: &mut {async fn body@src/server.rs:270:85: 277:2});
        _22 = discriminant((*_23));
        switchInt(move _22) -> [0: bb1, 1: bb23, 2: bb22, otherwise: bb5];
    }

    bb1: {
        _20 = const false;
        _19 = const false;
        _18 = const false;
        _24 = deref_copy (_1.0: &mut {async fn body@src/server.rs:270:85: 277:2});
        _3 = move ((*_24).0: std::sync::Arc<kvstore::KvStore>);
        _20 = const true;
        _25 = deref_copy (_1.0: &mut {async fn body@src/server.rs:270:85: 277:2});
        _4 = move ((*_25).1: std::string::String);
        _7 = &_3;
        _6 = <Arc<KvStore> as Deref>::deref(move _7) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _20 = const false;
        _8 = move _4;
        _5 = KvStore::get(_6, move _8) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _17 = server::Error::KeyNotFound;
        _16 = warp::reject::custom::<server::Error>(move _17) -> [return: bb10, unwind: bb15];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _18 = const true;
        _19 = const true;
        _10 = move ((_5 as Some).0: kvstore::KvElement);
        _13 = Response::<()>::builder() -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _19 = const false;
        _14 = move (_10.1: std::string::String);
        _12 = warp::http::response::Builder::header::<&str, std::string::String>(move _13, const "Content-Type", move _14) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _18 = const false;
        _15 = move (_10.0: std::vec::Vec<u8>);
        _11 = warp::http::response::Builder::body::<Vec<u8>>(move _12, move _15) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _21 = Result::<Result<Response<Vec<u8>>, warp::http::Error>, Rejection>::Ok(move _11);
        _18 = const false;
        _19 = const false;
        goto -> bb11;
    }

    bb10: {
        _21 = Result::<Result<Response<Vec<u8>>, warp::http::Error>, Rejection>::Err(move _16);
        goto -> bb11;
    }

    bb11: {
        _20 = const false;
        drop(_3) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _0 = Poll::<Result<Result<Response<Vec<u8>>, warp::http::Error>, Rejection>>::Ready(move _21);
        _26 = deref_copy (_1.0: &mut {async fn body@src/server.rs:270:85: 277:2});
        discriminant((*_26)) = 1;
        return;
    }

    bb13 (cleanup): {
        switchInt(_18) -> [0: bb18, otherwise: bb20];
    }

    bb14 (cleanup): {
        _18 = const false;
        _19 = const false;
        goto -> bb15;
    }

    bb15 (cleanup): {
        switchInt(_20) -> [0: bb16, otherwise: bb21];
    }

    bb16 (cleanup): {
        _20 = const false;
        drop(_3) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@src/server.rs:270:85: 277:2});
        discriminant((*_27)) = 2;
        resume;
    }

    bb18 (cleanup): {
        switchInt(_19) -> [0: bb14, otherwise: bb19];
    }

    bb19 (cleanup): {
        drop((_10.1: std::string::String)) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop((_10.0: std::vec::Vec<u8>)) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_4) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb22: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb22, unwind continue];
    }

    bb23: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb23, unwind continue];
    }
}

fn find_key(_1: Arc<KvStore>, _2: std::string::String) -> {async fn body@src/server.rs:279:86: 288:2} {
    debug store => _1;
    debug key => _2;
    let mut _0: {async fn body@src/server.rs:279:86: 288:2};

    bb0: {
        _0 = {coroutine@src/server.rs:279:86: 288:2 (#0)} { store: move _1, key: move _2 };
        return;
    }
}

fn find_key::{closure#0}(_1: Pin<&mut {async fn body@src/server.rs:279:86: 288:2}>, _2: &mut std::task::Context<'_>) -> Poll<Result<Response<&str>, Rejection>> {
    debug _task_context => _2;
    debug store => ((*(_1.0: &mut {async fn body@src/server.rs:279:86: 288:2})).0: std::sync::Arc<kvstore::KvStore>);
    debug key => ((*(_1.0: &mut {async fn body@src/server.rs:279:86: 288:2})).1: std::string::String);
    let mut _0: std::task::Poll<std::result::Result<warp::http::Response<&str>, warp::Rejection>>;
    let _3: std::sync::Arc<kvstore::KvStore>;
    let mut _5: std::option::Option<kvstore::KvElement>;
    let _6: &kvstore::KvStore;
    let mut _7: &std::sync::Arc<kvstore::KvStore>;
    let mut _8: std::string::String;
    let mut _9: isize;
    let mut _11: warp::http::Response<&str>;
    let mut _12: std::result::Result<warp::http::Response<&str>, warp::http::Error>;
    let mut _13: warp::http::response::Builder;
    let mut _14: warp::http::response::Builder;
    let mut _15: warp::http::response::Builder;
    let mut _16: std::string::String;
    let mut _17: warp::Rejection;
    let mut _18: server::Error;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: std::result::Result<warp::http::Response<&str>, warp::Rejection>;
    let mut _22: u32;
    let mut _23: &mut {async fn body@src/server.rs:279:86: 288:2};
    let mut _24: &mut {async fn body@src/server.rs:279:86: 288:2};
    let mut _25: &mut {async fn body@src/server.rs:279:86: 288:2};
    let mut _26: &mut {async fn body@src/server.rs:279:86: 288:2};
    let mut _27: &mut {async fn body@src/server.rs:279:86: 288:2};
    scope 1 {
        debug store => _3;
        let _4: std::string::String;
        scope 2 {
            debug key => _4;
            let _10: kvstore::KvElement;
            scope 3 {
                debug value => _10;
            }
        }
    }

    bb0: {
        _23 = deref_copy (_1.0: &mut {async fn body@src/server.rs:279:86: 288:2});
        _22 = discriminant((*_23));
        switchInt(move _22) -> [0: bb1, 1: bb25, 2: bb24, otherwise: bb5];
    }

    bb1: {
        _20 = const false;
        _19 = const false;
        _24 = deref_copy (_1.0: &mut {async fn body@src/server.rs:279:86: 288:2});
        _3 = move ((*_24).0: std::sync::Arc<kvstore::KvStore>);
        _20 = const true;
        _25 = deref_copy (_1.0: &mut {async fn body@src/server.rs:279:86: 288:2});
        _4 = move ((*_25).1: std::string::String);
        _7 = &_3;
        _6 = <Arc<KvStore> as Deref>::deref(move _7) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _20 = const false;
        _8 = move _4;
        _5 = KvStore::get(_6, move _8) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _18 = server::Error::KeyNotFound;
        _17 = warp::reject::custom::<server::Error>(move _18) -> [return: bb12, unwind: bb16];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _19 = const true;
        _10 = move ((_5 as Some).0: kvstore::KvElement);
        _15 = Response::<()>::builder() -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _14 = warp::http::response::Builder::status::<StatusCode>(move _15, const _) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _19 = const false;
        _16 = move (_10.1: std::string::String);
        _13 = warp::http::response::Builder::header::<&str, std::string::String>(move _14, const "Content-Type", move _16) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _12 = warp::http::response::Builder::body::<&str>(move _13, const "") -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _11 = Result::<Response<&str>, warp::http::Error>::unwrap(move _12) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _21 = Result::<Response<&str>, Rejection>::Ok(move _11);
        drop((_10.0: std::vec::Vec<u8>)) -> [return: bb19, unwind: bb15];
    }

    bb12: {
        _21 = Result::<Response<&str>, Rejection>::Err(move _17);
        goto -> bb20;
    }

    bb13: {
        _0 = Poll::<Result<Response<&str>, Rejection>>::Ready(move _21);
        _26 = deref_copy (_1.0: &mut {async fn body@src/server.rs:279:86: 288:2});
        discriminant((*_26)) = 1;
        return;
    }

    bb14 (cleanup): {
        drop((_10.0: std::vec::Vec<u8>)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        _19 = const false;
        goto -> bb16;
    }

    bb16 (cleanup): {
        switchInt(_20) -> [0: bb17, otherwise: bb23];
    }

    bb17 (cleanup): {
        _20 = const false;
        drop(_3) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@src/server.rs:279:86: 288:2});
        discriminant((*_27)) = 2;
        resume;
    }

    bb19: {
        _19 = const false;
        goto -> bb20;
    }

    bb20: {
        _20 = const false;
        drop(_3) -> [return: bb13, unwind: bb18];
    }

    bb21 (cleanup): {
        switchInt(_19) -> [0: bb15, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_10.1: std::string::String)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_4) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb24: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb24, unwind continue];
    }

    bb25: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb25, unwind continue];
    }
}

fn delete_key(_1: Arc<KvStore>, _2: std::string::String) -> {async fn body@src/server.rs:290:88: 300:2} {
    debug store => _1;
    debug key => _2;
    let mut _0: {async fn body@src/server.rs:290:88: 300:2};

    bb0: {
        _0 = {coroutine@src/server.rs:290:88: 300:2 (#0)} { store: move _1, key: move _2 };
        return;
    }
}

fn delete_key::{closure#0}(_1: Pin<&mut {async fn body@src/server.rs:290:88: 300:2}>, _2: &mut std::task::Context<'_>) -> Poll<Result<WithStatus<warp::reply::Json>, Rejection>> {
    debug _task_context => _2;
    debug store => ((*(_1.0: &mut {async fn body@src/server.rs:290:88: 300:2})).0: std::sync::Arc<kvstore::KvStore>);
    debug key => ((*(_1.0: &mut {async fn body@src/server.rs:290:88: 300:2})).1: std::string::String);
    let mut _0: std::task::Poll<std::result::Result<warp::reply::WithStatus<warp::reply::Json>, warp::Rejection>>;
    let _3: std::sync::Arc<kvstore::KvStore>;
    let mut _5: std::option::Option<kvstore::KvElement>;
    let _6: &kvstore::KvStore;
    let mut _7: &std::sync::Arc<kvstore::KvStore>;
    let mut _8: std::string::String;
    let mut _9: &std::string::String;
    let mut _10: isize;
    let _11: ();
    let _12: &kvstore::KvStore;
    let mut _13: &std::sync::Arc<kvstore::KvStore>;
    let mut _14: std::string::String;
    let mut _15: warp::reply::WithStatus<warp::reply::Json>;
    let mut _16: warp::reply::Json;
    let _17: &server::JsonMessage;
    let _18: server::JsonMessage;
    let mut _19: std::string::String;
    let _20: &str;
    let mut _21: warp::Rejection;
    let mut _22: server::Error;
    let mut _23: bool;
    let mut _24: std::result::Result<warp::reply::WithStatus<warp::reply::Json>, warp::Rejection>;
    let mut _25: u32;
    let mut _26: &mut {async fn body@src/server.rs:290:88: 300:2};
    let mut _27: &mut {async fn body@src/server.rs:290:88: 300:2};
    let mut _28: &mut {async fn body@src/server.rs:290:88: 300:2};
    let mut _29: &mut {async fn body@src/server.rs:290:88: 300:2};
    let mut _30: &mut {async fn body@src/server.rs:290:88: 300:2};
    scope 1 {
        debug store => _3;
        let _4: std::string::String;
        scope 2 {
            debug key => _4;
        }
    }

    bb0: {
        _26 = deref_copy (_1.0: &mut {async fn body@src/server.rs:290:88: 300:2});
        _25 = discriminant((*_26));
        switchInt(move _25) -> [0: bb1, 1: bb26, 2: bb25, otherwise: bb6];
    }

    bb1: {
        _23 = const false;
        _27 = deref_copy (_1.0: &mut {async fn body@src/server.rs:290:88: 300:2});
        _3 = move ((*_27).0: std::sync::Arc<kvstore::KvStore>);
        _23 = const true;
        _28 = deref_copy (_1.0: &mut {async fn body@src/server.rs:290:88: 300:2});
        _4 = move ((*_28).1: std::string::String);
        _7 = &_3;
        _6 = <Arc<KvStore> as Deref>::deref(move _7) -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _9 = &_4;
        _8 = <std::string::String as Clone>::clone(move _9) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _5 = KvStore::get(_6, move _8) -> [return: bb4, unwind: bb20];
    }

    bb4: {
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _22 = server::Error::KeyNotFound;
        _21 = warp::reject::custom::<server::Error>(move _22) -> [return: bb13, unwind: bb19];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _13 = &_3;
        _12 = <Arc<KvStore> as Deref>::deref(move _13) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _23 = const false;
        _14 = move _4;
        _11 = KvStore::drop(_12, move _14) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        _20 = const "The specified key and it's data was successfully deleted.";
        _19 = <str as ToString>::to_string(_20) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _18 = JsonMessage { message: move _19 };
        _17 = &_18;
        _16 = warp::reply::json::<JsonMessage>(_17) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _15 = with_status::<warp::reply::Json>(move _16, const _) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        _24 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _15);
        drop(_18) -> [return: bb14, unwind: bb19];
    }

    bb13: {
        _24 = Result::<WithStatus<warp::reply::Json>, Rejection>::Err(move _21);
        goto -> bb14;
    }

    bb14: {
        drop(_5) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        switchInt(_23) -> [0: bb16, otherwise: bb23];
    }

    bb16: {
        _23 = const false;
        drop(_3) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        _0 = Poll::<Result<WithStatus<warp::reply::Json>, Rejection>>::Ready(move _24);
        _29 = deref_copy (_1.0: &mut {async fn body@src/server.rs:290:88: 300:2});
        discriminant((*_29)) = 1;
        return;
    }

    bb18 (cleanup): {
        drop(_18) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_5) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_23) -> [0: bb21, otherwise: bb24];
    }

    bb21 (cleanup): {
        _23 = const false;
        drop(_3) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        _30 = deref_copy (_1.0: &mut {async fn body@src/server.rs:290:88: 300:2});
        discriminant((*_30)) = 2;
        resume;
    }

    bb23: {
        drop(_4) -> [return: bb16, unwind: bb21];
    }

    bb24 (cleanup): {
        drop(_4) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb25, unwind continue];
    }

    bb26: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb26, unwind continue];
    }
}

fn server::<impl at src/server.rs:302:10: 302:15>::fmt(_1: &PatchValue, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::option::Option<std::string::String>;
    let _10: &std::option::Option<std::string::String>;

    bb0: {
        _3 = const "PatchValue";
        _4 = const "operation";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "value";
        _10 = &((*_1).1: std::option::Option<std::string::String>);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const _IMPL_DESERIALIZE_FOR_PatchValue: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize(_1: __D) -> Result<PatchValue, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<server::PatchValue, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Visitor<'_>>(move _1, const "PatchValue", const _, const _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<PatchValue>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::<impl at src/server.rs:302:17: 302:28>::expecting(_1: &_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__FieldVisitor, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::<impl at src/server.rs:302:17: 302:28>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field, __E>;
    let mut _3: server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field;
    let mut _4: server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field;
    let mut _5: __E;
    let mut _6: configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Unexpected<'_>;
    let mut _7: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _8: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        _6 = Unexpected::<'_>::Unsigned(_2);
        _8 = const _;
        _7 = _8 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _5 = <__E as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_value(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb2: {
        _3 = _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb5;
    }

    bb3: {
        _4 = _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb5;
    }

    bb4: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E>::Err(move _5);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::<impl at src/server.rs:302:17: 302:28>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "field index 0 <= i < 2";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::<impl at src/server.rs:302:17: 302:28>::visit_str(_1: _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field;
    let mut _6: server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field;
    let mut _7: server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field;

    bb0: {
        _4 = <str as PartialEq>::eq(_2, const "operation") -> [return: bb6, unwind continue];
    }

    bb1: {
        _5 = _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb7;
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_2, const "value") -> [return: bb5, unwind continue];
    }

    bb3: {
        _6 = _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb4: {
        _7 = _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb7;
    }

    bb5: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb7: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::<impl at src/server.rs:302:17: 302:28>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field;
    let mut _10: server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field;
    let mut _11: server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field;

    bb0: {
        _6 = Len((*_2));
        _7 = const 9_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 9]) -> [111: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_2)[1 of 9]) -> [112: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_2)[2 of 9]) -> [101: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_2)[3 of 9]) -> [114: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_2)[4 of 9]) -> [97: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_2)[5 of 9]) -> [116: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_2)[6 of 9]) -> [105: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_2)[7 of 9]) -> [111: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_2)[8 of 9]) -> [110: bb17, otherwise: bb10];
    }

    bb10: {
        _11 = _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field::__ignore;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb19;
    }

    bb11: {
        _3 = Len((*_2));
        _4 = const 5_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb10, otherwise: bb12];
    }

    bb12: {
        switchInt((*_2)[0 of 5]) -> [118: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_2)[1 of 5]) -> [97: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_2)[2 of 5]) -> [108: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_2)[3 of 5]) -> [117: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_2)[4 of 5]) -> [101: bb18, otherwise: bb10];
    }

    bb17: {
        _9 = _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field::__field0;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb19;
    }

    bb18: {
        _10 = _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field::__field1;
        _0 = Result::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb19;
    }

    bb19: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::<impl at src/server.rs:302:17: 302:28>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field, <__D as Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field, <__D as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::<impl at src/server.rs:302:17: 302:28>::expecting(_1: &_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Visitor<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct PatchValue";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::<impl at src/server.rs:302:17: 302:28>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Visitor<'_>, _2: __A) -> Result<PatchValue, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<PatchValue>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<server::PatchValue, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let _3: std::string::String;
    let mut _4: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _5: &mut __A;
    let mut _6: isize;
    let _7: std::option::Option<std::string::String>;
    let _8: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _9: isize;
    let _10: std::string::String;
    let mut _11: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _12: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _13: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error>;
    let mut _14: &mut __A;
    let mut _15: isize;
    let mut _18: isize;
    let mut _20: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
    let mut _21: &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected;
    let mut _22: server::PatchValue;
    let mut _23: std::string::String;
    let mut _24: &&str;
    scope 1 {
        debug __field0 => _3;
        let _16: std::option::Option<std::option::Option<std::string::String>>;
        let _17: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error;
        let _19: std::option::Option<std::string::String>;
        let mut _25: &&str;
        scope 5 {
            debug __field1 => _19;
        }
        scope 6 {
            debug __val => _16;
        }
        scope 7 {
            debug __err => _17;
        }
        scope 8 {
            debug __value => _19;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }
    scope 4 {
        debug __value => _10;
    }

    bb0: {
        _5 = &mut _2;
        _4 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_5) -> [return: bb1, unwind: bb18];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<PatchValue, <__A as SeqAccess<'_>>::Error>::Err(move _8);
        goto -> bb15;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: std::option::Option<std::string::String>);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _24 = const _;
        _12 = _24 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _11 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 0_usize, move _12) -> [return: bb7, unwind: bb18];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::string::String);
        _3 = move _10;
        _14 = &mut _2;
        _13 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_14) -> [return: bb8, unwind: bb17];
    }

    bb7: {
        _0 = Result::<PatchValue, <__A as SeqAccess<'_>>::Error>::Err(move _11);
        goto -> bb15;
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _17 = move ((_13 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::SeqAccess<'_>>::Error);
        _0 = Result::<PatchValue, <__A as SeqAccess<'_>>::Error>::Err(move _17);
        goto -> bb14;
    }

    bb10: {
        _16 = move ((_13 as Ok).0: std::option::Option<std::option::Option<std::string::String>>);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _25 = const _;
        _21 = _25 as &dyn configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::Expected (PointerCoercion(Unsize));
        _20 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::invalid_length(const 1_usize, move _21) -> [return: bb13, unwind: bb17];
    }

    bb12: {
        _19 = move ((_16 as Some).0: std::option::Option<std::string::String>);
        _23 = move _3;
        _22 = PatchValue { operation: move _23, value: move _19 };
        _0 = Result::<PatchValue, <__A as SeqAccess<'_>>::Error>::Ok(move _22);
        drop(_2) -> [return: bb16, unwind continue];
    }

    bb13: {
        _0 = Result::<PatchValue, <__A as SeqAccess<'_>>::Error>::Err(move _20);
        goto -> bb14;
    }

    bb14: {
        drop(_3) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_2) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_3) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_2) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::<impl at src/server.rs:302:17: 302:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct PatchValue with 2 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::<impl at src/server.rs:302:17: 302:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "struct PatchValue with 2 elements";
        _0 = &_1;
        return;
    }
}

fn _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::<impl at src/server.rs:302:17: 302:28>::visit_map(_1: _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Visitor<'_>, _2: __A) -> Result<PatchValue, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<PatchValue>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<server::PatchValue, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<std::string::String>;
    let mut _5: std::result::Result<std::option::Option<server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _6: &mut __A;
    let mut _7: isize;
    let mut _10: isize;
    let mut _12: isize;
    let mut _13: bool;
    let _14: &std::option::Option<std::string::String>;
    let mut _15: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _16: std::option::Option<std::string::String>;
    let mut _17: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _18: &mut __A;
    let mut _19: isize;
    let mut _22: bool;
    let _23: &std::option::Option<std::option::Option<std::string::String>>;
    let mut _24: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
    let mut _25: std::option::Option<std::option::Option<std::string::String>>;
    let mut _26: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _27: &mut __A;
    let mut _28: isize;
    let mut _31: std::result::Result<configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::IgnoredAny, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: isize;
    let mut _36: isize;
    let mut _38: std::result::Result<std::string::String, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _39: isize;
    let mut _43: isize;
    let mut _45: std::result::Result<std::option::Option<std::string::String>, <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error>;
    let mut _46: isize;
    let mut _49: server::PatchValue;
    let mut _50: std::string::String;
    let mut _51: std::option::Option<std::string::String>;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<std::option::Option<std::string::String>>;
        scope 2 {
            debug __field1 => _4;
            let _35: std::string::String;
            let _37: std::string::String;
            let _40: std::string::String;
            let _41: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __key => _11;
                let _8: std::option::Option<server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field>;
                let _9: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                let _11: server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field;
                let _20: std::string::String;
                let _21: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                let _29: std::option::Option<std::string::String>;
                let _30: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                let _34: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                scope 4 {
                    debug __val => _8;
                }
                scope 5 {
                    debug __err => _9;
                }
                scope 6 {
                    debug __val => _20;
                }
                scope 7 {
                    debug __err => _21;
                }
                scope 8 {
                    debug __val => _29;
                }
                scope 9 {
                    debug __err => _30;
                }
                scope 10 {
                }
                scope 11 {
                    debug __val => const IgnoredAny;
                }
                scope 12 {
                    debug __err => _34;
                }
            }
            scope 13 {
                debug __field0 => _35;
                let _42: std::option::Option<std::string::String>;
                let _44: std::option::Option<std::string::String>;
                let _47: std::option::Option<std::string::String>;
                let _48: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error;
                scope 17 {
                    debug __field1 => _42;
                }
                scope 18 {
                    debug __field1 => _44;
                }
                scope 19 {
                    debug __val => _47;
                }
                scope 20 {
                    debug __err => _48;
                }
            }
            scope 14 {
                debug __field0 => _37;
            }
            scope 15 {
                debug __val => _40;
            }
            scope 16 {
                debug __err => _41;
            }
        }
    }

    bb0: {
        _53 = const false;
        _52 = const false;
        _53 = const true;
        _3 = std::option::Option::<std::string::String>::None;
        _52 = const true;
        _4 = std::option::Option::<std::option::Option<std::string::String>>::None;
        goto -> bb1;
    }

    bb1: {
        _6 = &mut _2;
        _5 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_PatchValue::<impl Deserialize<'de> for PatchValue>::deserialize::__Field>(_6) -> [return: bb2, unwind: bb57];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_5 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<PatchValue, <__A as MapAccess<'_>>::Error>::Err(move _9);
        goto -> bb51;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Ok).0: std::option::Option<server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field>);
        _10 = discriminant(_8);
        switchInt(move _10) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _36 = discriminant(_3);
        switchInt(move _36) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb7: {
        _11 = move ((_8 as Some).0: server::_IMPL_DESERIALIZE_FOR_PatchValue::<impl configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::Deserialize<'de> for server::PatchValue>::deserialize::__Field);
        _12 = discriminant(_11);
        switchInt(move _12) -> [0: bb9, 1: bb19, otherwise: bb8];
    }

    bb8: {
        _32 = &mut _2;
        _31 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_32) -> [return: bb29, unwind: bb57];
    }

    bb9: {
        _14 = &_3;
        _13 = std::option::Option::<std::string::String>::is_some(_14) -> [return: bb10, unwind: bb57];
    }

    bb10: {
        switchInt(move _13) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _15 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "operation") -> [return: bb12, unwind: bb57];
    }

    bb12: {
        _0 = Result::<PatchValue, <__A as MapAccess<'_>>::Error>::Err(move _15);
        goto -> bb51;
    }

    bb13: {
        _18 = &mut _2;
        _17 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_18) -> [return: bb14, unwind: bb57];
    }

    bb14: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _21 = move ((_17 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<PatchValue, <__A as MapAccess<'_>>::Error>::Err(move _21);
        goto -> bb51;
    }

    bb16: {
        _20 = move ((_17 as Ok).0: std::string::String);
        _16 = std::option::Option::<std::string::String>::Some(move _20);
        drop(_3) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _53 = const true;
        _3 = move _16;
        goto -> bb1;
    }

    bb18 (cleanup): {
        _53 = const true;
        _3 = move _16;
        goto -> bb57;
    }

    bb19: {
        _23 = &_4;
        _22 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_23) -> [return: bb20, unwind: bb57];
    }

    bb20: {
        switchInt(move _22) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _24 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Configuration::_serde::de::Error>::duplicate_field(const "value") -> [return: bb22, unwind: bb57];
    }

    bb22: {
        _0 = Result::<PatchValue, <__A as MapAccess<'_>>::Error>::Err(move _24);
        goto -> bb51;
    }

    bb23: {
        _27 = &mut _2;
        _26 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_27) -> [return: bb24, unwind: bb57];
    }

    bb24: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb26, 1: bb25, otherwise: bb4];
    }

    bb25: {
        _30 = move ((_26 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<PatchValue, <__A as MapAccess<'_>>::Error>::Err(move _30);
        goto -> bb51;
    }

    bb26: {
        _29 = move ((_26 as Ok).0: std::option::Option<std::string::String>);
        _25 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _29);
        drop(_4) -> [return: bb27, unwind: bb28];
    }

    bb27: {
        _52 = const true;
        _4 = move _25;
        goto -> bb1;
    }

    bb28 (cleanup): {
        _52 = const true;
        _4 = move _25;
        goto -> bb57;
    }

    bb29: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb1, 1: bb30, otherwise: bb4];
    }

    bb30: {
        _34 = move ((_31 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<PatchValue, <__A as MapAccess<'_>>::Error>::Err(move _34);
        goto -> bb51;
    }

    bb31: {
        _38 = _IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "operation") -> [return: bb33, unwind: bb57];
    }

    bb32: {
        _53 = const false;
        _37 = move ((_3 as Some).0: std::string::String);
        _35 = move _37;
        goto -> bb36;
    }

    bb33: {
        _39 = discriminant(_38);
        switchInt(move _39) -> [0: bb35, 1: bb34, otherwise: bb4];
    }

    bb34: {
        _41 = move ((_38 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<PatchValue, <__A as MapAccess<'_>>::Error>::Err(move _41);
        goto -> bb51;
    }

    bb35: {
        _40 = move ((_38 as Ok).0: std::string::String);
        _35 = move _40;
        goto -> bb36;
    }

    bb36: {
        _43 = discriminant(_4);
        switchInt(move _43) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        _45 = _IMPL_SERIALIZE_FOR_Configuration::_serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "value") -> [return: bb39, unwind: bb44];
    }

    bb38: {
        _52 = const false;
        _44 = move ((_4 as Some).0: std::option::Option<std::string::String>);
        _42 = move _44;
        goto -> bb42;
    }

    bb39: {
        _46 = discriminant(_45);
        switchInt(move _46) -> [0: bb41, 1: bb40, otherwise: bb4];
    }

    bb40: {
        _48 = move ((_45 as Err).0: <__A as configuration::_IMPL_SERIALIZE_FOR_Configuration::_serde::de::MapAccess<'_>>::Error);
        _0 = Result::<PatchValue, <__A as MapAccess<'_>>::Error>::Err(move _48);
        drop(_35) -> [return: bb51, unwind: bb57];
    }

    bb41: {
        _47 = move ((_45 as Ok).0: std::option::Option<std::string::String>);
        _42 = move _47;
        goto -> bb42;
    }

    bb42: {
        _50 = move _35;
        _51 = move _42;
        _49 = PatchValue { operation: move _50, value: move _51 };
        _0 = Result::<PatchValue, <__A as MapAccess<'_>>::Error>::Ok(move _49);
        _52 = const false;
        _53 = const false;
        drop(_2) -> [return: bb43, unwind continue];
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_35) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        _57 = discriminant(_3);
        switchInt(move _57) -> [1: bb58, otherwise: bb46];
    }

    bb46 (cleanup): {
        drop(_2) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48: {
        _52 = const false;
        _55 = discriminant(_3);
        switchInt(move _55) -> [1: bb53, otherwise: bb52];
    }

    bb49: {
        switchInt(_52) -> [0: bb48, otherwise: bb50];
    }

    bb50: {
        drop(((_4 as Some).0: std::option::Option<std::string::String>)) -> [return: bb48, unwind: bb45];
    }

    bb51: {
        _54 = discriminant(_4);
        switchInt(move _54) -> [1: bb49, otherwise: bb48];
    }

    bb52: {
        _53 = const false;
        drop(_2) -> [return: bb43, unwind continue];
    }

    bb53: {
        switchInt(_53) -> [0: bb52, otherwise: bb54];
    }

    bb54: {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb52, unwind: bb46];
    }

    bb55 (cleanup): {
        switchInt(_52) -> [0: bb45, otherwise: bb56];
    }

    bb56 (cleanup): {
        drop(((_4 as Some).0: std::option::Option<std::string::String>)) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        _56 = discriminant(_4);
        switchInt(move _56) -> [1: bb55, otherwise: bb45];
    }

    bb58 (cleanup): {
        switchInt(_53) -> [0: bb46, otherwise: bb59];
    }

    bb59 (cleanup): {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb46, unwind terminate(cleanup)];
    }
}

const _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 2];
    let _2: &[&str; 2];
    let _3: [&str; 2];
    let mut _4: &[&str; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_PatchValue::<impl at src/server.rs:302:17: 302:28>::deserialize::FIELDS: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "operation", const "value"];
        _0 = &_1;
        return;
    }
}

fn patch_key(_1: Arc<KvStore>, _2: std::string::String, _3: PatchValue) -> {async fn body@src/server.rs:311:36: 385:2} {
    debug store => _1;
    debug key => _2;
    debug patch_value => _3;
    let mut _0: {async fn body@src/server.rs:311:36: 385:2};

    bb0: {
        _0 = {coroutine@src/server.rs:311:36: 385:2 (#0)} { store: move _1, key: move _2, patch_value: move _3 };
        return;
    }
}

fn patch_key::{closure#0}(_1: Pin<&mut {async fn body@src/server.rs:311:36: 385:2}>, _2: &mut std::task::Context<'_>) -> Poll<Result<WithStatus<warp::reply::Json>, Rejection>> {
    debug _task_context => _2;
    debug store => ((*(_1.0: &mut {async fn body@src/server.rs:311:36: 385:2})).0: std::sync::Arc<kvstore::KvStore>);
    debug key => ((*(_1.0: &mut {async fn body@src/server.rs:311:36: 385:2})).1: std::string::String);
    debug patch_value => ((*(_1.0: &mut {async fn body@src/server.rs:311:36: 385:2})).2: server::PatchValue);
    let mut _0: std::task::Poll<std::result::Result<warp::reply::WithStatus<warp::reply::Json>, warp::Rejection>>;
    let _3: std::sync::Arc<kvstore::KvStore>;
    let mut _6: std::option::Option<kvstore::KvElement>;
    let _7: &kvstore::KvStore;
    let mut _8: &std::sync::Arc<kvstore::KvStore>;
    let mut _9: std::string::String;
    let mut _10: &std::string::String;
    let mut _11: isize;
    let mut _12: &str;
    let mut _13: &std::string::String;
    let _14: std::string::String;
    let _15: &str;
    let mut _16: &std::string::String;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let _23: &kvstore::KvStore;
    let mut _24: &std::sync::Arc<kvstore::KvStore>;
    let mut _25: std::string::String;
    let mut _26: &std::string::String;
    let mut _27: warp::reply::WithStatus<warp::reply::Json>;
    let mut _28: warp::reply::Json;
    let _29: &server::JsonMessage;
    let _30: server::JsonMessage;
    let mut _31: std::string::String;
    let _32: &str;
    let mut _33: warp::reply::WithStatus<warp::reply::Json>;
    let mut _34: warp::reply::Json;
    let _35: &server::JsonMessage;
    let _36: server::JsonMessage;
    let mut _37: std::string::String;
    let _38: &str;
    let mut _39: bool;
    let _40: &kvstore::KvStore;
    let mut _41: &std::sync::Arc<kvstore::KvStore>;
    let mut _42: std::string::String;
    let mut _43: &std::string::String;
    let mut _44: warp::reply::WithStatus<warp::reply::Json>;
    let mut _45: warp::reply::Json;
    let _46: &server::JsonMessage;
    let _47: server::JsonMessage;
    let mut _48: std::string::String;
    let _49: &str;
    let mut _50: warp::reply::WithStatus<warp::reply::Json>;
    let mut _51: warp::reply::Json;
    let _52: &server::JsonMessage;
    let _53: server::JsonMessage;
    let mut _54: std::string::String;
    let _55: &str;
    let mut _56: bool;
    let _57: &kvstore::KvStore;
    let mut _58: &std::sync::Arc<kvstore::KvStore>;
    let mut _59: std::string::String;
    let mut _60: &std::string::String;
    let mut _61: warp::reply::WithStatus<warp::reply::Json>;
    let mut _62: warp::reply::Json;
    let _63: &server::JsonMessage;
    let _64: server::JsonMessage;
    let mut _65: std::string::String;
    let _66: &str;
    let mut _67: warp::reply::WithStatus<warp::reply::Json>;
    let mut _68: warp::reply::Json;
    let _69: &server::JsonMessage;
    let _70: server::JsonMessage;
    let mut _71: std::string::String;
    let _72: &str;
    let mut _73: bool;
    let _74: &kvstore::KvStore;
    let mut _75: &std::sync::Arc<kvstore::KvStore>;
    let mut _76: std::string::String;
    let mut _77: &std::string::String;
    let mut _78: warp::reply::WithStatus<warp::reply::Json>;
    let mut _79: warp::reply::Json;
    let _80: &server::JsonMessage;
    let _81: server::JsonMessage;
    let mut _82: std::string::String;
    let _83: &str;
    let mut _84: warp::reply::WithStatus<warp::reply::Json>;
    let mut _85: warp::reply::Json;
    let _86: &server::JsonMessage;
    let _87: server::JsonMessage;
    let mut _88: std::string::String;
    let _89: &str;
    let mut _90: isize;
    let mut _92: std::result::Result<i64, std::num::ParseIntError>;
    let _93: &str;
    let mut _94: &std::string::String;
    let mut _95: isize;
    let mut _97: std::option::Option<chrono::DateTime<chrono::Utc>>;
    let _98: &kvstore::KvStore;
    let mut _99: &std::sync::Arc<kvstore::KvStore>;
    let mut _100: std::string::String;
    let mut _101: &std::string::String;
    let mut _102: isize;
    let mut _104: warp::reply::WithStatus<warp::reply::Json>;
    let mut _105: warp::reply::Json;
    let _106: &server::JsonMessage;
    let _107: server::JsonMessage;
    let mut _108: std::string::String;
    let mut _109: &std::string::String;
    let _110: std::string::String;
    let mut _112: std::fmt::Arguments<'_>;
    let mut _113: &[&str];
    let mut _114: &[core::fmt::rt::Argument<'_>];
    let _115: &[core::fmt::rt::Argument<'_>; 1];
    let _116: [core::fmt::rt::Argument<'_>; 1];
    let mut _117: core::fmt::rt::Argument<'_>;
    let _118: &chrono::DateTime<chrono::Utc>;
    let mut _119: warp::reply::WithStatus<warp::reply::Json>;
    let mut _120: warp::reply::Json;
    let _121: &server::JsonMessage;
    let _122: server::JsonMessage;
    let mut _123: std::string::String;
    let _124: &str;
    let mut _125: warp::reply::WithStatus<warp::reply::Json>;
    let mut _126: warp::reply::Json;
    let _127: &server::JsonMessage;
    let _128: server::JsonMessage;
    let mut _129: std::string::String;
    let _130: &str;
    let mut _131: warp::reply::WithStatus<warp::reply::Json>;
    let mut _132: warp::reply::Json;
    let _133: &server::JsonMessage;
    let _134: server::JsonMessage;
    let mut _135: std::string::String;
    let _136: &str;
    let mut _137: warp::Rejection;
    let mut _138: server::Error;
    let mut _139: std::string::String;
    let mut _140: warp::Rejection;
    let mut _141: server::Error;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: std::result::Result<warp::reply::WithStatus<warp::reply::Json>, warp::Rejection>;
    let mut _149: u32;
    let mut _150: &mut {async fn body@src/server.rs:311:36: 385:2};
    let mut _151: &mut {async fn body@src/server.rs:311:36: 385:2};
    let mut _152: &mut {async fn body@src/server.rs:311:36: 385:2};
    let mut _153: &mut {async fn body@src/server.rs:311:36: 385:2};
    let mut _154: &mut {async fn body@src/server.rs:311:36: 385:2};
    let mut _155: &mut {async fn body@src/server.rs:311:36: 385:2};
    scope 1 {
        debug store => _3;
        let _4: std::string::String;
        scope 2 {
            debug key => _4;
            let _5: server::PatchValue;
            scope 3 {
                debug patch_value => _5;
                scope 4 {
                    let _91: std::string::String;
                    scope 5 {
                        debug value => _91;
                        scope 6 {
                            debug ttl => _96;
                            let _96: i64;
                            let _103: chrono::DateTime<chrono::Utc>;
                            scope 7 {
                                debug expiration_date => _103;
                                let _111: std::string::String;
                                let mut _142: &[&str; 2];
                                scope 8 {
                                    debug res => _111;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _150 = deref_copy (_1.0: &mut {async fn body@src/server.rs:311:36: 385:2});
        _149 = discriminant((*_150));
        switchInt(move _149) -> [0: bb1, 1: bb138, 2: bb137, otherwise: bb70];
    }

    bb1: {
        _144 = const false;
        _143 = const false;
        _151 = deref_copy (_1.0: &mut {async fn body@src/server.rs:311:36: 385:2});
        _3 = move ((*_151).0: std::sync::Arc<kvstore::KvStore>);
        _152 = deref_copy (_1.0: &mut {async fn body@src/server.rs:311:36: 385:2});
        _4 = move ((*_152).1: std::string::String);
        _143 = const true;
        _144 = const true;
        _153 = deref_copy (_1.0: &mut {async fn body@src/server.rs:311:36: 385:2});
        _5 = move ((*_153).2: server::PatchValue);
        _8 = &_3;
        _7 = <Arc<KvStore> as Deref>::deref(move _8) -> [return: bb2, unwind: bb121];
    }

    bb2: {
        _10 = &_4;
        _9 = <std::string::String as Clone>::clone(move _10) -> [return: bb3, unwind: bb121];
    }

    bb3: {
        _6 = KvStore::get(_7, move _9) -> [return: bb4, unwind: bb121];
    }

    bb4: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [1: bb5, otherwise: bb99];
    }

    bb5: {
        _16 = &(_5.0: std::string::String);
        _15 = <std::string::String as Deref>::deref(move _16) -> [return: bb6, unwind: bb120];
    }

    bb6: {
        _14 = std::str::<impl str>::to_lowercase(_15) -> [return: bb7, unwind: bb120];
    }

    bb7: {
        _13 = &_14;
        _12 = std::string::String::as_str(move _13) -> [return: bb8, unwind: bb119];
    }

    bb8: {
        _21 = <str as PartialEq>::eq(_12, const "lock") -> [return: bb23, unwind: bb119];
    }

    bb9: {
        _24 = &_3;
        _23 = <Arc<KvStore> as Deref>::deref(move _24) -> [return: bb24, unwind: bb119];
    }

    bb10: {
        _20 = <str as PartialEq>::eq(_12, const "unlock") -> [return: bb22, unwind: bb119];
    }

    bb11: {
        _41 = &_3;
        _40 = <Arc<KvStore> as Deref>::deref(move _41) -> [return: bb35, unwind: bb119];
    }

    bb12: {
        _19 = <str as PartialEq>::eq(_12, const "increment") -> [return: bb21, unwind: bb119];
    }

    bb13: {
        _58 = &_3;
        _57 = <Arc<KvStore> as Deref>::deref(move _58) -> [return: bb46, unwind: bb119];
    }

    bb14: {
        _18 = <str as PartialEq>::eq(_12, const "decrement") -> [return: bb20, unwind: bb119];
    }

    bb15: {
        _75 = &_3;
        _74 = <Arc<KvStore> as Deref>::deref(move _75) -> [return: bb57, unwind: bb119];
    }

    bb16: {
        _17 = <str as PartialEq>::eq(_12, const "ttl") -> [return: bb19, unwind: bb119];
    }

    bb17: {
        _90 = discriminant((_5.1: std::option::Option<std::string::String>));
        switchInt(move _90) -> [0: bb68, 1: bb69, otherwise: bb70];
    }

    bb18: {
        _144 = const false;
        _139 = move (_5.0: std::string::String);
        _138 = server::Error::InvalidOperation { operation: move _139 };
        _137 = warp::reject::custom::<server::Error>(move _138) -> [return: bb97, unwind: bb119];
    }

    bb19: {
        switchInt(move _17) -> [0: bb18, otherwise: bb17];
    }

    bb20: {
        switchInt(move _18) -> [0: bb16, otherwise: bb15];
    }

    bb21: {
        switchInt(move _19) -> [0: bb14, otherwise: bb13];
    }

    bb22: {
        switchInt(move _20) -> [0: bb12, otherwise: bb11];
    }

    bb23: {
        switchInt(move _21) -> [0: bb10, otherwise: bb9];
    }

    bb24: {
        _26 = &_4;
        _25 = <std::string::String as ToString>::to_string(move _26) -> [return: bb25, unwind: bb119];
    }

    bb25: {
        _22 = KvStore::switch_lock(_23, move _25, const true) -> [return: bb26, unwind: bb119];
    }

    bb26: {
        switchInt(_22) -> [0: bb27, otherwise: bb28];
    }

    bb27: {
        _38 = const "The specified key is already locked.";
        _37 = <str as ToString>::to_string(_38) -> [return: bb32, unwind: bb119];
    }

    bb28: {
        _32 = const "The specified key was successfully locked.";
        _31 = <str as ToString>::to_string(_32) -> [return: bb29, unwind: bb119];
    }

    bb29: {
        _30 = JsonMessage { message: move _31 };
        _29 = &_30;
        _28 = warp::reply::json::<JsonMessage>(_29) -> [return: bb30, unwind: bb118];
    }

    bb30: {
        _27 = with_status::<warp::reply::Json>(move _28, const _) -> [return: bb31, unwind: bb118];
    }

    bb31: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _27);
        drop(_30) -> [return: bb98, unwind: bb119];
    }

    bb32: {
        _36 = JsonMessage { message: move _37 };
        _35 = &_36;
        _34 = warp::reply::json::<JsonMessage>(_35) -> [return: bb33, unwind: bb117];
    }

    bb33: {
        _33 = with_status::<warp::reply::Json>(move _34, const _) -> [return: bb34, unwind: bb117];
    }

    bb34: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _33);
        drop(_36) -> [return: bb98, unwind: bb119];
    }

    bb35: {
        _43 = &_4;
        _42 = <std::string::String as ToString>::to_string(move _43) -> [return: bb36, unwind: bb119];
    }

    bb36: {
        _39 = KvStore::switch_lock(_40, move _42, const false) -> [return: bb37, unwind: bb119];
    }

    bb37: {
        switchInt(_39) -> [0: bb38, otherwise: bb39];
    }

    bb38: {
        _55 = const "The specified key is not currently locked.";
        _54 = <str as ToString>::to_string(_55) -> [return: bb43, unwind: bb119];
    }

    bb39: {
        _49 = const "The specified key was successfully unlocked.";
        _48 = <str as ToString>::to_string(_49) -> [return: bb40, unwind: bb119];
    }

    bb40: {
        _47 = JsonMessage { message: move _48 };
        _46 = &_47;
        _45 = warp::reply::json::<JsonMessage>(_46) -> [return: bb41, unwind: bb116];
    }

    bb41: {
        _44 = with_status::<warp::reply::Json>(move _45, const _) -> [return: bb42, unwind: bb116];
    }

    bb42: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _44);
        drop(_47) -> [return: bb98, unwind: bb119];
    }

    bb43: {
        _53 = JsonMessage { message: move _54 };
        _52 = &_53;
        _51 = warp::reply::json::<JsonMessage>(_52) -> [return: bb44, unwind: bb115];
    }

    bb44: {
        _50 = with_status::<warp::reply::Json>(move _51, const _) -> [return: bb45, unwind: bb115];
    }

    bb45: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _50);
        drop(_53) -> [return: bb98, unwind: bb119];
    }

    bb46: {
        _60 = &_4;
        _59 = <std::string::String as ToString>::to_string(move _60) -> [return: bb47, unwind: bb119];
    }

    bb47: {
        _56 = KvStore::increment_or_decrement(_57, move _59, const 1f64) -> [return: bb48, unwind: bb119];
    }

    bb48: {
        switchInt(_56) -> [0: bb49, otherwise: bb50];
    }

    bb49: {
        _72 = const "The specified key is not a valid numeric value.";
        _71 = <str as ToString>::to_string(_72) -> [return: bb54, unwind: bb119];
    }

    bb50: {
        _66 = const "The specified key was successfully incremented.";
        _65 = <str as ToString>::to_string(_66) -> [return: bb51, unwind: bb119];
    }

    bb51: {
        _64 = JsonMessage { message: move _65 };
        _63 = &_64;
        _62 = warp::reply::json::<JsonMessage>(_63) -> [return: bb52, unwind: bb114];
    }

    bb52: {
        _61 = with_status::<warp::reply::Json>(move _62, const _) -> [return: bb53, unwind: bb114];
    }

    bb53: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _61);
        drop(_64) -> [return: bb98, unwind: bb119];
    }

    bb54: {
        _70 = JsonMessage { message: move _71 };
        _69 = &_70;
        _68 = warp::reply::json::<JsonMessage>(_69) -> [return: bb55, unwind: bb113];
    }

    bb55: {
        _67 = with_status::<warp::reply::Json>(move _68, const _) -> [return: bb56, unwind: bb113];
    }

    bb56: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _67);
        drop(_70) -> [return: bb98, unwind: bb119];
    }

    bb57: {
        _77 = &_4;
        _76 = <std::string::String as ToString>::to_string(move _77) -> [return: bb58, unwind: bb119];
    }

    bb58: {
        _73 = KvStore::increment_or_decrement(_74, move _76, const -1f64) -> [return: bb59, unwind: bb119];
    }

    bb59: {
        switchInt(_73) -> [0: bb60, otherwise: bb61];
    }

    bb60: {
        _89 = const "The specified key is not a valid numeric value.";
        _88 = <str as ToString>::to_string(_89) -> [return: bb65, unwind: bb119];
    }

    bb61: {
        _83 = const "The specified key was successfully decremented.";
        _82 = <str as ToString>::to_string(_83) -> [return: bb62, unwind: bb119];
    }

    bb62: {
        _81 = JsonMessage { message: move _82 };
        _80 = &_81;
        _79 = warp::reply::json::<JsonMessage>(_80) -> [return: bb63, unwind: bb112];
    }

    bb63: {
        _78 = with_status::<warp::reply::Json>(move _79, const _) -> [return: bb64, unwind: bb112];
    }

    bb64: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _78);
        drop(_81) -> [return: bb98, unwind: bb119];
    }

    bb65: {
        _87 = JsonMessage { message: move _88 };
        _86 = &_87;
        _85 = warp::reply::json::<JsonMessage>(_86) -> [return: bb66, unwind: bb111];
    }

    bb66: {
        _84 = with_status::<warp::reply::Json>(move _85, const _) -> [return: bb67, unwind: bb111];
    }

    bb67: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _84);
        drop(_87) -> [return: bb98, unwind: bb119];
    }

    bb68: {
        _136 = const "Missing value for expiration.";
        _135 = <str as ToString>::to_string(_136) -> [return: bb94, unwind: bb119];
    }

    bb69: {
        _143 = const false;
        _91 = move (((_5.1: std::option::Option<std::string::String>) as Some).0: std::string::String);
        _94 = &_91;
        _93 = <std::string::String as Deref>::deref(move _94) -> [return: bb71, unwind: bb110];
    }

    bb70: {
        unreachable;
    }

    bb71: {
        _92 = core::str::<impl str>::parse::<i64>(_93) -> [return: bb72, unwind: bb110];
    }

    bb72: {
        _95 = discriminant(_92);
        switchInt(move _95) -> [0: bb73, otherwise: bb89];
    }

    bb73: {
        _96 = ((_92 as Ok).0: i64);
        _99 = &_3;
        _98 = <Arc<KvStore> as Deref>::deref(move _99) -> [return: bb74, unwind: bb110];
    }

    bb74: {
        _101 = &_4;
        _100 = <std::string::String as Clone>::clone(move _101) -> [return: bb75, unwind: bb110];
    }

    bb75: {
        _97 = KvStore::set_expiration(_98, move _100, _96) -> [return: bb76, unwind: bb110];
    }

    bb76: {
        _102 = discriminant(_97);
        switchInt(move _102) -> [0: bb77, 1: bb78, otherwise: bb70];
    }

    bb77: {
        _124 = const "Unable to set the expiration for the specified key.";
        _123 = <str as ToString>::to_string(_124) -> [return: bb86, unwind: bb110];
    }

    bb78: {
        _103 = ((_97 as Some).0: chrono::DateTime<chrono::Utc>);
        _142 = const _;
        _113 = _142 as &[&str] (PointerCoercion(Unsize));
        _118 = &_103;
        _117 = core::fmt::rt::Argument::<'_>::new_display::<DateTime<Utc>>(_118) -> [return: bb79, unwind: bb110];
    }

    bb79: {
        _116 = [move _117];
        _115 = &_116;
        _114 = _115 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _112 = Arguments::<'_>::new_v1(move _113, move _114) -> [return: bb80, unwind: bb110];
    }

    bb80: {
        _111 = std::fmt::format(move _112) -> [return: bb81, unwind: bb110];
    }

    bb81: {
        _110 = move _111;
        _109 = &_110;
        _108 = <std::string::String as ToString>::to_string(move _109) -> [return: bb82, unwind: bb109];
    }

    bb82: {
        _107 = JsonMessage { message: move _108 };
        _106 = &_107;
        _105 = warp::reply::json::<JsonMessage>(_106) -> [return: bb83, unwind: bb108];
    }

    bb83: {
        _104 = with_status::<warp::reply::Json>(move _105, const _) -> [return: bb84, unwind: bb108];
    }

    bb84: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _104);
        drop(_107) -> [return: bb85, unwind: bb109];
    }

    bb85: {
        drop(_110) -> [return: bb93, unwind: bb110];
    }

    bb86: {
        _122 = JsonMessage { message: move _123 };
        _121 = &_122;
        _120 = warp::reply::json::<JsonMessage>(_121) -> [return: bb87, unwind: bb107];
    }

    bb87: {
        _119 = with_status::<warp::reply::Json>(move _120, const _) -> [return: bb88, unwind: bb107];
    }

    bb88: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _119);
        drop(_122) -> [return: bb93, unwind: bb110];
    }

    bb89: {
        _130 = const "Unrecognized value for expiration, you need to use a numeric value without decimal.";
        _129 = <str as ToString>::to_string(_130) -> [return: bb90, unwind: bb110];
    }

    bb90: {
        _128 = JsonMessage { message: move _129 };
        _127 = &_128;
        _126 = warp::reply::json::<JsonMessage>(_127) -> [return: bb91, unwind: bb106];
    }

    bb91: {
        _125 = with_status::<warp::reply::Json>(move _126, const _) -> [return: bb92, unwind: bb106];
    }

    bb92: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _125);
        drop(_128) -> [return: bb93, unwind: bb110];
    }

    bb93: {
        drop(_91) -> [return: bb98, unwind: bb119];
    }

    bb94: {
        _134 = JsonMessage { message: move _135 };
        _133 = &_134;
        _132 = warp::reply::json::<JsonMessage>(_133) -> [return: bb95, unwind: bb105];
    }

    bb95: {
        _131 = with_status::<warp::reply::Json>(move _132, const _) -> [return: bb96, unwind: bb105];
    }

    bb96: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _131);
        drop(_134) -> [return: bb98, unwind: bb119];
    }

    bb97: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Err(move _137);
        goto -> bb98;
    }

    bb98: {
        drop(_14) -> [return: bb101, unwind: bb120];
    }

    bb99: {
        _141 = server::Error::KeyNotFound;
        _140 = warp::reject::custom::<server::Error>(move _141) -> [return: bb100, unwind: bb120];
    }

    bb100: {
        _148 = Result::<WithStatus<warp::reply::Json>, Rejection>::Err(move _140);
        goto -> bb101;
    }

    bb101: {
        drop(_6) -> [return: bb102, unwind: bb121];
    }

    bb102: {
        switchInt(_144) -> [0: bb128, otherwise: bb132];
    }

    bb103: {
        drop(_3) -> [return: bb104, unwind: bb124];
    }

    bb104: {
        _0 = Poll::<Result<WithStatus<warp::reply::Json>, Rejection>>::Ready(move _148);
        _154 = deref_copy (_1.0: &mut {async fn body@src/server.rs:311:36: 385:2});
        discriminant((*_154)) = 1;
        return;
    }

    bb105 (cleanup): {
        drop(_134) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_128) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_122) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_107) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_110) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        drop(_91) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_87) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_81) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_70) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_64) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_53) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_47) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        drop(_36) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop(_30) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        drop(_14) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_6) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        switchInt(_144) -> [0: bb133, otherwise: bb136];
    }

    bb122 (cleanup): {
        _143 = const false;
        _144 = const false;
        drop(_4) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop(_3) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        _155 = deref_copy (_1.0: &mut {async fn body@src/server.rs:311:36: 385:2});
        discriminant((*_155)) = 2;
        resume;
    }

    bb125 (cleanup): {
        _145 = discriminant((_5.1: std::option::Option<std::string::String>));
        switchInt(move _145) -> [1: bb126, otherwise: bb122];
    }

    bb126 (cleanup): {
        switchInt(_143) -> [0: bb122, otherwise: bb127];
    }

    bb127 (cleanup): {
        drop((((_5.1: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb128: {
        _146 = discriminant((_5.1: std::option::Option<std::string::String>));
        switchInt(move _146) -> [1: bb130, otherwise: bb129];
    }

    bb129: {
        _143 = const false;
        _144 = const false;
        drop(_4) -> [return: bb103, unwind: bb123];
    }

    bb130: {
        switchInt(_143) -> [0: bb129, otherwise: bb131];
    }

    bb131: {
        drop((((_5.1: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb129, unwind: bb122];
    }

    bb132: {
        drop((_5.0: std::string::String)) -> [return: bb128, unwind: bb125];
    }

    bb133 (cleanup): {
        _147 = discriminant((_5.1: std::option::Option<std::string::String>));
        switchInt(move _147) -> [1: bb134, otherwise: bb122];
    }

    bb134 (cleanup): {
        switchInt(_143) -> [0: bb122, otherwise: bb135];
    }

    bb135 (cleanup): {
        drop((((_5.1: std::option::Option<std::string::String>) as Some).0: std::string::String)) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        drop((_5.0: std::string::String)) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb137: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb137, unwind continue];
    }

    bb138: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb138, unwind continue];
    }
}

promoted[0] in patch_key::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "The expiration is successsfully setup, the key will expire at ", const "."];
        _0 = &_1;
        return;
    }
}

fn verify_auth(_1: std::option::Option<std::string::String>, _2: Arc<std::sync::RwLock<Configuration>>) -> {async fn body@src/server.rs:390:28: 409:2} {
    debug auth_header => _1;
    debug config => _2;
    let mut _0: {async fn body@src/server.rs:390:28: 409:2};

    bb0: {
        _0 = {coroutine@src/server.rs:390:28: 409:2 (#0)} { auth_header: move _1, config: move _2 };
        return;
    }
}

fn verify_auth::{closure#0}(_1: Pin<&mut {async fn body@src/server.rs:390:28: 409:2}>, _2: &mut std::task::Context<'_>) -> Poll<Result<(), Rejection>> {
    debug _task_context => _2;
    debug auth_header => ((*(_1.0: &mut {async fn body@src/server.rs:390:28: 409:2})).0: std::option::Option<std::string::String>);
    debug config => ((*(_1.0: &mut {async fn body@src/server.rs:390:28: 409:2})).1: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
    let mut _0: std::task::Poll<std::result::Result<(), warp::Rejection>>;
    let _3: std::option::Option<std::string::String>;
    let mut _6: std::result::Result<std::sync::RwLockReadGuard<'_, configuration::Configuration>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, configuration::Configuration>>>;
    let _7: &std::sync::RwLock<configuration::Configuration>;
    let mut _8: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _9: bool;
    let mut _10: &configuration::Configuration;
    let mut _11: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _12: isize;
    let mut _14: std::result::Result<jsonwebtoken::TokenData<configuration::Claims>, jsonwebtoken::errors::Error>;
    let _15: &str;
    let _16: &str;
    let mut _17: &std::string::String;
    let _18: &[u8];
    let mut _19: &std::string::String;
    let _20: &configuration::Configuration;
    let mut _21: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let _22: &jsonwebtoken::Validation;
    let _23: jsonwebtoken::Validation;
    let mut _24: isize;
    let mut _26: ();
    let mut _27: warp::Rejection;
    let mut _28: server::Error;
    let mut _29: warp::Rejection;
    let mut _30: server::Error;
    let mut _31: ();
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: std::result::Result<(), warp::Rejection>;
    let mut _39: u32;
    let mut _40: &mut {async fn body@src/server.rs:390:28: 409:2};
    let mut _41: &mut {async fn body@src/server.rs:390:28: 409:2};
    let mut _42: &mut {async fn body@src/server.rs:390:28: 409:2};
    let mut _43: &mut {async fn body@src/server.rs:390:28: 409:2};
    let mut _44: &mut {async fn body@src/server.rs:390:28: 409:2};
    scope 1 {
        debug auth_header => _3;
        let _4: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
        scope 2 {
            debug config => _4;
            let _5: std::sync::RwLockReadGuard<'_, configuration::Configuration>;
            scope 3 {
                debug config => _5;
                scope 4 {
                    debug auth_header => _13;
                    let _13: std::string::String;
                    scope 5 {
                        debug _bearer => _25;
                        let _25: jsonwebtoken::TokenData<configuration::Claims>;
                    }
                }
            }
        }
    }

    bb0: {
        _40 = deref_copy (_1.0: &mut {async fn body@src/server.rs:390:28: 409:2});
        _39 = discriminant((*_40));
        switchInt(move _39) -> [0: bb1, 1: bb45, 2: bb44, otherwise: bb46];
    }

    bb1: {
        _33 = const false;
        _32 = const false;
        _33 = const true;
        _41 = deref_copy (_1.0: &mut {async fn body@src/server.rs:390:28: 409:2});
        _3 = move ((*_41).0: std::option::Option<std::string::String>);
        _42 = deref_copy (_1.0: &mut {async fn body@src/server.rs:390:28: 409:2});
        _4 = move ((*_42).1: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
        _8 = &_4;
        _7 = <Arc<std::sync::RwLock<Configuration>> as Deref>::deref(move _8) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _6 = std::sync::RwLock::<Configuration>::read(_7) -> [return: bb3, unwind: bb27];
    }

    bb3: {
        _5 = Result::<std::sync::RwLockReadGuard<'_, Configuration>, PoisonError<std::sync::RwLockReadGuard<'_, Configuration>>>::unwrap(move _6) -> [return: bb4, unwind: bb27];
    }

    bb4: {
        _11 = &_5;
        _10 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _11) -> [return: bb5, unwind: bb26];
    }

    bb5: {
        _9 = (((*_10).1: configuration::Authentication).0: bool);
        switchInt(move _9) -> [0: bb20, otherwise: bb6];
    }

    bb6: {
        _12 = discriminant(_3);
        switchInt(move _12) -> [1: bb7, otherwise: bb18];
    }

    bb7: {
        _33 = const false;
        _13 = move ((_3 as Some).0: std::string::String);
        _17 = &_13;
        _16 = <std::string::String as Deref>::deref(move _17) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _15 = core::str::<impl str>::trim_start_matches::<'_, &str>(_16, const "Bearer ") -> [return: bb9, unwind: bb25];
    }

    bb9: {
        _21 = &_5;
        _20 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _21) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        _19 = &(((*_20).1: configuration::Authentication).2: std::string::String);
        _18 = <std::string::String as AsRef<[u8]>>::as_ref(move _19) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _23 = <Validation as Default>::default() -> [return: bb12, unwind: bb25];
    }

    bb12: {
        _22 = &_23;
        _14 = jsonwebtoken::decode::<Claims>(_15, _18, _22) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _32 = const true;
        _24 = discriminant(_14);
        switchInt(move _24) -> [0: bb14, otherwise: bb15];
    }

    bb14: {
        _32 = const false;
        _25 = move ((_14 as Ok).0: jsonwebtoken::TokenData<configuration::Claims>);
        _26 = ();
        _38 = Result::<(), Rejection>::Ok(move _26);
        drop(_25) -> [return: bb34, unwind: bb41];
    }

    bb15: {
        _28 = server::Error::InvalidJwtToken;
        _27 = warp::reject::custom::<server::Error>(move _28) -> [return: bb16, unwind: bb41];
    }

    bb16: {
        _38 = Result::<(), Rejection>::Err(move _27);
        goto -> bb34;
    }

    bb17: {
        _32 = const false;
        drop(_13) -> [return: bb21, unwind: bb26];
    }

    bb18: {
        _30 = server::Error::MissingAuthHeader;
        _29 = warp::reject::custom::<server::Error>(move _30) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        _38 = Result::<(), Rejection>::Err(move _29);
        goto -> bb21;
    }

    bb20: {
        _31 = ();
        _38 = Result::<(), Rejection>::Ok(move _31);
        goto -> bb21;
    }

    bb21: {
        drop(_5) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        drop(_4) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        _35 = discriminant(_3);
        switchInt(move _35) -> [1: bb36, otherwise: bb35];
    }

    bb24 (cleanup): {
        drop(_23) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        _32 = const false;
        drop(_13) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_5) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_4) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        _37 = discriminant(_3);
        switchInt(move _37) -> [1: bb42, otherwise: bb29];
    }

    bb29 (cleanup): {
        _33 = const false;
        _44 = deref_copy (_1.0: &mut {async fn body@src/server.rs:390:28: 409:2});
        discriminant((*_44)) = 2;
        resume;
    }

    bb30: {
        drop(_23) -> [return: bb17, unwind: bb25];
    }

    bb31: {
        switchInt(_32) -> [0: bb30, otherwise: bb32];
    }

    bb32: {
        drop(((_14 as Ok).0: jsonwebtoken::TokenData<configuration::Claims>)) -> [return: bb30, unwind: bb24];
    }

    bb33: {
        drop(_14) -> [return: bb30, unwind: bb24];
    }

    bb34: {
        _34 = discriminant(_14);
        switchInt(move _34) -> [0: bb31, otherwise: bb33];
    }

    bb35: {
        _33 = const false;
        _0 = Poll::<Result<(), Rejection>>::Ready(move _38);
        _43 = deref_copy (_1.0: &mut {async fn body@src/server.rs:390:28: 409:2});
        discriminant((*_43)) = 1;
        return;
    }

    bb36: {
        switchInt(_33) -> [0: bb35, otherwise: bb37];
    }

    bb37: {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb35, unwind: bb29];
    }

    bb38 (cleanup): {
        switchInt(_32) -> [0: bb24, otherwise: bb39];
    }

    bb39 (cleanup): {
        drop(((_14 as Ok).0: jsonwebtoken::TokenData<configuration::Claims>)) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_14) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        _36 = discriminant(_14);
        switchInt(move _36) -> [0: bb38, otherwise: bb40];
    }

    bb42 (cleanup): {
        switchInt(_33) -> [0: bb29, otherwise: bb43];
    }

    bb43 (cleanup): {
        drop(((_3 as Some).0: std::string::String)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb44: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb44, unwind continue];
    }

    bb45: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb45, unwind continue];
    }

    bb46: {
        unreachable;
    }
}

fn check_webui(_1: Arc<std::sync::RwLock<Configuration>>) -> {async fn body@src/server.rs:411:83: 418:2} {
    debug config => _1;
    let mut _0: {async fn body@src/server.rs:411:83: 418:2};

    bb0: {
        _0 = {coroutine@src/server.rs:411:83: 418:2 (#0)} { config: move _1 };
        return;
    }
}

fn check_webui::{closure#0}(_1: Pin<&mut {async fn body@src/server.rs:411:83: 418:2}>, _2: &mut std::task::Context<'_>) -> Poll<Result<(), Rejection>> {
    debug _task_context => _2;
    debug config => ((*(_1.0: &mut {async fn body@src/server.rs:411:83: 418:2})).0: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
    let mut _0: std::task::Poll<std::result::Result<(), warp::Rejection>>;
    let _3: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _5: std::result::Result<std::sync::RwLockReadGuard<'_, configuration::Configuration>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, configuration::Configuration>>>;
    let _6: &std::sync::RwLock<configuration::Configuration>;
    let mut _7: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _8: bool;
    let mut _9: &configuration::Configuration;
    let mut _10: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _11: ();
    let mut _12: warp::Rejection;
    let mut _13: std::result::Result<(), warp::Rejection>;
    let mut _14: u32;
    let mut _15: &mut {async fn body@src/server.rs:411:83: 418:2};
    let mut _16: &mut {async fn body@src/server.rs:411:83: 418:2};
    let mut _17: &mut {async fn body@src/server.rs:411:83: 418:2};
    let mut _18: &mut {async fn body@src/server.rs:411:83: 418:2};
    scope 1 {
        debug config => _3;
        let _4: std::sync::RwLockReadGuard<'_, configuration::Configuration>;
        scope 2 {
            debug config => _4;
        }
    }

    bb0: {
        _15 = deref_copy (_1.0: &mut {async fn body@src/server.rs:411:83: 418:2});
        _14 = discriminant((*_15));
        switchInt(move _14) -> [0: bb1, 1: bb16, 2: bb15, otherwise: bb17];
    }

    bb1: {
        _16 = deref_copy (_1.0: &mut {async fn body@src/server.rs:411:83: 418:2});
        _3 = move ((*_16).0: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
        _7 = &_3;
        _6 = <Arc<std::sync::RwLock<Configuration>> as Deref>::deref(move _7) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _5 = std::sync::RwLock::<Configuration>::read(_6) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _4 = Result::<std::sync::RwLockReadGuard<'_, Configuration>, PoisonError<std::sync::RwLockReadGuard<'_, Configuration>>>::unwrap(move _5) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _10 = &_4;
        _9 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _10) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _8 = (((*_9).5: configuration::WebUI).0: bool);
        switchInt(move _8) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _11 = ();
        _13 = Result::<(), Rejection>::Ok(move _11);
        goto -> bb9;
    }

    bb7: {
        _12 = not_found() -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _13 = Result::<(), Rejection>::Err(move _12);
        goto -> bb9;
    }

    bb9: {
        drop(_4) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        drop(_3) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _0 = Poll::<Result<(), Rejection>>::Ready(move _13);
        _17 = deref_copy (_1.0: &mut {async fn body@src/server.rs:411:83: 418:2});
        discriminant((*_17)) = 1;
        return;
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        _18 = deref_copy (_1.0: &mut {async fn body@src/server.rs:411:83: 418:2});
        discriminant((*_18)) = 2;
        resume;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }

    bb17: {
        unreachable;
    }
}

fn check_sse(_1: Arc<std::sync::RwLock<Configuration>>) -> {async fn body@src/server.rs:420:81: 427:2} {
    debug config => _1;
    let mut _0: {async fn body@src/server.rs:420:81: 427:2};

    bb0: {
        _0 = {coroutine@src/server.rs:420:81: 427:2 (#0)} { config: move _1 };
        return;
    }
}

fn check_sse::{closure#0}(_1: Pin<&mut {async fn body@src/server.rs:420:81: 427:2}>, _2: &mut std::task::Context<'_>) -> Poll<Result<(), Rejection>> {
    debug _task_context => _2;
    debug config => ((*(_1.0: &mut {async fn body@src/server.rs:420:81: 427:2})).0: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
    let mut _0: std::task::Poll<std::result::Result<(), warp::Rejection>>;
    let _3: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _5: std::result::Result<std::sync::RwLockReadGuard<'_, configuration::Configuration>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, configuration::Configuration>>>;
    let _6: &std::sync::RwLock<configuration::Configuration>;
    let mut _7: &std::sync::Arc<std::sync::RwLock<configuration::Configuration>>;
    let mut _8: bool;
    let mut _9: &configuration::Configuration;
    let mut _10: &std::sync::RwLockReadGuard<'_, configuration::Configuration>;
    let mut _11: ();
    let mut _12: warp::Rejection;
    let mut _13: std::result::Result<(), warp::Rejection>;
    let mut _14: u32;
    let mut _15: &mut {async fn body@src/server.rs:420:81: 427:2};
    let mut _16: &mut {async fn body@src/server.rs:420:81: 427:2};
    let mut _17: &mut {async fn body@src/server.rs:420:81: 427:2};
    let mut _18: &mut {async fn body@src/server.rs:420:81: 427:2};
    scope 1 {
        debug config => _3;
        let _4: std::sync::RwLockReadGuard<'_, configuration::Configuration>;
        scope 2 {
            debug config => _4;
        }
    }

    bb0: {
        _15 = deref_copy (_1.0: &mut {async fn body@src/server.rs:420:81: 427:2});
        _14 = discriminant((*_15));
        switchInt(move _14) -> [0: bb1, 1: bb16, 2: bb15, otherwise: bb17];
    }

    bb1: {
        _16 = deref_copy (_1.0: &mut {async fn body@src/server.rs:420:81: 427:2});
        _3 = move ((*_16).0: std::sync::Arc<std::sync::RwLock<configuration::Configuration>>);
        _7 = &_3;
        _6 = <Arc<std::sync::RwLock<Configuration>> as Deref>::deref(move _7) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _5 = std::sync::RwLock::<Configuration>::read(_6) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _4 = Result::<std::sync::RwLockReadGuard<'_, Configuration>, PoisonError<std::sync::RwLockReadGuard<'_, Configuration>>>::unwrap(move _5) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _10 = &_4;
        _9 = <std::sync::RwLockReadGuard<'_, Configuration> as Deref>::deref(move _10) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _8 = (((*_9).4: configuration::ServerSentEvent).0: bool);
        switchInt(move _8) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _11 = ();
        _13 = Result::<(), Rejection>::Ok(move _11);
        goto -> bb9;
    }

    bb7: {
        _12 = not_found() -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _13 = Result::<(), Rejection>::Err(move _12);
        goto -> bb9;
    }

    bb9: {
        drop(_4) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        drop(_3) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _0 = Poll::<Result<(), Rejection>>::Ready(move _13);
        _17 = deref_copy (_1.0: &mut {async fn body@src/server.rs:420:81: 427:2});
        discriminant((*_17)) = 1;
        return;
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        _18 = deref_copy (_1.0: &mut {async fn body@src/server.rs:420:81: 427:2});
        discriminant((*_18)) = 2;
        resume;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }

    bb17: {
        unreachable;
    }
}

fn sse_event_stream(_1: tokio::sync::broadcast::Receiver<SseMessage>) -> stream::filter_map::FilterMap<tokio::sync::broadcast::Receiver<SseMessage>, {closure@src/server.rs:433:25: 433:35}> {
    debug event_rx => _1;
    let mut _0: tokio::stream::filter_map::FilterMap<tokio::sync::broadcast::Receiver<server::SseMessage>, {closure@src/server.rs:433:25: 433:35}>;

    bb0: {
        _0 = <tokio::sync::broadcast::Receiver<SseMessage> as StreamExt>::filter_map::<Result<(sse::SseEvent<std::string::String>, sse::SseData<std::string::String>), warp::Error>, {closure@src/server.rs:433:25: 433:35}>(move _1, const ZeroSized: {closure@src/server.rs:433:25: 433:35}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sse_event_stream::{closure#0}(_1: &mut {closure@src/server.rs:433:25: 433:35}, _2: Result<SseMessage, tokio::sync::broadcast::RecvError>) -> std::option::Option<Result<(sse::SseEvent<std::string::String>, sse::SseData<std::string::String>), warp::Error>> {
    debug msg => _2;
    let mut _0: std::option::Option<std::result::Result<(warp::sse::SseEvent<std::string::String>, warp::sse::SseData<std::string::String>), warp::Error>>;
    let mut _3: isize;
    let mut _4: isize;
    let _5: server::SseMessage;
    let mut _6: std::result::Result<(warp::sse::SseEvent<std::string::String>, warp::sse::SseData<std::string::String>), warp::Error>;
    let mut _7: (warp::sse::SseEvent<std::string::String>, warp::sse::SseData<std::string::String>);
    let mut _8: warp::sse::SseEvent<std::string::String>;
    let mut _9: std::string::String;
    let mut _10: warp::sse::SseData<std::string::String>;
    let mut _11: std::string::String;
    let _12: u64;
    let mut _14: bool;
    let mut _15: &log::Level;
    let mut _16: bool;
    let mut _17: &log::Level;
    let mut _18: &log::LevelFilter;
    let _19: log::LevelFilter;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &u64;
    let mut _28: log::Level;
    let mut _29: !;
    let mut _33: std::result::Result<(impl warp::sse::ServerSentEvent, impl warp::sse::ServerSentEvent), warp::Error>;
    let mut _34: std::option::Option<std::result::Result<(impl warp::sse::ServerSentEvent, impl warp::sse::ServerSentEvent), warp::Error>>;
    let mut _35: std::option::Option<std::result::Result<(impl warp::sse::ServerSentEvent, impl warp::sse::ServerSentEvent), warp::Error>>;
    let mut _36: bool;
    scope 1 {
        debug msg => _5;
    }
    scope 2 {
        debug lag => _12;
        let _13: log::Level;
        scope 3 {
            debug lvl => _13;
            let mut _30: &(&str, &str, &str, u32);
            let mut _31: &[&str; 2];
            let mut _32: &log::LevelFilter;
        }
    }

    bb0: {
        _36 = const false;
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb4, 1: bb1, otherwise: bb3];
    }

    bb1: {
        _3 = discriminant(((_2 as Err).0: tokio::sync::broadcast::RecvError));
        switchInt(move _3) -> [0: bb2, 1: bb7, otherwise: bb3];
    }

    bb2: {
        _29 = panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _36 = const true;
        _5 = move ((_2 as Ok).0: server::SseMessage);
        _9 = move (_5.0: std::string::String);
        _8 = event::<std::string::String>(move _9) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _36 = const false;
        _11 = move (_5.1: std::string::String);
        _10 = warp::sse::data::<std::string::String>(move _11) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _7 = (move _8, move _10);
        _33 = Result::<(impl warp::sse::ServerSentEvent, impl warp::sse::ServerSentEvent), warp::Error>::Ok(move _7);
        _6 = move (_33 as subtype Result<(sse::SseEvent<std::string::String>, sse::SseData<std::string::String>), warp::Error>);
        _34 = std::option::Option::<Result<(impl warp::sse::ServerSentEvent, impl warp::sse::ServerSentEvent), warp::Error>>::Some(move _6);
        _0 = move (_34 as subtype std::option::Option<Result<(sse::SseEvent<std::string::String>, sse::SseData<std::string::String>), warp::Error>>);
        _36 = const false;
        goto -> bb17;
    }

    bb7: {
        _12 = ((((_2 as Err).0: tokio::sync::broadcast::RecvError) as Lagged).0: u64);
        _13 = log::Level::Warn;
        _15 = &_13;
        _32 = const _;
        _14 = <Level as PartialOrd<LevelFilter>>::le(move _15, _32) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _14) -> [0: bb15, otherwise: bb9];
    }

    bb9: {
        _17 = &_13;
        _19 = max_level() -> [return: bb10, unwind continue];
    }

    bb10: {
        _18 = &_19;
        _16 = <Level as PartialOrd<LevelFilter>>::le(move _17, move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _16) -> [0: bb15, otherwise: bb12];
    }

    bb12: {
        _31 = const _;
        _22 = _31 as &[&str] (PointerCoercion(Unsize));
        _27 = &_12;
        _26 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_27) -> [return: bb13, unwind continue];
    }

    bb13: {
        _25 = [move _26];
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _23) -> [return: bb14, unwind continue];
    }

    bb14: {
        _28 = _13;
        _30 = const _;
        _20 = __private_api_log(move _21, move _28, _30) -> [return: bb15, unwind continue];
    }

    bb15: {
        _35 = std::option::Option::<Result<(impl warp::sse::ServerSentEvent, impl warp::sse::ServerSentEvent), warp::Error>>::None;
        _0 = move (_35 as subtype std::option::Option<Result<(sse::SseEvent<std::string::String>, sse::SseData<std::string::String>), warp::Error>>);
        goto -> bb17;
    }

    bb16 (cleanup): {
        drop(_8) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop((_5.1: std::string::String)) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_36) -> [0: bb20, otherwise: bb18];
    }

    bb20 (cleanup): {
        resume;
    }
}

promoted[0] in sse_event_stream::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid::server";
        _2 = &(*_3);
        _1 = (move _2, const "lucid::server", const "src/server.rs", const 436_u32);
        _0 = &_1;
        return;
    }
}

promoted[1] in sse_event_stream::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "SSE stream lagged, ", const " events lost"];
        _0 = &_1;
        return;
    }
}

promoted[2] in sse_event_stream::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn process_error(_1: Rejection) -> {async fn body@src/server.rs:443:73: 473:2} {
    debug err => _1;
    let mut _0: {async fn body@src/server.rs:443:73: 473:2};

    bb0: {
        _0 = {coroutine@src/server.rs:443:73: 473:2 (#0)} { err: move _1 };
        return;
    }
}

fn process_error::{closure#0}(_1: Pin<&mut {async fn body@src/server.rs:443:73: 473:2}>, _2: &mut std::task::Context<'_>) -> Poll<Result<WithStatus<warp::reply::Json>, Rejection>> {
    debug _task_context => _2;
    debug err => ((*(_1.0: &mut {async fn body@src/server.rs:443:73: 473:2})).0: warp::Rejection);
    let mut _0: std::task::Poll<std::result::Result<warp::reply::WithStatus<warp::reply::Json>, warp::Rejection>>;
    let _3: warp::Rejection;
    let mut _4: std::option::Option<&server::Error>;
    let mut _5: &warp::Rejection;
    let mut _6: isize;
    let mut _9: isize;
    let _11: &server::JsonMessage;
    let _12: server::JsonMessage;
    let mut _13: std::string::String;
    let mut _14: warp::reply::WithStatus<warp::reply::Json>;
    let mut _15: warp::reply::Json;
    let mut _16: warp::http::StatusCode;
    let mut _17: std::option::Option<&warp::reject::MethodNotAllowed>;
    let mut _18: &warp::Rejection;
    let mut _19: isize;
    let _22: &server::JsonMessage;
    let _23: server::JsonMessage;
    let mut _24: std::string::String;
    let _25: &str;
    let mut _26: warp::reply::WithStatus<warp::reply::Json>;
    let mut _27: warp::reply::Json;
    let mut _28: std::option::Option<&warp::reject::PayloadTooLarge>;
    let mut _29: &warp::Rejection;
    let mut _30: isize;
    let _33: &server::JsonMessage;
    let _34: server::JsonMessage;
    let mut _35: std::string::String;
    let _36: &str;
    let mut _37: warp::reply::WithStatus<warp::reply::Json>;
    let mut _38: warp::reply::Json;
    let mut _39: warp::Rejection;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: std::result::Result<warp::reply::WithStatus<warp::reply::Json>, warp::Rejection>;
    let mut _45: u32;
    let mut _46: &mut {async fn body@src/server.rs:443:73: 473:2};
    let mut _47: &mut {async fn body@src/server.rs:443:73: 473:2};
    let mut _48: &mut {async fn body@src/server.rs:443:73: 473:2};
    let mut _49: &mut {async fn body@src/server.rs:443:73: 473:2};
    scope 1 {
        debug err => _3;
        scope 2 {
            debug err => _7;
            let _7: &server::Error;
            let _8: warp::http::StatusCode;
            scope 3 {
                debug code => _8;
                let _10: warp::reply::Json;
                scope 4 {
                    debug json => _10;
                }
            }
        }
        scope 5 {
            let _20: warp::http::StatusCode;
            scope 6 {
                debug code => const _;
                let _21: warp::reply::Json;
                scope 7 {
                    debug json => _21;
                }
            }
        }
        scope 8 {
            let _31: warp::http::StatusCode;
            scope 9 {
                debug code => const _;
                let _32: warp::reply::Json;
                scope 10 {
                    debug json => _32;
                }
            }
        }
    }

    bb0: {
        _46 = deref_copy (_1.0: &mut {async fn body@src/server.rs:443:73: 473:2});
        _45 = discriminant((*_46));
        switchInt(move _45) -> [0: bb1, 1: bb50, 2: bb49, otherwise: bb5];
    }

    bb1: {
        _40 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const true;
        _47 = deref_copy (_1.0: &mut {async fn body@src/server.rs:443:73: 473:2});
        _3 = move ((*_47).0: warp::Rejection);
        _5 = &_3;
        _4 = Rejection::find::<server::Error>(move _5) -> [return: bb2, unwind: bb40];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [1: bb3, otherwise: bb17];
    }

    bb3: {
        _7 = ((_4 as Some).0: &server::Error);
        _9 = discriminant((*_7));
        switchInt(move _9) -> [0: bb6, 1: bb7, 2: bb8, 3: bb9, 4: bb10, 5: bb11, 6: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = const _;
        goto -> bb12;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = const _;
        goto -> bb12;
    }

    bb7: {
        _8 = const _;
        goto -> bb12;
    }

    bb8: {
        _8 = const _;
        goto -> bb12;
    }

    bb9: {
        _8 = const _;
        goto -> bb12;
    }

    bb10: {
        _8 = const _;
        goto -> bb12;
    }

    bb11: {
        _8 = const _;
        goto -> bb12;
    }

    bb12: {
        _13 = <server::Error as ToString>::to_string(_7) -> [return: bb13, unwind: bb39];
    }

    bb13: {
        _12 = JsonMessage { message: move _13 };
        _11 = &_12;
        _10 = warp::reply::json::<JsonMessage>(_11) -> [return: bb14, unwind: bb38];
    }

    bb14: {
        _43 = const true;
        drop(_12) -> [return: bb15, unwind: bb48];
    }

    bb15: {
        _43 = const false;
        _15 = move _10;
        _16 = _8;
        _14 = with_status::<warp::reply::Json>(move _15, move _16) -> [return: bb16, unwind: bb48];
    }

    bb16: {
        _44 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _14);
        _43 = const false;
        goto -> bb32;
    }

    bb17: {
        _18 = &_3;
        _17 = Rejection::find::<MethodNotAllowed>(move _18) -> [return: bb18, unwind: bb40];
    }

    bb18: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [1: bb19, otherwise: bb24];
    }

    bb19: {
        _20 = const _;
        _25 = const "Method not allowed.";
        _24 = <str as ToString>::to_string(_25) -> [return: bb20, unwind: bb37];
    }

    bb20: {
        _23 = JsonMessage { message: move _24 };
        _22 = &_23;
        _21 = warp::reply::json::<JsonMessage>(_22) -> [return: bb21, unwind: bb36];
    }

    bb21: {
        _42 = const true;
        drop(_23) -> [return: bb22, unwind: bb46];
    }

    bb22: {
        _42 = const false;
        _27 = move _21;
        _26 = with_status::<warp::reply::Json>(move _27, _20) -> [return: bb23, unwind: bb46];
    }

    bb23: {
        _44 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _26);
        _42 = const false;
        goto -> bb32;
    }

    bb24: {
        _29 = &_3;
        _28 = Rejection::find::<PayloadTooLarge>(move _29) -> [return: bb25, unwind: bb40];
    }

    bb25: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [1: bb26, otherwise: bb31];
    }

    bb26: {
        _31 = const _;
        _36 = const "Request payload is too long.";
        _35 = <str as ToString>::to_string(_36) -> [return: bb27, unwind: bb35];
    }

    bb27: {
        _34 = JsonMessage { message: move _35 };
        _33 = &_34;
        _32 = warp::reply::json::<JsonMessage>(_33) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        _41 = const true;
        drop(_34) -> [return: bb29, unwind: bb44];
    }

    bb29: {
        _41 = const false;
        _38 = move _32;
        _37 = with_status::<warp::reply::Json>(move _38, _31) -> [return: bb30, unwind: bb44];
    }

    bb30: {
        _44 = Result::<WithStatus<warp::reply::Json>, Rejection>::Ok(move _37);
        _41 = const false;
        goto -> bb32;
    }

    bb31: {
        _40 = const false;
        _39 = move _3;
        _44 = Result::<WithStatus<warp::reply::Json>, Rejection>::Err(move _39);
        goto -> bb32;
    }

    bb32: {
        switchInt(_40) -> [0: bb33, otherwise: bb42];
    }

    bb33: {
        _40 = const false;
        _0 = Poll::<Result<WithStatus<warp::reply::Json>, Rejection>>::Ready(move _44);
        _48 = deref_copy (_1.0: &mut {async fn body@src/server.rs:443:73: 473:2});
        discriminant((*_48)) = 1;
        return;
    }

    bb34 (cleanup): {
        drop(_34) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        _41 = const false;
        goto -> bb40;
    }

    bb36 (cleanup): {
        drop(_23) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        _42 = const false;
        goto -> bb40;
    }

    bb38 (cleanup): {
        drop(_12) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        _43 = const false;
        goto -> bb40;
    }

    bb40 (cleanup): {
        drop(_3) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        _40 = const false;
        _49 = deref_copy (_1.0: &mut {async fn body@src/server.rs:443:73: 473:2});
        discriminant((*_49)) = 2;
        resume;
    }

    bb42: {
        drop(_3) -> [return: bb33, unwind: bb41];
    }

    bb43 (cleanup): {
        drop(_32) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_41) -> [0: bb35, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_21) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_42) -> [0: bb37, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_10) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_43) -> [0: bb39, otherwise: bb47];
    }

    bb49: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb49, unwind continue];
    }

    bb50: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb50, unwind continue];
    }
}

fn server::<impl at src/server.rs:475:10: 475:15>::fmt(_1: &server::Error, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &std::string::String;
    let _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::string::String;
    let _10: &str;
    let _11: &str;
    let _12: &std::string::String;
    let _13: &str;
    let _14: &str;
    let mut _15: &dyn std::fmt::Debug;
    let _16: &&std::string::String;
    let _17: &str;
    let _18: &u64;
    let _19: &str;
    let _20: &str;
    let mut _21: &dyn std::fmt::Debug;
    let _22: &&u64;
    scope 1 {
        debug __self_0 => _5;
    }
    scope 2 {
        debug __self_0 => _12;
    }
    scope 3 {
        debug __self_0 => _18;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb1, otherwise: bb2];
    }

    bb1: {
        _18 = &(((*_1) as ValueSizeLimit).0: u64);
        _19 = const "ValueSizeLimit";
        _20 = const "max_limit";
        _22 = &_18;
        _21 = _22 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _19, _20, move _21) -> [return: bb9, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = const "MissingBody";
        _0 = Formatter::<'_>::write_str(_2, _4) -> [return: bb9, unwind continue];
    }

    bb4: {
        _5 = &(((*_1) as MissingParameter).0: std::string::String);
        _6 = const "MissingParameter";
        _7 = const "parameter";
        _9 = &_5;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _6, _7, move _8) -> [return: bb9, unwind continue];
    }

    bb5: {
        _10 = const "MissingAuthHeader";
        _0 = Formatter::<'_>::write_str(_2, _10) -> [return: bb9, unwind continue];
    }

    bb6: {
        _11 = const "KeyNotFound";
        _0 = Formatter::<'_>::write_str(_2, _11) -> [return: bb9, unwind continue];
    }

    bb7: {
        _12 = &(((*_1) as InvalidOperation).0: std::string::String);
        _13 = const "InvalidOperation";
        _14 = const "operation";
        _16 = &_12;
        _15 = _16 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _13, _14, move _15) -> [return: bb9, unwind continue];
    }

    bb8: {
        _17 = const "InvalidJwtToken";
        _0 = Formatter::<'_>::write_str(_2, _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fmt(_1: &MissingBody, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "MissingBody";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::clone(_1: &MissingBody) -> MissingBody {
    debug self => _1;
    let mut _0: server::MissingBody;

    bb0: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fail(_1: MissingBody) -> Result<__T, server::Error> {
    debug self => const MissingBody;
    let mut _0: std::result::Result<__T, server::Error>;
    scope 1 {
        let _2: server::Error;
        scope 2 {
            debug error => _2;
        }
    }

    bb0: {
        _2 = server::Error::MissingBody;
        _0 = Result::<__T, server::Error>::Err(move _2);
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::into_error(_1: MissingBody, _2: NoneError) -> server::Error {
    debug self => const MissingBody;
    debug error => const NoneError;
    let mut _0: server::Error;

    bb0: {
        _0 = server::Error::MissingBody;
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fmt(_1: &MissingParameter<__T0>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&__T0;
    let _7: &__T0;

    bb0: {
        _3 = const "MissingParameter";
        _4 = const "parameter";
        _7 = &((*_1).0: __T0);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::clone(_1: &MissingParameter<__T0>) -> MissingParameter<__T0> {
    debug self => _1;
    let mut _0: server::MissingParameter<__T0>;
    let mut _2: __T0;
    let _3: &__T0;

    bb0: {
        _3 = &((*_1).0: __T0);
        _2 = <__T0 as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = MissingParameter::<__T0> { parameter: move _2 };
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fail(_1: MissingParameter<__T0>) -> Result<__T, server::Error> {
    debug self => _1;
    let mut _0: std::result::Result<__T, server::Error>;
    let _2: __T0;
    let mut _4: std::string::String;
    scope 1 {
        debug parameter => _2;
        let _3: server::Error;
        scope 2 {
            debug error => _3;
        }
    }

    bb0: {
        _2 = move (_1.0: __T0);
        _4 = <__T0 as Into<std::string::String>>::into(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = server::Error::MissingParameter { parameter: move _4 };
        _0 = Result::<__T, server::Error>::Err(move _3);
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::into_error(_1: MissingParameter<__T0>, _2: NoneError) -> server::Error {
    debug self => _1;
    debug error => const NoneError;
    let mut _0: server::Error;
    let mut _3: std::string::String;
    let mut _4: __T0;

    bb0: {
        _4 = move (_1.0: __T0);
        _3 = <__T0 as Into<std::string::String>>::into(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = server::Error::MissingParameter { parameter: move _3 };
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fmt(_1: &MissingAuthHeader, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "MissingAuthHeader";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::clone(_1: &MissingAuthHeader) -> MissingAuthHeader {
    debug self => _1;
    let mut _0: server::MissingAuthHeader;

    bb0: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fail(_1: MissingAuthHeader) -> Result<__T, server::Error> {
    debug self => const MissingAuthHeader;
    let mut _0: std::result::Result<__T, server::Error>;
    scope 1 {
        let _2: server::Error;
        scope 2 {
            debug error => _2;
        }
    }

    bb0: {
        _2 = server::Error::MissingAuthHeader;
        _0 = Result::<__T, server::Error>::Err(move _2);
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::into_error(_1: MissingAuthHeader, _2: NoneError) -> server::Error {
    debug self => const MissingAuthHeader;
    debug error => const NoneError;
    let mut _0: server::Error;

    bb0: {
        _0 = server::Error::MissingAuthHeader;
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fmt(_1: &KeyNotFound, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "KeyNotFound";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::clone(_1: &KeyNotFound) -> KeyNotFound {
    debug self => _1;
    let mut _0: server::KeyNotFound;

    bb0: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fail(_1: KeyNotFound) -> Result<__T, server::Error> {
    debug self => const KeyNotFound;
    let mut _0: std::result::Result<__T, server::Error>;
    scope 1 {
        let _2: server::Error;
        scope 2 {
            debug error => _2;
        }
    }

    bb0: {
        _2 = server::Error::KeyNotFound;
        _0 = Result::<__T, server::Error>::Err(move _2);
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::into_error(_1: KeyNotFound, _2: NoneError) -> server::Error {
    debug self => const KeyNotFound;
    debug error => const NoneError;
    let mut _0: server::Error;

    bb0: {
        _0 = server::Error::KeyNotFound;
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fmt(_1: &InvalidOperation<__T0>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&__T0;
    let _7: &__T0;

    bb0: {
        _3 = const "InvalidOperation";
        _4 = const "operation";
        _7 = &((*_1).0: __T0);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::clone(_1: &InvalidOperation<__T0>) -> InvalidOperation<__T0> {
    debug self => _1;
    let mut _0: server::InvalidOperation<__T0>;
    let mut _2: __T0;
    let _3: &__T0;

    bb0: {
        _3 = &((*_1).0: __T0);
        _2 = <__T0 as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = InvalidOperation::<__T0> { operation: move _2 };
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fail(_1: InvalidOperation<__T0>) -> Result<__T, server::Error> {
    debug self => _1;
    let mut _0: std::result::Result<__T, server::Error>;
    let _2: __T0;
    let mut _4: std::string::String;
    scope 1 {
        debug operation => _2;
        let _3: server::Error;
        scope 2 {
            debug error => _3;
        }
    }

    bb0: {
        _2 = move (_1.0: __T0);
        _4 = <__T0 as Into<std::string::String>>::into(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = server::Error::InvalidOperation { operation: move _4 };
        _0 = Result::<__T, server::Error>::Err(move _3);
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::into_error(_1: InvalidOperation<__T0>, _2: NoneError) -> server::Error {
    debug self => _1;
    debug error => const NoneError;
    let mut _0: server::Error;
    let mut _3: std::string::String;
    let mut _4: __T0;

    bb0: {
        _4 = move (_1.0: __T0);
        _3 = <__T0 as Into<std::string::String>>::into(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = server::Error::InvalidOperation { operation: move _3 };
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fmt(_1: &InvalidJwtToken, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "InvalidJwtToken";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::clone(_1: &InvalidJwtToken) -> InvalidJwtToken {
    debug self => _1;
    let mut _0: server::InvalidJwtToken;

    bb0: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fail(_1: InvalidJwtToken) -> Result<__T, server::Error> {
    debug self => const InvalidJwtToken;
    let mut _0: std::result::Result<__T, server::Error>;
    scope 1 {
        let _2: server::Error;
        scope 2 {
            debug error => _2;
        }
    }

    bb0: {
        _2 = server::Error::InvalidJwtToken;
        _0 = Result::<__T, server::Error>::Err(move _2);
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::into_error(_1: InvalidJwtToken, _2: NoneError) -> server::Error {
    debug self => const InvalidJwtToken;
    debug error => const NoneError;
    let mut _0: server::Error;

    bb0: {
        _0 = server::Error::InvalidJwtToken;
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fmt(_1: &ValueSizeLimit<__T0>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&__T0;
    let _7: &__T0;

    bb0: {
        _3 = const "ValueSizeLimit";
        _4 = const "max_limit";
        _7 = &((*_1).0: __T0);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::clone(_1: &ValueSizeLimit<__T0>) -> ValueSizeLimit<__T0> {
    debug self => _1;
    let mut _0: server::ValueSizeLimit<__T0>;
    let mut _2: __T0;
    let _3: &__T0;

    bb0: {
        _3 = &((*_1).0: __T0);
        _2 = <__T0 as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = ValueSizeLimit::<__T0> { max_limit: move _2 };
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fail(_1: ValueSizeLimit<__T0>) -> Result<__T, server::Error> {
    debug self => _1;
    let mut _0: std::result::Result<__T, server::Error>;
    let _2: __T0;
    let mut _4: u64;
    scope 1 {
        debug max_limit => _2;
        let _3: server::Error;
        scope 2 {
            debug error => _3;
        }
    }

    bb0: {
        _2 = move (_1.0: __T0);
        _4 = <__T0 as Into<u64>>::into(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = server::Error::ValueSizeLimit { max_limit: move _4 };
        _0 = Result::<__T, server::Error>::Err(move _3);
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::into_error(_1: ValueSizeLimit<__T0>, _2: NoneError) -> server::Error {
    debug self => _1;
    debug error => const NoneError;
    let mut _0: server::Error;
    let mut _3: u64;
    let mut _4: __T0;

    bb0: {
        _4 = move (_1.0: __T0);
        _3 = <__T0 as Into<u64>>::into(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = server::Error::ValueSizeLimit { max_limit: move _3 };
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::fmt(_1: &server::Error, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __snafu_display_formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &&std::string::String;
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: [core::fmt::rt::Argument<'_>; 1];
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &&std::string::String;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: [core::fmt::rt::Argument<'_>; 1];
    let mut _34: core::fmt::rt::Argument<'_>;
    let _35: &&u64;
    scope 1 {
        let _6: &std::string::String;
        let _18: &std::string::String;
        let _28: &u64;
        let mut _37: &[&str; 1];
        let mut _39: &[&str; 1];
        let mut _40: &[&str; 1];
        let mut _42: &[&str; 1];
        scope 2 {
            debug parameter => _6;
            let mut _41: &[&str; 2];
        }
        scope 3 {
            debug operation => _18;
            let mut _38: &[&str; 2];
        }
        scope 4 {
            debug max_limit => _28;
            let mut _36: &[&str; 2];
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb5, 2: bb8, 3: bb10, 4: bb12, 5: bb15, 6: bb1, otherwise: bb2];
    }

    bb1: {
        _28 = &(((*_1) as ValueSizeLimit).0: u64);
        _36 = const _;
        _30 = _36 as &[&str] (PointerCoercion(Unsize));
        _35 = &_28;
        _34 = core::fmt::rt::Argument::<'_>::new_display::<&u64>(_35) -> [return: bb17, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _42 = const _;
        _5 = _42 as &[&str] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Formatter::<'_>::write_fmt(_2, move _4) -> [return: bb19, unwind continue];
    }

    bb5: {
        _6 = &(((*_1) as MissingParameter).0: std::string::String);
        _41 = const _;
        _8 = _41 as &[&str] (PointerCoercion(Unsize));
        _13 = &_6;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = Formatter::<'_>::write_fmt(_2, move _7) -> [return: bb19, unwind continue];
    }

    bb8: {
        _40 = const _;
        _15 = _40 as &[&str] (PointerCoercion(Unsize));
        _14 = Arguments::<'_>::new_const(move _15) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = Formatter::<'_>::write_fmt(_2, move _14) -> [return: bb19, unwind continue];
    }

    bb10: {
        _39 = const _;
        _17 = _39 as &[&str] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_const(move _17) -> [return: bb11, unwind continue];
    }

    bb11: {
        _0 = Formatter::<'_>::write_fmt(_2, move _16) -> [return: bb19, unwind continue];
    }

    bb12: {
        _18 = &(((*_1) as InvalidOperation).0: std::string::String);
        _38 = const _;
        _20 = _38 as &[&str] (PointerCoercion(Unsize));
        _25 = &_18;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<&std::string::String>(_25) -> [return: bb13, unwind continue];
    }

    bb13: {
        _23 = [move _24];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _19 = Arguments::<'_>::new_v1(move _20, move _21) -> [return: bb14, unwind continue];
    }

    bb14: {
        _0 = Formatter::<'_>::write_fmt(_2, move _19) -> [return: bb19, unwind continue];
    }

    bb15: {
        _37 = const _;
        _27 = _37 as &[&str] (PointerCoercion(Unsize));
        _26 = Arguments::<'_>::new_const(move _27) -> [return: bb16, unwind continue];
    }

    bb16: {
        _0 = Formatter::<'_>::write_fmt(_2, move _26) -> [return: bb19, unwind continue];
    }

    bb17: {
        _33 = [move _34];
        _32 = &_33;
        _31 = _32 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _29 = Arguments::<'_>::new_v1(move _30, move _31) -> [return: bb18, unwind continue];
    }

    bb18: {
        _0 = Formatter::<'_>::write_fmt(_2, move _29) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }
}

promoted[0] in server::<impl at src/server.rs:475:17: 475:22>::fmt: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "The maximum allowed value size is ", const " bytes."];
        _0 = &_1;
        return;
    }
}

promoted[1] in server::<impl at src/server.rs:475:17: 475:22>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Invalid JWT token in Authorization header."];
        _0 = &_1;
        return;
    }
}

promoted[2] in server::<impl at src/server.rs:475:17: 475:22>::fmt: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Invalid Operation \"", const "\"."];
        _0 = &_1;
        return;
    }
}

promoted[3] in server::<impl at src/server.rs:475:17: 475:22>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "The specified key does not exist."];
        _0 = &_1;
        return;
    }
}

promoted[4] in server::<impl at src/server.rs:475:17: 475:22>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Missing Authorization header."];
        _0 = &_1;
        return;
    }
}

promoted[5] in server::<impl at src/server.rs:475:17: 475:22>::fmt: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Missing \"", const "\" parameter."];
        _0 = &_1;
        return;
    }
}

promoted[6] in server::<impl at src/server.rs:475:17: 475:22>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Missing request body."];
        _0 = &_1;
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::description(_1: &server::Error) -> &str {
    debug self => _1;
    let mut _0: &str;
    let mut _2: isize;
    let _3: &str;
    let _4: &str;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb1, otherwise: bb2];
    }

    bb1: {
        _9 = const "Error :: ValueSizeLimit";
        _0 = _9;
        goto -> bb9;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = const "Error :: MissingBody";
        _0 = _3;
        goto -> bb9;
    }

    bb4: {
        _4 = const "Error :: MissingParameter";
        _0 = _4;
        goto -> bb9;
    }

    bb5: {
        _5 = const "Error :: MissingAuthHeader";
        _0 = _5;
        goto -> bb9;
    }

    bb6: {
        _6 = const "Error :: KeyNotFound";
        _0 = _6;
        goto -> bb9;
    }

    bb7: {
        _7 = const "Error :: InvalidOperation";
        _0 = _7;
        goto -> bb9;
    }

    bb8: {
        _8 = const "Error :: InvalidJwtToken";
        _0 = _8;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::cause(_1: &server::Error) -> std::option::Option<&dyn StdError> {
    debug self => _1;
    let mut _0: std::option::Option<&dyn snafu::Error>;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb4: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb5: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb6: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb7: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb8: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::source(_1: &server::Error) -> std::option::Option<&dyn StdError> {
    debug self => _1;
    let mut _0: std::option::Option<&dyn snafu::Error>;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb4: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb5: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb6: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb7: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb8: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn server::<impl at src/server.rs:475:17: 475:22>::backtrace(_1: &server::Error) -> std::option::Option<&snafu::Backtrace> {
    debug self => _1;
    let mut _0: std::option::Option<&snafu::Backtrace>;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb9;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb9;
    }

    bb4: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb9;
    }

    bb5: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb9;
    }

    bb6: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb9;
    }

    bb7: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb9;
    }

    bb8: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

const BANNER: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "\n ██╗    ██╗   ██╗ ██████╗██╗██████╗     ██╗  ██╗██╗   ██╗\n ██║    ██║   ██║██╔════╝██║██╔══██╗    ██║ ██╔╝██║   ██║\n ██║    ██║   ██║██║     ██║██║  ██║    ██╔═██╗ ╚██╗ ██╔╝\n ██████╗╚██████╔╝╚██████╗██║██████╔╝    ██║  ██╗ ╚████╔╝\n ╚═════╝ ╚═════╝  ╚═════╝╚═╝╚═════╝     ╚═╝  ╚═╝  ╚═══╝\n\nA Fast, Secure and Distributed KV store with an HTTP API.\nWritten in Rust, Fork us on GitHub (https://github.com/lucid-kv)\n";
        return;
    }
}

const CREDITS: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "+-----------------+-----------------------+--------------------+\n|               Lucid KV Development Credits                   |\n+-----------------+-----------------------+--------------------+\n| Clint Mourlevat | me@clint.network      | Lucid Founder      |\n| Jonathan Serra  | jonathan@blocs.fr     | Core Development   |\n| CephalonRho     | CephalonRho@gmail.com | Core Development   |\n| Rigwild         | me@rigwild.dev        | Web UI Development |\n+-----------------+-----------------------+--------------------+";
        return;
    }
}

fn main() -> Result<(), Error> {
    let mut _0: std::result::Result<(), Error>;
    let mut _1: &mut tokio::runtime::Runtime;
    let mut _2: tokio::runtime::Runtime;
    let mut _3: std::result::Result<tokio::runtime::Runtime, std::io::Error>;
    let mut _4: &mut tokio::runtime::Builder;
    let mut _5: &mut tokio::runtime::Builder;
    let mut _6: &mut tokio::runtime::Builder;
    let mut _7: &mut tokio::runtime::Builder;
    let mut _8: tokio::runtime::Builder;
    let mut _9: {async block@src/main.rs:57:1: 57:15};

    bb0: {
        _8 = tokio::runtime::Builder::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &mut _8;
        _6 = tokio::runtime::Builder::basic_scheduler(move _7) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _5 = tokio::runtime::Builder::threaded_scheduler(_6) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _4 = tokio::runtime::Builder::enable_all(_5) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _3 = tokio::runtime::Builder::build(_4) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _2 = Result::<Runtime, std::io::Error>::unwrap(move _3) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _1 = &mut _2;
        _9 = {coroutine@src/main.rs:57:1: 57:15 (#729)};
        _0 = Runtime::block_on::<{async block@src/main.rs:57:1: 57:15}>(move _1, move _9) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_2) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_8) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_8) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: Pin<&mut {async block@src/main.rs:57:1: 57:15}>, _2: &mut std::task::Context<'_>) -> Poll<Result<(), Error>> {
    debug _task_context => _193;
    let mut _0: std::task::Poll<std::result::Result<(), Error>>;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &yaml_rust::yaml::Yaml;
    let mut _11: &std::vec::Vec<yaml_rust::yaml::Yaml>;
    let mut _12: std::result::Result<std::vec::Vec<yaml_rust::yaml::Yaml>, yaml_rust::scanner::ScanError>;
    let _13: &str;
    let _14: &str;
    let mut _16: clap::App<'_, '_>;
    let mut _17: clap::App<'_, '_>;
    let _18: &&yaml_rust::yaml::Yaml;
    let mut _19: &str;
    let mut _20: &std::string::String;
    let mut _21: std::result::Result<clap::ArgMatches<'_>, clap::Error>;
    let mut _22: isize;
    let mut _23: isize;
    let _26: ();
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let _33: &std::string::String;
    let mut _34: ();
    let mut _36: Error;
    let mut _37: std::option::Option<&str>;
    let mut _38: &clap::ArgMatches<'_>;
    let mut _39: isize;
    let _41: &std::path::Path;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Error>, std::path::PathBuf>;
    let mut _43: std::result::Result<std::path::PathBuf, Error>;
    let mut _44: std::result::Result<std::path::PathBuf, app_dirs::AppDirsError>;
    let mut _45: GetConfigDir;
    let mut _46: isize;
    let mut _49: bool;
    let _50: &std::path::Path;
    let mut _51: &std::path::PathBuf;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Error>, configuration::Configuration>;
    let mut _53: std::result::Result<configuration::Configuration, Error>;
    let mut _54: std::result::Result<configuration::Configuration, serde_yaml::Error>;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Error>, std::fs::File>;
    let mut _56: std::result::Result<std::fs::File, Error>;
    let mut _57: std::result::Result<std::fs::File, std::io::Error>;
    let mut _58: &std::path::PathBuf;
    let mut _59: OpenConfigFile;
    let mut _60: isize;
    let mut _63: ReadConfigFile;
    let mut _64: isize;
    let mut _67: bool;
    let mut _68: &clap::ArgMatches<'_>;
    let mut _69: bool;
    let _70: ();
    let mut _71: std::fmt::Arguments<'_>;
    let mut _72: &[&str];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: [core::fmt::rt::Argument<'_>; 1];
    let mut _76: core::fmt::rt::Argument<'_>;
    let mut _78: fern::colors::ColoredLevelConfig;
    let mut _79: fern::colors::ColoredLevelConfig;
    let mut _80: fern::colors::ColoredLevelConfig;
    let mut _81: fern::colors::ColoredLevelConfig;
    let mut _82: fern::colors::Color;
    let mut _83: fern::colors::Color;
    let mut _84: fern::colors::Color;
    let mut _85: fern::colors::Color;
    let mut _87: std::slice::Iter<'_, configuration::LogOutput>;
    let mut _88: &std::vec::Vec<configuration::LogOutput>;
    let mut _90: std::option::Option<&configuration::LogOutput>;
    let mut _91: &mut std::slice::Iter<'_, configuration::LogOutput>;
    let mut _92: isize;
    let mut _94: fern::Dispatch;
    let mut _95: isize;
    let mut _97: fern::Dispatch;
    let mut _98: fern::Dispatch;
    let mut _99: fern::Dispatch;
    let mut _100: std::option::Option<fern::colors::ColoredLevelConfig>;
    let mut _101: std::fs::File;
    let mut _102: std::result::Result<std::fs::File, std::io::Error>;
    let mut _104: bool;
    let mut _105: fern::Dispatch;
    let mut _106: fern::Dispatch;
    let mut _107: fern::Dispatch;
    let mut _108: std::option::Option<fern::colors::ColoredLevelConfig>;
    let mut _109: std::io::Stdout;
    let mut _110: fern::Dispatch;
    let mut _111: fern::Dispatch;
    let mut _112: fern::Dispatch;
    let mut _113: std::option::Option<fern::colors::ColoredLevelConfig>;
    let mut _114: std::io::Stdout;
    let mut _116: bool;
    let mut _117: fern::Dispatch;
    let mut _118: fern::Dispatch;
    let mut _119: fern::Dispatch;
    let mut _120: std::option::Option<fern::colors::ColoredLevelConfig>;
    let mut _121: std::io::Stderr;
    let mut _122: fern::Dispatch;
    let mut _123: fern::Dispatch;
    let mut _124: fern::Dispatch;
    let mut _125: std::option::Option<fern::colors::ColoredLevelConfig>;
    let mut _126: std::io::Stderr;
    let _127: ();
    let mut _128: std::result::Result<(), log::SetLoggerError>;
    let mut _129: fern::Dispatch;
    let _130: &str;
    let _131: ();
    let mut _132: log::LevelFilter;
    let mut _133: std::result::Result<(), Error>;
    let mut _134: {async fn body@src/main.rs:155:24: 195:2};
    let mut _135: {async fn body@src/main.rs:155:24: 195:2};
    let mut _136: clap::ArgMatches<'_>;
    let mut _137: configuration::Configuration;
    let _138: &std::path::Path;
    let _139: &std::path::PathBuf;
    let mut _140: std::task::Poll<std::result::Result<(), Error>>;
    let mut _141: std::pin::Pin<&mut {async fn body@src/main.rs:155:24: 195:2}>;
    let mut _142: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _143: &mut std::task::Context<'_>;
    let mut _144: isize;
    let mut _146: isize;
    let mut _149: bool;
    let mut _150: &log::Level;
    let mut _151: bool;
    let mut _152: &log::Level;
    let mut _153: &log::LevelFilter;
    let _154: log::LevelFilter;
    let _155: ();
    let mut _156: std::fmt::Arguments<'_>;
    let mut _157: &[&str];
    let mut _158: &[core::fmt::rt::Argument<'_>];
    let _159: &[core::fmt::rt::Argument<'_>; 1];
    let _160: [core::fmt::rt::Argument<'_>; 1];
    let mut _161: core::fmt::rt::Argument<'_>;
    let _162: &Error;
    let mut _163: log::Level;
    let mut _164: ();
    let mut _171: &&str;
    let mut _172: &[&str; 2];
    let mut _173: &yaml_rust::yaml::Yaml;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: bool;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: std::result::Result<(), Error>;
    let mut _193: &mut std::task::Context<'_>;
    let mut _194: u32;
    let mut _195: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _196: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _197: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _198: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _199: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _200: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _201: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _202: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _203: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _204: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _205: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _206: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _207: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _208: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _209: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _210: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _211: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _212: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _213: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _214: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _215: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _216: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _217: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _218: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _219: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _220: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _221: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _222: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _223: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _224: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _225: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _226: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _227: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _228: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _229: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _230: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _231: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _232: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _233: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _234: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _235: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _236: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _237: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _238: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _239: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _240: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _241: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _242: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _243: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _244: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _245: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _246: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _247: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _248: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _249: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _250: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _251: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _252: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _253: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _254: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _255: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _256: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _257: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _258: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _259: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _260: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _261: &mut {async block@src/main.rs:57:1: 57:15};
    let mut _262: &mut {async block@src/main.rs:57:1: 57:15};
    scope 1 {
        debug long_version => (((*(_1.0: &mut {async block@src/main.rs:57:1: 57:15})) as variant#3).0: std::string::String);
        scope 3 {
            debug cli_yaml => (((*(_1.0: &mut {async block@src/main.rs:57:1: 57:15})) as variant#3).1: &yaml_rust::yaml::Yaml);
            let _15: clap::App<'_, '_>;
            scope 4 {
                debug app => _15;
                let _24: clap::ArgMatches<'_>;
                let _25: std::string::String;
                let _35: clap::Error;
                scope 5 {
                    debug matches => (((*(_1.0: &mut {async block@src/main.rs:57:1: 57:15})) as variant#3).3: clap::ArgMatches<'_>);
                    let _47: std::result::Result<std::convert::Infallible, Error>;
                    let _48: std::path::PathBuf;
                    scope 9 {
                        debug config_path => (((*(_1.0: &mut {async block@src/main.rs:57:1: 57:15})) as variant#3).4: std::path::PathBuf);
                        let _61: std::result::Result<std::convert::Infallible, Error>;
                        let _62: std::fs::File;
                        let _65: std::result::Result<std::convert::Infallible, Error>;
                        let _66: configuration::Configuration;
                        scope 15 {
                            debug config => (((*(_1.0: &mut {async block@src/main.rs:57:1: 57:15})) as variant#3).5: configuration::Configuration);
                            let _77: fern::colors::ColoredLevelConfig;
                            let mut _169: &&str;
                            let mut _170: &[&str; 2];
                            scope 24 {
                                debug logging_colors => _77;
                                let mut _86: fern::Dispatch;
                                scope 25 {
                                    debug dispatch => _86;
                                    let mut _89: std::slice::Iter<'_, configuration::LogOutput>;
                                    scope 26 {
                                        debug iter => _89;
                                        let _93: &configuration::LogOutput;
                                        scope 27 {
                                            debug output => _93;
                                            let _96: &std::path::PathBuf;
                                            let _103: &bool;
                                            let _115: &bool;
                                            scope 28 {
                                                debug path => _96;
                                            }
                                            scope 29 {
                                                debug colored => _103;
                                            }
                                            scope 30 {
                                                debug colored => _115;
                                            }
                                        }
                                    }
                                    scope 31 {
                                        debug e => _147;
                                        let _147: Error;
                                        let _148: log::Level;
                                        scope 32 {
                                            debug __awaitee => (((*(_1.0: &mut {async block@src/main.rs:57:1: 57:15})) as variant#3).6: {async fn body@src/main.rs:155:24: 195:2});
                                            let _145: std::result::Result<(), Error>;
                                            scope 33 {
                                            }
                                            scope 34 {
                                                debug result => _145;
                                            }
                                        }
                                        scope 35 {
                                            debug lvl => _148;
                                            let mut _166: &(&str, &str, &str, u32);
                                            let mut _167: &[&str; 1];
                                            let mut _168: &log::LevelFilter;
                                        }
                                    }
                                }
                            }
                        }
                        scope 16 {
                            debug residual => _61;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug val => _62;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug residual => _65;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug val => _66;
                            scope 23 {
                            }
                        }
                    }
                    scope 10 {
                        debug config => _40;
                        let _40: &str;
                    }
                    scope 11 {
                        debug residual => _47;
                        scope 12 {
                        }
                    }
                    scope 13 {
                        debug val => _48;
                        scope 14 {
                        }
                    }
                }
                scope 6 {
                    debug x => _24;
                }
                scope 7 {
                    debug message => _25;
                    let mut _165: &[&str; 2];
                }
                scope 8 {
                    debug e => _35;
                }
            }
        }
    }
    scope 2 {
        debug res => _3;
    }

    bb0: {
        _195 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _194 = discriminant((*_195));
        switchInt(move _194) -> [0: bb1, 1: bb192, 2: bb191, 3: bb190, otherwise: bb15];
    }

    bb1: {
        _193 = move _2;
        _188 = const false;
        _196 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_196) as variant#3).9: bool) = const false;
        _197 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_197) as variant#3).8: bool) = const false;
        _198 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_198) as variant#3).7: bool) = const false;
        _187 = const false;
        _186 = const false;
        _185 = const false;
        _184 = const false;
        _183 = const false;
        _182 = const false;
        _181 = const false;
        _180 = const false;
        _179 = const false;
        _178 = const false;
        _177 = const false;
        _176 = const false;
        _175 = const false;
        _174 = const false;
        _172 = const _;
        _5 = _172 as &[&str] (PointerCoercion(Unsize));
        _171 = const _;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_171) -> [return: bb2, unwind: bb189];
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind: bb189];
    }

    bb3: {
        _3 = std::fmt::format(move _4) -> [return: bb4, unwind: bb189];
    }

    bb4: {
        _199 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_199) as variant#3).0: std::string::String) = move _3;
        _13 = const "name: \"Lucid\"\nauthor: &author \"Written in Rust, Fork us on GitHub (https://github.com/lucid-kv)\"\ntemplate: &template |-4\n\n     ██╗    ██╗   ██╗ ██████╗██╗██████╗     ██╗  ██╗██╗   ██╗\n     ██║    ██║   ██║██╔════╝██║██╔══██╗    ██║ ██╔╝██║   ██║\n     ██║    ██║   ██║██║     ██║██║  ██║    ██╔═██╗ ╚██╗ ██╔╝\n     ██████╗╚██████╔╝╚██████╗██║██████╔╝    ██║  ██╗ ╚████╔╝\n     ╚═════╝ ╚═════╝  ╚═════╝╚═╝╚═════╝     ╚═╝  ╚═╝  ╚═══╝\n\n    A Fast, Secure and Distributed KV store with an HTTP API.\n    Written in Rust, Fork us on GitHub (https://github.com/lucid-kv)\n\n    {all-args}\nsettings:\n  - \"GlobalVersion\"\n  - \"SubcommandRequiredElseHelp\"\nargs:\n  - config:\n      help: \"Specify the Lucid configuration file\"\n      short: \"c\"\n      long: \"config\"\n      takes_value: true\n  - no-banner:\n      help: \"Disable showing the banner on start\"\n      long: \"no-banner\"\nsubcommands:\n  - init:\n      about: \"Initialize Lucid and generate configuration file\"\n      author: *author\n      template: *template\n      args:\n        - secret:\n            help: \"Set the JWT secret\"\n            short: \"s\"\n            long: \"secret\"\n            takes_value: true\n        - force:\n            help: \"Initialize Lucid and overwrite existing configuration file\"\n            short: \"f\"\n            long: \"force\"\n            takes_value: false\n  - server:\n      about: \"Run a new Lucid server instance\"\n      author: *author\n      template: *template\n  - settings:\n      about: \"Manage the Lucid configuration file\"\n      author: *author\n      template: *template";
        _12 = YamlLoader::load_from_str(_13) -> [return: bb5, unwind: bb158];
    }

    bb5: {
        _14 = const "failed to load YAML file";
        _200 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_200) as variant#3).2: std::vec::Vec<yaml_rust::yaml::Yaml>) = Result::<Vec<yaml_rust::yaml::Yaml>, yaml_rust::scanner::ScanError>::expect(move _12, _14) -> [return: bb6, unwind: bb158];
    }

    bb6: {
        _201 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _11 = &(((*_201) as variant#3).2: std::vec::Vec<yaml_rust::yaml::Yaml>);
        _10 = <Vec<yaml_rust::yaml::Yaml> as std::ops::Index<usize>>::index(move _11, const 0_usize) -> [return: bb7, unwind: bb157];
    }

    bb7: {
        _202 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_202) as variant#3).1: &yaml_rust::yaml::Yaml) = _10;
        _203 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _18 = &(((*_203) as variant#3).1: &yaml_rust::yaml::Yaml);
        _173 = deref_copy (*_18);
        _17 = App::<'_, '_>::from_yaml(_173) -> [return: bb8, unwind: bb156];
    }

    bb8: {
        _16 = App::<'_, '_>::version::<&str>(move _17, const "0.1.4") -> [return: bb9, unwind: bb156];
    }

    bb9: {
        _188 = const true;
        _204 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _20 = &(((*_204) as variant#3).0: std::string::String);
        _19 = std::string::String::as_str(move _20) -> [return: bb10, unwind: bb155];
    }

    bb10: {
        _188 = const false;
        _15 = App::<'_, '_>::long_version::<&str>(move _16, move _19) -> [return: bb11, unwind: bb155];
    }

    bb11: {
        _188 = const false;
        _21 = App::<'_, '_>::get_matches_safe(move _15) -> [return: bb12, unwind: bb153];
    }

    bb12: {
        _175 = const true;
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb13, otherwise: bb15];
    }

    bb13: {
        _22 = discriminant((((_21 as Err).0: clap::Error).1: clap::ErrorKind));
        switchInt(move _22) -> [12: bb20, 15: bb18, 16: bb19, otherwise: bb14];
    }

    bb14: {
        _175 = const false;
        _35 = move ((_21 as Err).0: clap::Error);
        _36 = Error::ParseCli { source: move _35 };
        _192 = Result::<(), Error>::Err(move _36);
        goto -> bb168;
    }

    bb15: {
        unreachable;
    }

    bb16: {
        _24 = move ((_21 as Ok).0: clap::ArgMatches<'_>);
        _205 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_205) as variant#3).9: bool) = const true;
        _206 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_206) as variant#3).3: clap::ArgMatches<'_>) = move _24;
        _175 = const false;
        _207 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _38 = &(((*_207) as variant#3).3: clap::ArgMatches<'_>);
        _37 = ArgMatches::<'_>::value_of::<&str>(move _38, const "config") -> [return: bb24, unwind: bb186];
    }

    bb17: {
        _165 = const _;
        _28 = _165 as &[&str] (PointerCoercion(Unsize));
        _33 = &_25;
        _32 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_33) -> [return: bb21, unwind: bb151];
    }

    bb18: {
        _25 = move (((_21 as Err).0: clap::Error).0: std::string::String);
        goto -> bb17;
    }

    bb19: {
        _25 = move (((_21 as Err).0: clap::Error).0: std::string::String);
        goto -> bb17;
    }

    bb20: {
        _25 = move (((_21 as Err).0: clap::Error).0: std::string::String);
        goto -> bb17;
    }

    bb21: {
        _31 = [move _32];
        _30 = &_31;
        _29 = _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _27 = Arguments::<'_>::new_v1(move _28, move _29) -> [return: bb22, unwind: bb151];
    }

    bb22: {
        _26 = _print(move _27) -> [return: bb23, unwind: bb151];
    }

    bb23: {
        _34 = ();
        _192 = Result::<(), Error>::Ok(move _34);
        drop(_25) -> [return: bb168, unwind: bb152];
    }

    bb24: {
        _39 = discriminant(_37);
        switchInt(move _39) -> [1: bb25, otherwise: bb27];
    }

    bb25: {
        _40 = ((_37 as Some).0: &str);
        _41 = Path::new::<str>(_40) -> [return: bb26, unwind: bb186];
    }

    bb26: {
        _208 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_208) as variant#3).4: std::path::PathBuf) = Path::to_path_buf(_41) -> [return: bb193, unwind: bb186];
    }

    bb27: {
        _44 = Configuration::get_path() -> [return: bb28, unwind: bb186];
    }

    bb28: {
        _45 = GetConfigDir;
        _43 = <Result<PathBuf, AppDirsError> as ResultExt<PathBuf, AppDirsError>>::context::<GetConfigDir, Error>(move _44, move _45) -> [return: bb29, unwind: bb186];
    }

    bb29: {
        _42 = <Result<PathBuf, Error> as Try>::branch(move _43) -> [return: bb30, unwind: bb186];
    }

    bb30: {
        _46 = discriminant(_42);
        switchInt(move _46) -> [0: bb31, 1: bb32, otherwise: bb15];
    }

    bb31: {
        _48 = move ((_42 as Continue).0: std::path::PathBuf);
        _209 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_209) as variant#3).4: std::path::PathBuf) = move _48;
        goto -> bb33;
    }

    bb32: {
        _47 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, Error>);
        _192 = <Result<(), Error> as FromResidual<Result<Infallible, Error>>>::from_residual(move _47) -> [return: bb194, unwind: bb186];
    }

    bb33: {
        _210 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _51 = &(((*_210) as variant#3).4: std::path::PathBuf);
        _50 = <PathBuf as Deref>::deref(move _51) -> [return: bb34, unwind: bb150];
    }

    bb34: {
        _49 = Path::exists(_50) -> [return: bb35, unwind: bb150];
    }

    bb35: {
        switchInt(move _49) -> [0: bb47, otherwise: bb36];
    }

    bb36: {
        _211 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _58 = &(((*_211) as variant#3).4: std::path::PathBuf);
        _57 = std::fs::File::open::<&PathBuf>(move _58) -> [return: bb37, unwind: bb150];
    }

    bb37: {
        _59 = OpenConfigFile;
        _56 = <Result<std::fs::File, std::io::Error> as ResultExt<std::fs::File, std::io::Error>>::context::<OpenConfigFile, Error>(move _57, move _59) -> [return: bb38, unwind: bb150];
    }

    bb38: {
        _55 = <Result<std::fs::File, Error> as Try>::branch(move _56) -> [return: bb39, unwind: bb150];
    }

    bb39: {
        _60 = discriminant(_55);
        switchInt(move _60) -> [0: bb40, 1: bb41, otherwise: bb15];
    }

    bb40: {
        _62 = move ((_55 as Continue).0: std::fs::File);
        _54 = from_reader::<std::fs::File, Configuration>(move _62) -> [return: bb42, unwind: bb150];
    }

    bb41: {
        _61 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, Error>);
        _192 = <Result<(), Error> as FromResidual<Result<Infallible, Error>>>::from_residual(move _61) -> [return: bb195, unwind: bb150];
    }

    bb42: {
        _63 = ReadConfigFile;
        _53 = <Result<Configuration, serde_yaml::Error> as ResultExt<Configuration, serde_yaml::Error>>::context::<ReadConfigFile, Error>(move _54, move _63) -> [return: bb43, unwind: bb150];
    }

    bb43: {
        _52 = <Result<Configuration, Error> as Try>::branch(move _53) -> [return: bb44, unwind: bb150];
    }

    bb44: {
        _64 = discriminant(_52);
        switchInt(move _64) -> [0: bb45, 1: bb46, otherwise: bb15];
    }

    bb45: {
        _66 = move ((_52 as Continue).0: configuration::Configuration);
        _212 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_212) as variant#3).8: bool) = const true;
        _213 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_213) as variant#3).5: configuration::Configuration) = move _66;
        goto -> bb48;
    }

    bb46: {
        _65 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, Error>);
        _192 = <Result<(), Error> as FromResidual<Result<Infallible, Error>>>::from_residual(move _65) -> [return: bb196, unwind: bb150];
    }

    bb47: {
        _214 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_214) as variant#3).5: configuration::Configuration) = <Configuration as Default>::default() -> [return: bb159, unwind: bb150];
    }

    bb48: {
        _215 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _68 = &(((*_215) as variant#3).3: clap::ArgMatches<'_>);
        _67 = ArgMatches::<'_>::is_present::<&str>(move _68, const "no-banner") -> [return: bb49, unwind: bb184];
    }

    bb49: {
        switchInt(move _67) -> [0: bb50, otherwise: bb54];
    }

    bb50: {
        _216 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _69 = (((((*_216) as variant#3).5: configuration::Configuration).0: configuration::General).6: bool);
        switchInt(move _69) -> [0: bb54, otherwise: bb51];
    }

    bb51: {
        _170 = const _;
        _72 = _170 as &[&str] (PointerCoercion(Unsize));
        _169 = const _;
        _76 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_169) -> [return: bb52, unwind: bb184];
    }

    bb52: {
        _75 = [move _76];
        _74 = &_75;
        _73 = _74 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _71 = Arguments::<'_>::new_v1(move _72, move _73) -> [return: bb53, unwind: bb184];
    }

    bb53: {
        _70 = _print(move _71) -> [return: bb197, unwind: bb184];
    }

    bb54: {
        _81 = ColoredLevelConfig::new() -> [return: bb55, unwind: bb184];
    }

    bb55: {
        _82 = BrightMagenta;
        _80 = ColoredLevelConfig::debug(move _81, move _82) -> [return: bb56, unwind: bb184];
    }

    bb56: {
        _83 = BrightCyan;
        _79 = ColoredLevelConfig::info(move _80, move _83) -> [return: bb57, unwind: bb184];
    }

    bb57: {
        _84 = BrightYellow;
        _78 = ColoredLevelConfig::warn(move _79, move _84) -> [return: bb58, unwind: bb184];
    }

    bb58: {
        _85 = BrightRed;
        _77 = ColoredLevelConfig::error(move _78, move _85) -> [return: bb59, unwind: bb184];
    }

    bb59: {
        _86 = Dispatch::new() -> [return: bb60, unwind: bb149];
    }

    bb60: {
        _217 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_217) as variant#3).7: bool) = const true;
        _218 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _88 = &(((((*_218) as variant#3).5: configuration::Configuration).8: configuration::Logging).1: std::vec::Vec<configuration::LogOutput>);
        _87 = <&Vec<LogOutput> as IntoIterator>::into_iter(move _88) -> [return: bb61, unwind: bb182];
    }

    bb61: {
        _89 = move _87;
        goto -> bb62;
    }

    bb62: {
        _91 = &mut _89;
        _90 = <std::slice::Iter<'_, LogOutput> as Iterator>::next(_91) -> [return: bb63, unwind: bb182];
    }

    bb63: {
        _92 = discriminant(_90);
        switchInt(move _92) -> [0: bb65, 1: bb64, otherwise: bb15];
    }

    bb64: {
        _93 = ((_90 as Some).0: &configuration::LogOutput);
        _95 = discriminant((*_93));
        switchInt(move _95) -> [0: bb67, 1: bb73, 2: bb66, otherwise: bb15];
    }

    bb65: {
        _219 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_219) as variant#3).7: bool) = const false;
        _129 = move _86;
        _128 = Dispatch::apply(move _129) -> [return: bb95, unwind: bb182];
    }

    bb66: {
        _115 = &(((*_93) as Stderr).0: bool);
        _116 = (*_115);
        switchInt(move _116) -> [0: bb89, otherwise: bb84];
    }

    bb67: {
        _96 = &(((*_93) as File).0: std::path::PathBuf);
        _220 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_220) as variant#3).7: bool) = const false;
        _187 = const true;
        _97 = move _86;
        _100 = std::option::Option::<ColoredLevelConfig>::None;
        _99 = create_format_dispatch(move _100) -> [return: bb68, unwind: bb146];
    }

    bb68: {
        _186 = const true;
        _102 = log_file::<&PathBuf>(_96) -> [return: bb69, unwind: bb145];
    }

    bb69: {
        _101 = Result::<std::fs::File, std::io::Error>::unwrap(move _102) -> [return: bb70, unwind: bb145];
    }

    bb70: {
        _186 = const false;
        _98 = Dispatch::chain::<std::fs::File>(move _99, move _101) -> [return: bb71, unwind: bb145];
    }

    bb71: {
        _186 = const false;
        _187 = const false;
        _94 = Dispatch::chain::<Dispatch>(move _97, move _98) -> [return: bb72, unwind: bb147];
    }

    bb72: {
        _187 = const false;
        goto -> bb94;
    }

    bb73: {
        _103 = &(((*_93) as Stdout).0: bool);
        _104 = (*_103);
        switchInt(move _104) -> [0: bb79, otherwise: bb74];
    }

    bb74: {
        _221 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_221) as variant#3).7: bool) = const false;
        _185 = const true;
        _105 = move _86;
        _108 = std::option::Option::<ColoredLevelConfig>::Some(_77);
        _107 = create_format_dispatch(move _108) -> [return: bb75, unwind: bb142];
    }

    bb75: {
        _184 = const true;
        _109 = std::io::stdout() -> [return: bb76, unwind: bb141];
    }

    bb76: {
        _184 = const false;
        _106 = Dispatch::chain::<std::io::Stdout>(move _107, move _109) -> [return: bb77, unwind: bb141];
    }

    bb77: {
        _184 = const false;
        _185 = const false;
        _94 = Dispatch::chain::<Dispatch>(move _105, move _106) -> [return: bb78, unwind: bb143];
    }

    bb78: {
        _185 = const false;
        goto -> bb94;
    }

    bb79: {
        _222 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_222) as variant#3).7: bool) = const false;
        _183 = const true;
        _110 = move _86;
        _113 = std::option::Option::<ColoredLevelConfig>::None;
        _112 = create_format_dispatch(move _113) -> [return: bb80, unwind: bb138];
    }

    bb80: {
        _182 = const true;
        _114 = std::io::stdout() -> [return: bb81, unwind: bb137];
    }

    bb81: {
        _182 = const false;
        _111 = Dispatch::chain::<std::io::Stdout>(move _112, move _114) -> [return: bb82, unwind: bb137];
    }

    bb82: {
        _182 = const false;
        _183 = const false;
        _94 = Dispatch::chain::<Dispatch>(move _110, move _111) -> [return: bb83, unwind: bb139];
    }

    bb83: {
        _183 = const false;
        goto -> bb94;
    }

    bb84: {
        _223 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_223) as variant#3).7: bool) = const false;
        _181 = const true;
        _117 = move _86;
        _120 = std::option::Option::<ColoredLevelConfig>::Some(_77);
        _119 = create_format_dispatch(move _120) -> [return: bb85, unwind: bb134];
    }

    bb85: {
        _180 = const true;
        _121 = std::io::stderr() -> [return: bb86, unwind: bb133];
    }

    bb86: {
        _180 = const false;
        _118 = Dispatch::chain::<std::io::Stderr>(move _119, move _121) -> [return: bb87, unwind: bb133];
    }

    bb87: {
        _180 = const false;
        _181 = const false;
        _94 = Dispatch::chain::<Dispatch>(move _117, move _118) -> [return: bb88, unwind: bb135];
    }

    bb88: {
        _181 = const false;
        goto -> bb94;
    }

    bb89: {
        _224 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_224) as variant#3).7: bool) = const false;
        _179 = const true;
        _122 = move _86;
        _125 = std::option::Option::<ColoredLevelConfig>::None;
        _124 = create_format_dispatch(move _125) -> [return: bb90, unwind: bb130];
    }

    bb90: {
        _178 = const true;
        _126 = std::io::stderr() -> [return: bb91, unwind: bb129];
    }

    bb91: {
        _178 = const false;
        _123 = Dispatch::chain::<std::io::Stderr>(move _124, move _126) -> [return: bb92, unwind: bb129];
    }

    bb92: {
        _178 = const false;
        _179 = const false;
        _94 = Dispatch::chain::<Dispatch>(move _122, move _123) -> [return: bb93, unwind: bb131];
    }

    bb93: {
        _179 = const false;
        goto -> bb94;
    }

    bb94: {
        _225 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_225) as variant#3).7: bool) = const true;
        _86 = move _94;
        goto -> bb62;
    }

    bb95: {
        _130 = const "Couldn't start logger.";
        _127 = Result::<(), log::SetLoggerError>::expect(move _128, _130) -> [return: bb96, unwind: bb182];
    }

    bb96: {
        _226 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _132 = (((((*_226) as variant#3).5: configuration::Configuration).8: configuration::Logging).0: log::LevelFilter);
        _131 = set_max_level(move _132) -> [return: bb97, unwind: bb182];
    }

    bb97: {
        _227 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_227) as variant#3).9: bool) = const false;
        _177 = const true;
        _228 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _136 = move (((*_228) as variant#3).3: clap::ArgMatches<'_>);
        _229 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_229) as variant#3).8: bool) = const false;
        _176 = const true;
        _230 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _137 = move (((*_230) as variant#3).5: configuration::Configuration);
        _231 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _139 = &(((*_231) as variant#3).4: std::path::PathBuf);
        _138 = <PathBuf as Deref>::deref(_139) -> [return: bb98, unwind: bb125];
    }

    bb98: {
        _177 = const false;
        _176 = const false;
        _135 = start(move _136, move _137, _138) -> [return: bb99, unwind: bb125];
    }

    bb99: {
        _176 = const false;
        _177 = const false;
        _134 = <{async fn body@src/main.rs:155:24: 195:2} as IntoFuture>::into_future(move _135) -> [return: bb100, unwind: bb128];
    }

    bb100: {
        _232 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_232) as variant#3).6: {async fn body@src/main.rs:155:24: 195:2}) = move _134;
        goto -> bb101;
    }

    bb101: {
        _233 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        _142 = &mut (((*_233) as variant#3).6: {async fn body@src/main.rs:155:24: 195:2});
        _141 = Pin::<&mut {async fn body@src/main.rs:155:24: 195:2}>::new_unchecked(_142) -> [return: bb102, unwind: bb124];
    }

    bb102: {
        _143 = _193;
        _140 = <{async fn body@src/main.rs:155:24: 195:2} as Future>::poll(move _141, _143) -> [return: bb103, unwind: bb124];
    }

    bb103: {
        _144 = discriminant(_140);
        switchInt(move _144) -> [0: bb105, 1: bb104, otherwise: bb15];
    }

    bb104: {
        _0 = Poll::<Result<(), Error>>::Pending;
        _234 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        discriminant((*_234)) = 3;
        return;
    }

    bb105: {
        _145 = move ((_140 as Ready).0: std::result::Result<(), Error>);
        _174 = const true;
        _133 = move _145;
        _235 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_235) as variant#3).6: {async fn body@src/main.rs:155:24: 195:2})) -> [return: bb106, unwind: bb128];
    }

    bb106: {
        _146 = discriminant(_133);
        switchInt(move _146) -> [1: bb107, otherwise: bb163];
    }

    bb107: {
        _174 = const false;
        _147 = move ((_133 as Err).0: Error);
        _148 = log::Level::Error;
        _150 = &_148;
        _168 = const _;
        _149 = <Level as PartialOrd<LevelFilter>>::le(move _150, _168) -> [return: bb108, unwind: bb123];
    }

    bb108: {
        switchInt(move _149) -> [0: bb115, otherwise: bb109];
    }

    bb109: {
        _152 = &_148;
        _154 = max_level() -> [return: bb110, unwind: bb123];
    }

    bb110: {
        _153 = &_154;
        _151 = <Level as PartialOrd<LevelFilter>>::le(move _152, move _153) -> [return: bb111, unwind: bb123];
    }

    bb111: {
        switchInt(move _151) -> [0: bb115, otherwise: bb112];
    }

    bb112: {
        _167 = const _;
        _157 = _167 as &[&str] (PointerCoercion(Unsize));
        _162 = &_147;
        _161 = core::fmt::rt::Argument::<'_>::new_display::<Error>(_162) -> [return: bb113, unwind: bb123];
    }

    bb113: {
        _160 = [move _161];
        _159 = &_160;
        _158 = _159 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _156 = Arguments::<'_>::new_v1(move _157, move _158) -> [return: bb114, unwind: bb123];
    }

    bb114: {
        _163 = _148;
        _166 = const _;
        _155 = __private_api_log(move _156, move _163, _166) -> [return: bb198, unwind: bb123];
    }

    bb115: {
        drop(_147) -> [return: bb163, unwind: bb128];
    }

    bb116: {
        _239 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_239) as variant#3).9: bool) = const false;
        _240 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_240) as variant#3).2: std::vec::Vec<yaml_rust::yaml::Yaml>)) -> [return: bb117, unwind: bb158];
    }

    bb117: {
        _241 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_241) as variant#3).0: std::string::String)) -> [return: bb122, unwind: bb189];
    }

    bb118: {
        _242 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_242) as variant#3).8: bool) = const false;
        _243 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_243) as variant#3).4: std::path::PathBuf)) -> [return: bb119, unwind: bb186];
    }

    bb119: {
        _244 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_244) as variant#3).3: clap::ArgMatches<'_>)) -> [return: bb120, unwind: bb154];
    }

    bb120: {
        _245 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_245) as variant#3).9: bool) = const false;
        _246 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_246) as variant#3).2: std::vec::Vec<yaml_rust::yaml::Yaml>)) -> [return: bb121, unwind: bb158];
    }

    bb121: {
        _247 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_247) as variant#3).0: std::string::String)) -> [return: bb122, unwind: bb189];
    }

    bb122: {
        _0 = Poll::<Result<(), Error>>::Ready(move _192);
        _248 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        discriminant((*_248)) = 1;
        return;
    }

    bb123 (cleanup): {
        drop(_147) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        _249 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_249) as variant#3).6: {async fn body@src/main.rs:155:24: 195:2})) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        switchInt(_176) -> [0: bb126, otherwise: bb169];
    }

    bb126 (cleanup): {
        _176 = const false;
        switchInt(_177) -> [0: bb127, otherwise: bb170];
    }

    bb127 (cleanup): {
        _177 = const false;
        goto -> bb128;
    }

    bb128 (cleanup): {
        _174 = const false;
        goto -> bb182;
    }

    bb129 (cleanup): {
        switchInt(_178) -> [0: bb130, otherwise: bb171];
    }

    bb130 (cleanup): {
        _178 = const false;
        goto -> bb131;
    }

    bb131 (cleanup): {
        switchInt(_179) -> [0: bb132, otherwise: bb172];
    }

    bb132 (cleanup): {
        _179 = const false;
        goto -> bb182;
    }

    bb133 (cleanup): {
        switchInt(_180) -> [0: bb134, otherwise: bb173];
    }

    bb134 (cleanup): {
        _180 = const false;
        goto -> bb135;
    }

    bb135 (cleanup): {
        switchInt(_181) -> [0: bb136, otherwise: bb174];
    }

    bb136 (cleanup): {
        _181 = const false;
        goto -> bb182;
    }

    bb137 (cleanup): {
        switchInt(_182) -> [0: bb138, otherwise: bb175];
    }

    bb138 (cleanup): {
        _182 = const false;
        goto -> bb139;
    }

    bb139 (cleanup): {
        switchInt(_183) -> [0: bb140, otherwise: bb176];
    }

    bb140 (cleanup): {
        _183 = const false;
        goto -> bb182;
    }

    bb141 (cleanup): {
        switchInt(_184) -> [0: bb142, otherwise: bb177];
    }

    bb142 (cleanup): {
        _184 = const false;
        goto -> bb143;
    }

    bb143 (cleanup): {
        switchInt(_185) -> [0: bb144, otherwise: bb178];
    }

    bb144 (cleanup): {
        _185 = const false;
        goto -> bb182;
    }

    bb145 (cleanup): {
        switchInt(_186) -> [0: bb146, otherwise: bb179];
    }

    bb146 (cleanup): {
        _186 = const false;
        goto -> bb147;
    }

    bb147 (cleanup): {
        switchInt(_187) -> [0: bb148, otherwise: bb180];
    }

    bb148 (cleanup): {
        _187 = const false;
        goto -> bb182;
    }

    bb149 (cleanup): {
        _250 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_250) as variant#3).7: bool) = const false;
        goto -> bb184;
    }

    bb150 (cleanup): {
        _251 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_251) as variant#3).8: bool) = const false;
        _252 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_252) as variant#3).4: std::path::PathBuf)) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_25) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        _191 = discriminant(_21);
        switchInt(move _191) -> [0: bb153, otherwise: bb187];
    }

    bb153 (cleanup): {
        _175 = const false;
        goto -> bb154;
    }

    bb154 (cleanup): {
        _253 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_253) as variant#3).9: bool) = const false;
        goto -> bb157;
    }

    bb155 (cleanup): {
        switchInt(_188) -> [0: bb156, otherwise: bb188];
    }

    bb156 (cleanup): {
        _188 = const false;
        goto -> bb157;
    }

    bb157 (cleanup): {
        _254 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_254) as variant#3).2: std::vec::Vec<yaml_rust::yaml::Yaml>)) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        _255 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_255) as variant#3).0: std::string::String)) -> [return: bb189, unwind terminate(cleanup)];
    }

    bb159: {
        _256 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_256) as variant#3).8: bool) = const true;
        goto -> bb48;
    }

    bb160: {
        _174 = const false;
        _164 = ();
        _192 = Result::<(), Error>::Ok(move _164);
        _236 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_236) as variant#3).7: bool) = const false;
        _237 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        (((*_237) as variant#3).8: bool) = const false;
        _238 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_238) as variant#3).4: std::path::PathBuf)) -> [return: bb116, unwind: bb186];
    }

    bb161: {
        switchInt(_174) -> [0: bb160, otherwise: bb162];
    }

    bb162: {
        drop(((_133 as Err).0: Error)) -> [return: bb160, unwind: bb128];
    }

    bb163: {
        _189 = discriminant(_133);
        switchInt(move _189) -> [1: bb161, otherwise: bb160];
    }

    bb164: {
        _175 = const false;
        goto -> bb120;
    }

    bb165: {
        switchInt(_175) -> [0: bb166, otherwise: bb167];
    }

    bb166: {
        _175 = const false;
        goto -> bb164;
    }

    bb167: {
        drop((((_21 as Err).0: clap::Error).2: std::option::Option<std::vec::Vec<std::string::String>>)) -> [return: bb166, unwind: bb153];
    }

    bb168: {
        _190 = discriminant(_21);
        switchInt(move _190) -> [0: bb164, otherwise: bb165];
    }

    bb169 (cleanup): {
        drop(_137) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_136) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        drop(_124) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_122) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        drop(_119) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        drop(_117) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_112) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_110) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_107) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_105) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        drop(_99) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        drop(_97) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        drop(_86) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        _257 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        switchInt((((*_257) as variant#3).7: bool)) -> [0: bb149, otherwise: bb181];
    }

    bb183 (cleanup): {
        _258 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_258) as variant#3).5: configuration::Configuration)) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        _259 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        switchInt((((*_259) as variant#3).8: bool)) -> [0: bb150, otherwise: bb183];
    }

    bb185 (cleanup): {
        _260 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        drop((((*_260) as variant#3).3: clap::ArgMatches<'_>)) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        _261 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        switchInt((((*_261) as variant#3).9: bool)) -> [0: bb154, otherwise: bb185];
    }

    bb187 (cleanup): {
        drop((((_21 as Err).0: clap::Error).2: std::option::Option<std::vec::Vec<std::string::String>>)) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_16) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        _262 = deref_copy (_1.0: &mut {async block@src/main.rs:57:1: 57:15});
        discriminant((*_262)) = 2;
        resume;
    }

    bb190: {
        _193 = move _2;
        goto -> bb101;
    }

    bb191: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb191, unwind continue];
    }

    bb192: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb192, unwind continue];
    }

    bb193: {
        goto -> bb33;
    }

    bb194: {
        goto -> bb119;
    }

    bb195: {
        goto -> bb118;
    }

    bb196: {
        goto -> bb118;
    }

    bb197: {
        goto -> bb54;
    }

    bb198: {
        goto -> bb115;
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid";
        _2 = &(*_3);
        _1 = (move _2, const "lucid", const "src/main.rs", const 146_u32);
        _0 = &_1;
        return;
    }
}

promoted[2] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "fatal: "];
        _0 = &_1;
        return;
    }
}

promoted[3] in main::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[5] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in main::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "0.1.4\n", const "\n\nYou can send a tips here: 3BxEYn4RZ3iYETcFpN7nA6VqCY4Hz1tSUK"];
        _0 = &_1;
        return;
    }
}

fn start(_1: ArgMatches<'_>, _2: Configuration, _3: &Path) -> {async fn body@src/main.rs:155:24: 195:2} {
    debug matches => _1;
    debug config => _2;
    debug config_path => _3;
    let mut _0: {async fn body@src/main.rs:155:24: 195:2};

    bb0: {
        _0 = {coroutine@src/main.rs:155:24: 195:2 (#0)} { matches: move _1, config: move _2, config_path: _3 };
        return;
    }
}

fn start::{closure#0}(_1: Pin<&mut {async fn body@src/main.rs:155:24: 195:2}>, _2: &mut std::task::Context<'_>) -> Poll<Result<(), Error>> {
    debug _task_context => _119;
    debug matches => ((*(_1.0: &mut {async fn body@src/main.rs:155:24: 195:2})).0: clap::ArgMatches<'_>);
    debug config => ((*(_1.0: &mut {async fn body@src/main.rs:155:24: 195:2})).1: configuration::Configuration);
    debug config_path => ((*(_1.0: &mut {async fn body@src/main.rs:155:24: 195:2})).2: &std::path::Path);
    let mut _0: std::task::Poll<std::result::Result<(), Error>>;
    let mut _4: std::option::Option<&clap::ArgMatches<'_>>;
    let mut _5: &clap::ArgMatches<'_>;
    let mut _6: isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: Error;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Error>, std::string::String>;
    let mut _14: std::result::Result<std::string::String, Error>;
    let _15: &str;
    let _16: &std::string::String;
    let mut _17: std::option::Option<chrono::DateTime<chrono::Utc>>;
    let mut _18: isize;
    let mut _21: std::string::String;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Error>>;
    let mut _23: std::result::Result<(), Error>;
    let mut _24: std::result::Result<(), std::io::Error>;
    let mut _25: &std::path::Path;
    let mut _26: std::option::Option<&std::path::Path>;
    let mut _27: CreateConfigDir;
    let mut _28: isize;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Error>>;
    let mut _32: std::result::Result<(), Error>;
    let mut _33: std::result::Result<(), serde_yaml::Error>;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Error>, std::fs::File>;
    let mut _35: std::result::Result<std::fs::File, Error>;
    let mut _36: std::result::Result<std::fs::File, std::io::Error>;
    let mut _37: &&std::path::Path;
    let mut _38: CreateConfigFile;
    let mut _39: isize;
    let _42: &configuration::Configuration;
    let mut _43: WriteConfigFile;
    let mut _44: isize;
    let mut _48: bool;
    let mut _49: &log::Level;
    let mut _50: bool;
    let mut _51: &log::Level;
    let mut _52: &log::LevelFilter;
    let _53: log::LevelFilter;
    let _54: ();
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &std::borrow::Cow<'_, str>;
    let _62: std::borrow::Cow<'_, str>;
    let mut _63: log::Level;
    let mut _64: std::option::Option<&clap::ArgMatches<'_>>;
    let mut _65: &clap::ArgMatches<'_>;
    let mut _66: isize;
    let mut _67: bool;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Error>>;
    let mut _69: std::result::Result<(), Error>;
    let mut _70: {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _71: {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _72: &lucid::Lucid;
    let mut _73: configuration::Configuration;
    let mut _74: std::task::Poll<std::result::Result<(), std::io::Error>>;
    let mut _75: std::pin::Pin<&mut {async fn body@src/lucid.rs:17:59: 21:6}>;
    let mut _76: &mut {async fn body@src/lucid.rs:17:59: 21:6};
    let mut _77: &mut std::task::Context<'_>;
    let mut _78: isize;
    let mut _80: RunServer;
    let mut _81: isize;
    let mut _84: Error;
    let mut _85: std::option::Option<&clap::ArgMatches<'_>>;
    let mut _86: &clap::ArgMatches<'_>;
    let mut _87: isize;
    let mut _88: bool;
    let _89: ();
    let mut _90: std::fmt::Arguments<'_>;
    let mut _91: &[&str];
    let mut _92: &[core::fmt::rt::Argument<'_>];
    let _93: &[core::fmt::rt::Argument<'_>; 2];
    let _94: [core::fmt::rt::Argument<'_>; 2];
    let mut _95: core::fmt::rt::Argument<'_>;
    let _96: &&&str;
    let _97: &&str;
    let _98: &str;
    let mut _99: std::option::Option<&str>;
    let mut _100: core::fmt::rt::Argument<'_>;
    let _101: &std::string::String;
    let _102: std::string::String;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Error>, std::string::String>;
    let mut _104: std::result::Result<std::string::String, Error>;
    let mut _105: std::result::Result<std::string::String, std::io::Error>;
    let mut _106: &&std::path::Path;
    let mut _107: OpenConfigFile;
    let mut _108: isize;
    let mut _111: Error;
    let mut _112: ();
    let mut _117: bool;
    let mut _118: std::result::Result<(), Error>;
    let mut _119: &mut std::task::Context<'_>;
    let mut _120: u32;
    let mut _121: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _122: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _123: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _124: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _125: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _126: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _127: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _128: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _129: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _130: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _131: &std::path::Path;
    let mut _132: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _133: &std::path::Path;
    let mut _134: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _135: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _136: &std::path::Path;
    let mut _137: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _138: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _139: &std::path::Path;
    let mut _140: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _141: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _142: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _143: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _144: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _145: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _146: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _147: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _148: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _149: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _150: &std::path::Path;
    let mut _151: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _152: &std::path::Path;
    let mut _153: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _154: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _155: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _156: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _157: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _158: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _159: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _160: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _161: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _162: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _163: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _164: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _165: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _166: &mut {async fn body@src/main.rs:155:24: 195:2};
    let mut _167: &mut {async fn body@src/main.rs:155:24: 195:2};
    scope 1 {
        debug matches => (((*(_1.0: &mut {async fn body@src/main.rs:155:24: 195:2})) as variant#3).0: clap::ArgMatches<'_>);
        let _3: configuration::Configuration;
        scope 2 {
            debug config => _3;
            scope 3 {
                debug config_path => (((*(_1.0: &mut {async fn body@src/main.rs:155:24: 195:2})) as variant#3).1: &std::path::Path);
                scope 4 {
                    debug init_matches => _7;
                    let _7: &clap::ArgMatches<'_>;
                    let mut _11: configuration::Configuration;
                    scope 5 {
                        debug config => _11;
                        let _12: std::string::String;
                        scope 6 {
                            debug secret_key => _12;
                            let _19: std::result::Result<std::convert::Infallible, Error>;
                            let _20: std::string::String;
                            let _29: std::result::Result<std::convert::Infallible, Error>;
                            let _30: ();
                            let _40: std::result::Result<std::convert::Infallible, Error>;
                            let _41: std::fs::File;
                            let _45: std::result::Result<std::convert::Infallible, Error>;
                            let _46: ();
                            let _47: log::Level;
                            scope 7 {
                                debug residual => _19;
                                scope 8 {
                                }
                            }
                            scope 9 {
                                debug val => _20;
                                scope 10 {
                                }
                            }
                            scope 11 {
                                debug residual => _29;
                                scope 12 {
                                }
                            }
                            scope 13 {
                                debug val => _30;
                                scope 14 {
                                }
                            }
                            scope 15 {
                                debug residual => _40;
                                scope 16 {
                                }
                            }
                            scope 17 {
                                debug val => _41;
                                scope 18 {
                                }
                            }
                            scope 19 {
                                debug residual => _45;
                                scope 20 {
                                }
                            }
                            scope 21 {
                                debug val => _46;
                                scope 22 {
                                }
                            }
                            scope 23 {
                                debug lvl => _47;
                                let mut _114: &(&str, &str, &str, u32);
                                let mut _115: &[&str; 1];
                                let mut _116: &log::LevelFilter;
                            }
                        }
                    }
                }
                scope 24 {
                    let _82: std::result::Result<std::convert::Infallible, Error>;
                    let _83: ();
                    scope 25 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@src/main.rs:155:24: 195:2})) as variant#3).3: {async fn body@src/lucid.rs:17:59: 21:6});
                        let _79: std::result::Result<(), std::io::Error>;
                        scope 26 {
                        }
                        scope 27 {
                            debug result => _79;
                        }
                    }
                    scope 28 {
                        debug residual => _82;
                        scope 29 {
                        }
                    }
                    scope 30 {
                        debug val => _83;
                        scope 31 {
                        }
                    }
                }
                scope 32 {
                    let _109: std::result::Result<std::convert::Infallible, Error>;
                    let _110: std::string::String;
                    let mut _113: &[&str; 3];
                    scope 33 {
                        debug residual => _109;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug val => _110;
                        scope 36 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _121 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _120 = discriminant((*_121));
        switchInt(move _120) -> [0: bb1, 1: bb108, 2: bb107, 3: bb106, otherwise: bb15];
    }

    bb1: {
        _119 = move _2;
        _122 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        (((*_122) as variant#3).4: bool) = const false;
        _117 = const false;
        _123 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _124 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        (((*_123) as variant#3).0: clap::ArgMatches<'_>) = move ((*_124).0: clap::ArgMatches<'_>);
        _125 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        (((*_125) as variant#3).4: bool) = const true;
        _126 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _3 = move ((*_126).1: configuration::Configuration);
        _127 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _128 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        (((*_127) as variant#3).1: &std::path::Path) = ((*_128).2: &std::path::Path);
        _129 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _5 = &(((*_129) as variant#3).0: clap::ArgMatches<'_>);
        _4 = ArgMatches::<'_>::subcommand_matches::<&str>(move _5, const "init") -> [return: bb2, unwind: bb104];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [1: bb3, otherwise: bb48];
    }

    bb3: {
        _7 = ((_4 as Some).0: &clap::ArgMatches<'_>);
        _130 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _131 = deref_copy (((*_130) as variant#3).1: &std::path::Path);
        _8 = Path::exists(_131) -> [return: bb4, unwind: bb104];
    }

    bb4: {
        switchInt(move _8) -> [0: bb8, otherwise: bb5];
    }

    bb5: {
        _9 = ArgMatches::<'_>::is_present::<&str>(_7, const "force") -> [return: bb6, unwind: bb104];
    }

    bb6: {
        switchInt(move _9) -> [0: bb7, otherwise: bb8];
    }

    bb7: {
        _10 = Error::AlreadyInitialized;
        _118 = Result::<(), Error>::Err(move _10);
        goto -> bb100;
    }

    bb8: {
        _11 = <Configuration as Default>::default() -> [return: bb9, unwind: bb104];
    }

    bb9: {
        _12 = generate_secret_key() -> [return: bb10, unwind: bb94];
    }

    bb10: {
        _117 = const true;
        _16 = &_12;
        _15 = <std::string::String as Deref>::deref(_16) -> [return: bb11, unwind: bb102];
    }

    bb11: {
        _17 = std::option::Option::<DateTime<Utc>>::None;
        _14 = issue_jwt(_15, move _17) -> [return: bb12, unwind: bb102];
    }

    bb12: {
        _13 = <Result<std::string::String, Error> as Try>::branch(move _14) -> [return: bb13, unwind: bb102];
    }

    bb13: {
        _18 = discriminant(_13);
        switchInt(move _18) -> [0: bb14, 1: bb16, otherwise: bb15];
    }

    bb14: {
        _20 = move ((_13 as Continue).0: std::string::String);
        drop(((_11.1: configuration::Authentication).1: std::string::String)) -> [return: bb17, unwind: bb18];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        _19 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, Error>);
        _118 = <Result<(), Error> as FromResidual<Result<Infallible, Error>>>::from_residual(move _19) -> [return: bb109, unwind: bb102];
    }

    bb17: {
        ((_11.1: configuration::Authentication).1: std::string::String) = move _20;
        _117 = const false;
        _21 = move _12;
        drop(((_11.1: configuration::Authentication).2: std::string::String)) -> [return: bb19, unwind: bb20];
    }

    bb18 (cleanup): {
        ((_11.1: configuration::Authentication).1: std::string::String) = move _20;
        goto -> bb102;
    }

    bb19: {
        ((_11.1: configuration::Authentication).2: std::string::String) = move _21;
        _132 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _133 = deref_copy (((*_132) as variant#3).1: &std::path::Path);
        _26 = Path::parent(_133) -> [return: bb21, unwind: bb102];
    }

    bb20 (cleanup): {
        ((_11.1: configuration::Authentication).2: std::string::String) = move _21;
        goto -> bb102;
    }

    bb21: {
        _25 = std::option::Option::<&Path>::unwrap(move _26) -> [return: bb22, unwind: bb102];
    }

    bb22: {
        _24 = std::fs::create_dir_all::<&Path>(move _25) -> [return: bb23, unwind: bb102];
    }

    bb23: {
        _27 = CreateConfigDir;
        _23 = <Result<(), std::io::Error> as ResultExt<(), std::io::Error>>::context::<CreateConfigDir, Error>(move _24, move _27) -> [return: bb24, unwind: bb102];
    }

    bb24: {
        _22 = <Result<(), Error> as Try>::branch(move _23) -> [return: bb25, unwind: bb102];
    }

    bb25: {
        _28 = discriminant(_22);
        switchInt(move _28) -> [0: bb26, 1: bb27, otherwise: bb15];
    }

    bb26: {
        _30 = ((_22 as Continue).0: ());
        _134 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _37 = &(((*_134) as variant#3).1: &std::path::Path);
        _36 = std::fs::File::create::<&&Path>(move _37) -> [return: bb28, unwind: bb102];
    }

    bb27: {
        _29 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, Error>);
        _118 = <Result<(), Error> as FromResidual<Result<Infallible, Error>>>::from_residual(move _29) -> [return: bb110, unwind: bb102];
    }

    bb28: {
        _38 = CreateConfigFile;
        _35 = <Result<std::fs::File, std::io::Error> as ResultExt<std::fs::File, std::io::Error>>::context::<CreateConfigFile, Error>(move _36, move _38) -> [return: bb29, unwind: bb102];
    }

    bb29: {
        _34 = <Result<std::fs::File, Error> as Try>::branch(move _35) -> [return: bb30, unwind: bb102];
    }

    bb30: {
        _39 = discriminant(_34);
        switchInt(move _39) -> [0: bb31, 1: bb32, otherwise: bb15];
    }

    bb31: {
        _41 = move ((_34 as Continue).0: std::fs::File);
        _42 = &_11;
        _33 = to_writer::<std::fs::File, Configuration>(move _41, _42) -> [return: bb33, unwind: bb102];
    }

    bb32: {
        _40 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, Error>);
        _118 = <Result<(), Error> as FromResidual<Result<Infallible, Error>>>::from_residual(move _40) -> [return: bb111, unwind: bb102];
    }

    bb33: {
        _43 = WriteConfigFile;
        _32 = <Result<(), serde_yaml::Error> as ResultExt<(), serde_yaml::Error>>::context::<WriteConfigFile, Error>(move _33, move _43) -> [return: bb34, unwind: bb102];
    }

    bb34: {
        _31 = <Result<(), Error> as Try>::branch(move _32) -> [return: bb35, unwind: bb102];
    }

    bb35: {
        _44 = discriminant(_31);
        switchInt(move _44) -> [0: bb36, 1: bb37, otherwise: bb15];
    }

    bb36: {
        _46 = ((_31 as Continue).0: ());
        _47 = log::Level::Info;
        _49 = &_47;
        _116 = const _;
        _48 = <Level as PartialOrd<LevelFilter>>::le(move _49, _116) -> [return: bb38, unwind: bb102];
    }

    bb37: {
        _45 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, Error>);
        _118 = <Result<(), Error> as FromResidual<Result<Infallible, Error>>>::from_residual(move _45) -> [return: bb112, unwind: bb102];
    }

    bb38: {
        switchInt(move _48) -> [0: bb47, otherwise: bb39];
    }

    bb39: {
        _51 = &_47;
        _53 = max_level() -> [return: bb40, unwind: bb102];
    }

    bb40: {
        _52 = &_53;
        _50 = <Level as PartialOrd<LevelFilter>>::le(move _51, move _52) -> [return: bb41, unwind: bb102];
    }

    bb41: {
        switchInt(move _50) -> [0: bb47, otherwise: bb42];
    }

    bb42: {
        _115 = const _;
        _56 = _115 as &[&str] (PointerCoercion(Unsize));
        _135 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _136 = deref_copy (((*_135) as variant#3).1: &std::path::Path);
        _62 = Path::to_string_lossy(_136) -> [return: bb43, unwind: bb102];
    }

    bb43: {
        _61 = &_62;
        _60 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_61) -> [return: bb44, unwind: bb93];
    }

    bb44: {
        _59 = [move _60];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _55 = Arguments::<'_>::new_v1(move _56, move _57) -> [return: bb45, unwind: bb93];
    }

    bb45: {
        _63 = _47;
        _114 = const _;
        _54 = __private_api_log(move _55, move _63, _114) -> [return: bb46, unwind: bb93];
    }

    bb46: {
        drop(_62) -> [return: bb47, unwind: bb102];
    }

    bb47: {
        _117 = const false;
        drop(_11) -> [return: bb48, unwind: bb104];
    }

    bb48: {
        _137 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _65 = &(((*_137) as variant#3).0: clap::ArgMatches<'_>);
        _64 = ArgMatches::<'_>::subcommand_matches::<&str>(move _65, const "server") -> [return: bb49, unwind: bb104];
    }

    bb49: {
        _66 = discriminant(_64);
        switchInt(move _66) -> [1: bb50, otherwise: bb68];
    }

    bb50: {
        _138 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _139 = deref_copy (((*_138) as variant#3).1: &std::path::Path);
        _67 = Path::exists(_139) -> [return: bb51, unwind: bb104];
    }

    bb51: {
        switchInt(move _67) -> [0: bb67, otherwise: bb52];
    }

    bb52: {
        _140 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        (((*_140) as variant#3).4: bool) = const false;
        _73 = move _3;
        _141 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        (((*_141) as variant#3).2: lucid::Lucid) = Lucid::new(move _73) -> [return: bb53, unwind: bb104];
    }

    bb53: {
        _142 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _72 = &(((*_142) as variant#3).2: lucid::Lucid);
        _71 = Lucid::run(move _72) -> [return: bb54, unwind: bb92];
    }

    bb54: {
        _70 = <{async fn body@src/lucid.rs:17:59: 21:6} as IntoFuture>::into_future(move _71) -> [return: bb55, unwind: bb92];
    }

    bb55: {
        _143 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        (((*_143) as variant#3).3: {async fn body@src/lucid.rs:17:59: 21:6}) = move _70;
        goto -> bb56;
    }

    bb56: {
        _144 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _76 = &mut (((*_144) as variant#3).3: {async fn body@src/lucid.rs:17:59: 21:6});
        _75 = Pin::<&mut {async fn body@src/lucid.rs:17:59: 21:6}>::new_unchecked(_76) -> [return: bb57, unwind: bb91];
    }

    bb57: {
        _77 = _119;
        _74 = <{async fn body@src/lucid.rs:17:59: 21:6} as Future>::poll(move _75, _77) -> [return: bb58, unwind: bb91];
    }

    bb58: {
        _78 = discriminant(_74);
        switchInt(move _78) -> [0: bb60, 1: bb59, otherwise: bb15];
    }

    bb59: {
        _0 = Poll::<Result<(), Error>>::Pending;
        _145 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        discriminant((*_145)) = 3;
        return;
    }

    bb60: {
        _79 = move ((_74 as Ready).0: std::result::Result<(), std::io::Error>);
        _146 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        drop((((*_146) as variant#3).3: {async fn body@src/lucid.rs:17:59: 21:6})) -> [return: bb61, unwind: bb92];
    }

    bb61: {
        _80 = RunServer;
        _69 = <Result<(), std::io::Error> as ResultExt<(), std::io::Error>>::context::<RunServer, Error>(move _79, move _80) -> [return: bb62, unwind: bb92];
    }

    bb62: {
        _68 = <Result<(), Error> as Try>::branch(move _69) -> [return: bb63, unwind: bb92];
    }

    bb63: {
        _81 = discriminant(_68);
        switchInt(move _81) -> [0: bb64, 1: bb65, otherwise: bb15];
    }

    bb64: {
        _83 = ((_68 as Continue).0: ());
        _147 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        drop((((*_147) as variant#3).2: lucid::Lucid)) -> [return: bb68, unwind: bb104];
    }

    bb65: {
        _82 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, Error>);
        _118 = <Result<(), Error> as FromResidual<Result<Infallible, Error>>>::from_residual(move _82) -> [return: bb66, unwind: bb92];
    }

    bb66: {
        _156 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        drop((((*_156) as variant#3).2: lucid::Lucid)) -> [return: bb100, unwind: bb104];
    }

    bb67: {
        _84 = Error::ConfigurationNotFound;
        _118 = Result::<(), Error>::Err(move _84);
        goto -> bb100;
    }

    bb68: {
        _148 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _86 = &(((*_148) as variant#3).0: clap::ArgMatches<'_>);
        _85 = ArgMatches::<'_>::subcommand_matches::<&str>(move _86, const "settings") -> [return: bb69, unwind: bb104];
    }

    bb69: {
        _87 = discriminant(_85);
        switchInt(move _87) -> [1: bb70, otherwise: bb85];
    }

    bb70: {
        _149 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _150 = deref_copy (((*_149) as variant#3).1: &std::path::Path);
        _88 = Path::exists(_150) -> [return: bb71, unwind: bb104];
    }

    bb71: {
        switchInt(move _88) -> [0: bb84, otherwise: bb72];
    }

    bb72: {
        _113 = const _;
        _91 = _113 as &[&str] (PointerCoercion(Unsize));
        _151 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _152 = deref_copy (((*_151) as variant#3).1: &std::path::Path);
        _99 = Path::to_str(_152) -> [return: bb73, unwind: bb104];
    }

    bb73: {
        _98 = std::option::Option::<&str>::unwrap(move _99) -> [return: bb74, unwind: bb104];
    }

    bb74: {
        _97 = &_98;
        _96 = &_97;
        _95 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(_96) -> [return: bb75, unwind: bb104];
    }

    bb75: {
        _153 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        _106 = &(((*_153) as variant#3).1: &std::path::Path);
        _105 = std::fs::read_to_string::<&&Path>(move _106) -> [return: bb76, unwind: bb104];
    }

    bb76: {
        _107 = OpenConfigFile;
        _104 = <Result<std::string::String, std::io::Error> as ResultExt<std::string::String, std::io::Error>>::context::<OpenConfigFile, Error>(move _105, move _107) -> [return: bb77, unwind: bb104];
    }

    bb77: {
        _103 = <Result<std::string::String, Error> as Try>::branch(move _104) -> [return: bb78, unwind: bb104];
    }

    bb78: {
        _108 = discriminant(_103);
        switchInt(move _108) -> [0: bb79, 1: bb80, otherwise: bb15];
    }

    bb79: {
        _110 = move ((_103 as Continue).0: std::string::String);
        _102 = move _110;
        _101 = &_102;
        _100 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_101) -> [return: bb81, unwind: bb90];
    }

    bb80: {
        _109 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, Error>);
        _118 = <Result<(), Error> as FromResidual<Result<Infallible, Error>>>::from_residual(move _109) -> [return: bb113, unwind: bb104];
    }

    bb81: {
        _94 = [move _95, move _100];
        _93 = &_94;
        _92 = _93 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _90 = Arguments::<'_>::new_v1(move _91, move _92) -> [return: bb82, unwind: bb90];
    }

    bb82: {
        _89 = _print(move _90) -> [return: bb83, unwind: bb90];
    }

    bb83: {
        drop(_102) -> [return: bb85, unwind: bb104];
    }

    bb84: {
        _111 = Error::ConfigurationNotFound;
        _118 = Result::<(), Error>::Err(move _111);
        goto -> bb100;
    }

    bb85: {
        _112 = ();
        _118 = Result::<(), Error>::Ok(move _112);
        _164 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        switchInt((((*_164) as variant#3).4: bool)) -> [0: bb86, otherwise: bb96];
    }

    bb86: {
        _154 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        (((*_154) as variant#3).4: bool) = const false;
        _155 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        drop((((*_155) as variant#3).0: clap::ArgMatches<'_>)) -> [return: bb89, unwind: bb105];
    }

    bb87: {
        _117 = const false;
        drop(_11) -> [return: bb100, unwind: bb104];
    }

    bb88: {
        _157 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        (((*_157) as variant#3).4: bool) = const false;
        _158 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        drop((((*_158) as variant#3).0: clap::ArgMatches<'_>)) -> [return: bb89, unwind: bb105];
    }

    bb89: {
        _0 = Poll::<Result<(), Error>>::Ready(move _118);
        _159 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        discriminant((*_159)) = 1;
        return;
    }

    bb90 (cleanup): {
        drop(_102) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        _160 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        drop((((*_160) as variant#3).3: {async fn body@src/lucid.rs:17:59: 21:6})) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        _161 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        drop((((*_161) as variant#3).2: lucid::Lucid)) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_62) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        _117 = const false;
        drop(_11) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        _162 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        (((*_162) as variant#3).4: bool) = const false;
        _163 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        drop((((*_163) as variant#3).0: clap::ArgMatches<'_>)) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb96: {
        drop(_3) -> [return: bb86, unwind: bb95];
    }

    bb97: {
        drop(_12) -> [return: bb87, unwind: bb94];
    }

    bb98: {
        switchInt(_117) -> [0: bb87, otherwise: bb97];
    }

    bb99: {
        drop(_3) -> [return: bb88, unwind: bb95];
    }

    bb100: {
        _165 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        switchInt((((*_165) as variant#3).4: bool)) -> [0: bb88, otherwise: bb99];
    }

    bb101 (cleanup): {
        drop(_12) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_117) -> [0: bb94, otherwise: bb101];
    }

    bb103 (cleanup): {
        drop(_3) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        _166 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        switchInt((((*_166) as variant#3).4: bool)) -> [0: bb95, otherwise: bb103];
    }

    bb105 (cleanup): {
        _167 = deref_copy (_1.0: &mut {async fn body@src/main.rs:155:24: 195:2});
        discriminant((*_167)) = 2;
        resume;
    }

    bb106: {
        _119 = move _2;
        goto -> bb56;
    }

    bb107: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb107, unwind continue];
    }

    bb108: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb108, unwind continue];
    }

    bb109: {
        goto -> bb98;
    }

    bb110: {
        goto -> bb98;
    }

    bb111: {
        goto -> bb98;
    }

    bb112: {
        goto -> bb98;
    }

    bb113: {
        goto -> bb100;
    }
}

promoted[0] in start::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "Configuration location: ", const "\n\n", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in start::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32);
    let mut _1: (&str, &str, &str, u32);
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "lucid";
        _2 = &(*_3);
        _1 = (move _2, const "lucid", const "src/main.rs", const 170_u32);
        _0 = &_1;
        return;
    }
}

promoted[2] in start::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Lucid successfully initialized in "];
        _0 = &_1;
        return;
    }
}

promoted[3] in start::{closure#0}: &LevelFilter = {
    let mut _0: &log::LevelFilter;
    let mut _1: log::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn generate_secret_key() -> std::string::String {
    let mut _0: std::string::String;
    let _1: ring::digest::Digest;
    let _2: &ring::digest::Algorithm;
    let mut _3: &[u8];
    let _4: &[u8; 32];
    let _5: [u8; 32];
    let mut _6: &mut rand::prelude::ThreadRng;
    let mut _7: rand::prelude::ThreadRng;
    let mut _8: std::slice::Iter<'_, u8>;
    let _9: &[u8];
    let mut _10: &ring::digest::Digest;
    let mut _11: std::string::String;
    let mut _12: usize;
    let mut _13: usize;
    let _14: &[u8];
    let mut _15: &ring::digest::Digest;
    let mut _16: (usize, bool);
    scope 1 {
        debug secret_key_bytes => _1;
    }

    bb0: {
        _2 = const {alloc40: &ring::digest::Algorithm};
        _7 = thread_rng() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut _7;
        _5 = <ThreadRng as Rng>::gen::<[u8; 32]>(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_5;
        _3 = _4 as &[u8] (PointerCoercion(Unsize));
        _1 = digest(_2, move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = &_1;
        _9 = <Digest as AsRef<[u8]>>::as_ref(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = core::slice::<impl [u8]>::iter(_9) -> [return: bb5, unwind continue];
    }

    bb5: {
        _15 = &_1;
        _14 = <Digest as AsRef<[u8]>>::as_ref(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _13 = Len((*_14));
        _16 = CheckedMul(_13, const 2_usize);
        assert(!move (_16.1: bool), "attempt to compute `{} * {}`, which would overflow", move _13, const 2_usize) -> [success: bb7, unwind continue];
    }

    bb7: {
        _12 = move (_16.0: usize);
        _11 = std::string::String::with_capacity(move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = <std::slice::Iter<'_, u8> as Iterator>::fold::<std::string::String, {closure@src/main.rs:201:9: 201:21}>(move _8, move _11, const ZeroSized: {closure@src/main.rs:201:9: 201:21}) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

alloc40 (static: SHA256, size: 120, align: 8) {
    0x00 │ ╾─────alloc13297──────╼ ╾─────alloc13298──────╼ │ ╾──────╼╾──────╼
    0x10 │ 20 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 │  ....... .......
    0x20 │ 40 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 │ @...............
    0x30 │ 67 e6 09 6a 85 ae 67 bb 72 f3 6e 3c 3a f5 4f a5 │ g..j..g.r.n<:.O.
    0x40 │ 7f 52 0e 51 8c 68 05 9b ab d9 83 1f 19 cd e0 5b │ .R.Q.h.........[
    0x50 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x60 │ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ░░░░░░░░░░░░░░░░
    0x70 │ 01 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc13297 (fn: digest::sha2::GFp_sha256_block_data_order)

alloc13298 (fn: digest::sha256_format_output)

generate_secret_key::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

fn generate_secret_key::{closure#0}(_1: &mut {closure@src/main.rs:201:9: 201:21}, _2: std::string::String, _3: &u8) -> std::string::String {
    debug acc => _2;
    debug x => _3;
    let mut _0: std::string::String;
    let _4: ();
    let mut _5: &mut std::string::String;
    let _6: &str;
    let _7: &std::string::String;
    let _8: std::string::String;
    let _9: std::string::String;
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &&u8;
    let mut _17: &[core::fmt::rt::Placeholder];
    let _18: &[core::fmt::rt::Placeholder; 1];
    let _19: [core::fmt::rt::Placeholder; 1];
    let mut _20: core::fmt::rt::Placeholder;
    let mut _21: core::fmt::rt::Alignment;
    let mut _22: core::fmt::rt::Count;
    let mut _23: core::fmt::rt::Count;
    let mut _24: core::fmt::rt::UnsafeArg;
    let mut _25: &[&str; 1];
    scope 1 {
        debug res => _9;
    }
    scope 2 {
    }

    bb0: {
        _5 = &mut _2;
        _25 = const _;
        _11 = _25 as &[&str] (PointerCoercion(Unsize));
        _16 = &_3;
        _15 = core::fmt::rt::Argument::<'_>::new_lower_hex::<&u8>(_16) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _21 = core::fmt::rt::Alignment::Right;
        _22 = core::fmt::rt::Count::Implied;
        _23 = core::fmt::rt::Count::Is(const 2_usize);
        _20 = core::fmt::rt::Placeholder::new(const 0_usize, const '0', move _21, const 0_u32, move _22, move _23) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _24 = core::fmt::rt::UnsafeArg::new() -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _10 = Arguments::<'_>::new_v1_formatted(move _11, move _12, move _17, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _9 = std::fmt::format(move _10) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _8 = move _9;
        _7 = &_8;
        _6 = <std::string::String as Deref>::deref(_7) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = std::string::String::push_str(move _5, _6) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        drop(_8) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _0 = move _2;
        return;
    }

    bb9 (cleanup): {
        drop(_8) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in generate_secret_key::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn issue_jwt(_1: &str, _2: std::option::Option<DateTime<Utc>>) -> Result<std::string::String, Error> {
    debug secret_key => _1;
    debug expiration => _2;
    let mut _0: std::result::Result<std::string::String, Error>;
    let mut _3: std::result::Result<std::string::String, jsonwebtoken::errors::Error>;
    let _4: &jsonwebtoken::Header;
    let _5: jsonwebtoken::Header;
    let _6: &configuration::Claims;
    let _7: configuration::Claims;
    let mut _8: std::string::String;
    let mut _9: std::string::String;
    let mut _10: i64;
    let mut _11: &chrono::DateTime<chrono::Utc>;
    let _12: chrono::DateTime<chrono::Utc>;
    let mut _13: i64;
    let mut _14: isize;
    let _15: chrono::DateTime<chrono::Utc>;
    let mut _16: &chrono::DateTime<chrono::Utc>;
    let mut _17: &chrono::DateTime<chrono::Utc>;
    let _18: chrono::DateTime<chrono::Utc>;
    let mut _19: chrono::DateTime<chrono::Utc>;
    let mut _20: chrono::Duration;
    let mut _21: i64;
    let mut _22: (i64, bool);
    let _23: &[u8];
    scope 1 {
        debug exp => _15;
    }

    bb0: {
        _5 = <Header as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _8 = <std::string::String as From<&str>>::from(const "Lucid Root Token") -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _9 = <std::string::String as From<&str>>::from(const "http://localhost:7021/") -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _12 = Utc::now() -> [return: bb4, unwind: bb20];
    }

    bb4: {
        _11 = &_12;
        _10 = DateTime::<Utc>::timestamp(move _11) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _14 = discriminant(_2);
        switchInt(move _14) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        _19 = Utc::now() -> [return: bb9, unwind: bb20];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _15 = ((_2 as Some).0: chrono::DateTime<chrono::Utc>);
        _16 = &_15;
        _13 = DateTime::<Utc>::timestamp(move _16) -> [return: bb24, unwind: bb20];
    }

    bb9: {
        _22 = CheckedMul(const 52_i64, const 3_i64);
        assert(!move (_22.1: bool), "attempt to compute `{} * {}`, which would overflow", const 52_i64, const 3_i64) -> [success: bb10, unwind: bb20];
    }

    bb10: {
        _21 = move (_22.0: i64);
        _20 = chrono::Duration::weeks(move _21) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        _18 = <DateTime<Utc> as Add<chrono::Duration>>::add(move _19, move _20) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        _17 = &_18;
        _13 = DateTime::<Utc>::timestamp(move _17) -> [return: bb25, unwind: bb20];
    }

    bb13: {
        _7 = Claims { sub: move _8, iss: move _9, iat: move _10, exp: move _13 };
        _6 = &_7;
        _23 = <str as AsRef<[u8]>>::as_ref(_1) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _3 = jsonwebtoken::encode::<Claims>(_4, _6, _23) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        _0 = <Result<std::string::String, jsonwebtoken::errors::Error> as ResultExt<std::string::String, jsonwebtoken::errors::Error>>::context::<EncodeJwt, Error>(move _3, const EncodeJwt) -> [return: bb16, unwind: bb19];
    }

    bb16: {
        drop(_7) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        drop(_5) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_7) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_9) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_8) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_5) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24: {
        goto -> bb13;
    }

    bb25: {
        goto -> bb13;
    }
}

fn create_format_dispatch(_1: std::option::Option<ColoredLevelConfig>) -> Dispatch {
    debug colors => _1;
    let mut _0: fern::Dispatch;
    let mut _2: fern::Dispatch;
    let mut _3: {closure@src/main.rs:226:28: 226:55};

    bb0: {
        _2 = Dispatch::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = {closure@src/main.rs:226:28: 226:55} { colors: _1 };
        _0 = Dispatch::format::<{closure@src/main.rs:226:28: 226:55}>(move _2, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn create_format_dispatch::{closure#0}(_1: &{closure@src/main.rs:226:28: 226:55}, _2: FormatCallback<'_>, _3: &Arguments<'_>, _4: &Record<'_>) -> () {
    debug out => _2;
    debug message => _3;
    debug record => _4;
    debug colors => ((*_1).0: std::option::Option<fern::colors::ColoredLevelConfig>);
    let mut _0: ();
    let mut _5: isize;
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 4];
    let _11: [core::fmt::rt::Argument<'_>; 4];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let _14: chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let mut _15: &chrono::DateTime<chrono::Utc>;
    let _16: chrono::DateTime<chrono::Utc>;
    let _17: &str;
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &fern::colors::WithFgColor<log::Level>;
    let _20: fern::colors::WithFgColor<log::Level>;
    let mut _21: &fern::colors::ColoredLevelConfig;
    let mut _22: log::Level;
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &&str;
    let _25: &str;
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &&std::fmt::Arguments<'_>;
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let mut _30: &[core::fmt::rt::Argument<'_>];
    let _31: &[core::fmt::rt::Argument<'_>; 4];
    let _32: [core::fmt::rt::Argument<'_>; 4];
    let mut _33: core::fmt::rt::Argument<'_>;
    let _34: &chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let _35: chrono::format::DelayedFormat<chrono::format::StrftimeItems<'_>>;
    let mut _36: &chrono::DateTime<chrono::Utc>;
    let _37: chrono::DateTime<chrono::Utc>;
    let _38: &str;
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &log::Level;
    let _41: log::Level;
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &&str;
    let _44: &str;
    let mut _45: core::fmt::rt::Argument<'_>;
    let _46: &&std::fmt::Arguments<'_>;
    let mut _47: &[&str; 4];
    scope 1 {
        debug colors => _6;
        let _6: fern::colors::ColoredLevelConfig;
        let mut _48: &[&str; 4];
    }

    bb0: {
        _5 = discriminant(((*_1).0: std::option::Option<fern::colors::ColoredLevelConfig>));
        switchInt(move _5) -> [1: bb1, otherwise: bb13];
    }

    bb1: {
        _6 = ((((*_1).0: std::option::Option<fern::colors::ColoredLevelConfig>) as Some).0: fern::colors::ColoredLevelConfig);
        _48 = const _;
        _8 = _48 as &[&str] (PointerCoercion(Unsize));
        _16 = Utc::now() -> [return: bb2, unwind continue];
    }

    bb2: {
        _15 = &_16;
        _17 = const "%Y/%m/%d %H:%M:%S";
        _14 = DateTime::<Utc>::format(move _15, _17) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = &_14;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<DelayedFormat<StrftimeItems<'_>>>(_13) -> [return: bb4, unwind: bb26];
    }

    bb4: {
        _21 = &_6;
        _22 = Record::<'_>::level(_4) -> [return: bb5, unwind: bb26];
    }

    bb5: {
        _20 = ColoredLevelConfig::color(move _21, move _22) -> [return: bb6, unwind: bb26];
    }

    bb6: {
        _19 = &_20;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<WithFgColor<Level>>(_19) -> [return: bb7, unwind: bb26];
    }

    bb7: {
        _25 = Record::<'_>::target(_4) -> [return: bb8, unwind: bb26];
    }

    bb8: {
        _24 = &_25;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_24) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        _27 = &_3;
        _26 = core::fmt::rt::Argument::<'_>::new_display::<&Arguments<'_>>(_27) -> [return: bb10, unwind: bb26];
    }

    bb10: {
        _11 = [move _12, move _18, move _23, move _26];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb11, unwind: bb26];
    }

    bb11: {
        _0 = FormatCallback::<'_>::finish(move _2, move _7) -> [return: bb12, unwind: bb26];
    }

    bb12: {
        drop(_14) -> [return: bb24, unwind continue];
    }

    bb13: {
        _47 = const _;
        _29 = _47 as &[&str] (PointerCoercion(Unsize));
        _37 = Utc::now() -> [return: bb14, unwind continue];
    }

    bb14: {
        _36 = &_37;
        _38 = const "%Y/%m/%d %H:%M:%S";
        _35 = DateTime::<Utc>::format(move _36, _38) -> [return: bb15, unwind continue];
    }

    bb15: {
        _34 = &_35;
        _33 = core::fmt::rt::Argument::<'_>::new_display::<DelayedFormat<StrftimeItems<'_>>>(_34) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        _41 = Record::<'_>::level(_4) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        _40 = &_41;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<Level>(_40) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        _44 = Record::<'_>::target(_4) -> [return: bb19, unwind: bb25];
    }

    bb19: {
        _43 = &_44;
        _42 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_43) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        _46 = &_3;
        _45 = core::fmt::rt::Argument::<'_>::new_display::<&Arguments<'_>>(_46) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        _32 = [move _33, move _39, move _42, move _45];
        _31 = &_32;
        _30 = _31 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _28 = Arguments::<'_>::new_v1(move _29, move _30) -> [return: bb22, unwind: bb25];
    }

    bb22: {
        _0 = FormatCallback::<'_>::finish(move _2, move _28) -> [return: bb23, unwind: bb25];
    }

    bb23: {
        drop(_35) -> [return: bb24, unwind continue];
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_35) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_14) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }
}

promoted[0] in create_format_dispatch::{closure#0}: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const " ", const " [", const "] "];
        _0 = &_1;
        return;
    }
}

promoted[1] in create_format_dispatch::{closure#0}: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const " ", const " [", const "] "];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &ParseCli, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "ParseCli";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::clone(_1: &ParseCli) -> ParseCli {
    debug self => _1;
    let mut _0: ParseCli;

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error(_1: ParseCli, _2: clap::Error) -> Error {
    debug self => const ParseCli;
    debug error => _2;
    let mut _0: Error;
    let mut _3: clap::Error;
    let mut _4: (clap::Error,);
    let mut _5: &{closure@src/main.rs:247:10: 247:15};

    bb0: {
        _5 = const _;
        _4 = (move _2,);
        _3 = <{closure@src/main.rs:247:10: 247:15} as Fn<(clap::Error,)>>::call(_5, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Error::ParseCli { source: move _3 };
        return;
    }
}

promoted[0] in <impl at src/main.rs:247:10: 247:15>::into_error: &{closure@src/main.rs:247:10: 247:15} = {
    let mut _0: &{closure@src/main.rs:247:10: 247:15};
    let mut _1: {closure@src/main.rs:247:10: 247:15};

    bb0: {
        _1 = {closure@src/main.rs:247:10: 247:15};
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error::{closure#0}(_1: &{closure@src/main.rs:247:10: 247:15}, _2: clap::Error) -> clap::Error {
    debug v => _2;
    let mut _0: clap::Error;

    bb0: {
        _0 = move _2;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &RunServer, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "RunServer";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::clone(_1: &RunServer) -> RunServer {
    debug self => _1;
    let mut _0: RunServer;

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error(_1: RunServer, _2: std::io::Error) -> Error {
    debug self => const RunServer;
    debug error => _2;
    let mut _0: Error;
    let mut _3: std::io::Error;
    let mut _4: (std::io::Error,);
    let mut _5: &{closure@src/main.rs:247:10: 247:15};

    bb0: {
        _5 = const _;
        _4 = (move _2,);
        _3 = <{closure@src/main.rs:247:10: 247:15} as Fn<(std::io::Error,)>>::call(_5, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Error::RunServer { source: move _3 };
        return;
    }
}

promoted[0] in <impl at src/main.rs:247:10: 247:15>::into_error: &{closure@src/main.rs:247:10: 247:15} = {
    let mut _0: &{closure@src/main.rs:247:10: 247:15};
    let mut _1: {closure@src/main.rs:247:10: 247:15};

    bb0: {
        _1 = {closure@src/main.rs:247:10: 247:15};
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error::{closure#0}(_1: &{closure@src/main.rs:247:10: 247:15}, _2: std::io::Error) -> std::io::Error {
    debug v => _2;
    let mut _0: std::io::Error;

    bb0: {
        _0 = move _2;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &ConfigurationNotFound, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "ConfigurationNotFound";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::clone(_1: &ConfigurationNotFound) -> ConfigurationNotFound {
    debug self => _1;
    let mut _0: ConfigurationNotFound;

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fail(_1: ConfigurationNotFound) -> Result<__T, Error> {
    debug self => const ConfigurationNotFound;
    let mut _0: std::result::Result<__T, Error>;
    scope 1 {
        let _2: Error;
        scope 2 {
            debug error => _2;
        }
    }

    bb0: {
        _2 = Error::ConfigurationNotFound;
        _0 = Result::<__T, Error>::Err(move _2);
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error(_1: ConfigurationNotFound, _2: NoneError) -> Error {
    debug self => const ConfigurationNotFound;
    debug error => const NoneError;
    let mut _0: Error;

    bb0: {
        _0 = Error::ConfigurationNotFound;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &AlreadyInitialized, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "AlreadyInitialized";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::clone(_1: &AlreadyInitialized) -> AlreadyInitialized {
    debug self => _1;
    let mut _0: AlreadyInitialized;

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fail(_1: AlreadyInitialized) -> Result<__T, Error> {
    debug self => const AlreadyInitialized;
    let mut _0: std::result::Result<__T, Error>;
    scope 1 {
        let _2: Error;
        scope 2 {
            debug error => _2;
        }
    }

    bb0: {
        _2 = Error::AlreadyInitialized;
        _0 = Result::<__T, Error>::Err(move _2);
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error(_1: AlreadyInitialized, _2: NoneError) -> Error {
    debug self => const AlreadyInitialized;
    debug error => const NoneError;
    let mut _0: Error;

    bb0: {
        _0 = Error::AlreadyInitialized;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &GetConfigDir, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "GetConfigDir";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::clone(_1: &GetConfigDir) -> GetConfigDir {
    debug self => _1;
    let mut _0: GetConfigDir;

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error(_1: GetConfigDir, _2: AppDirsError) -> Error {
    debug self => const GetConfigDir;
    debug error => _2;
    let mut _0: Error;
    let mut _3: app_dirs::AppDirsError;
    let mut _4: (app_dirs::AppDirsError,);
    let mut _5: &{closure@src/main.rs:247:10: 247:15};

    bb0: {
        _5 = const _;
        _4 = (move _2,);
        _3 = <{closure@src/main.rs:247:10: 247:15} as Fn<(AppDirsError,)>>::call(_5, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Error::GetConfigDir { source: move _3 };
        return;
    }
}

promoted[0] in <impl at src/main.rs:247:10: 247:15>::into_error: &{closure@src/main.rs:247:10: 247:15} = {
    let mut _0: &{closure@src/main.rs:247:10: 247:15};
    let mut _1: {closure@src/main.rs:247:10: 247:15};

    bb0: {
        _1 = {closure@src/main.rs:247:10: 247:15};
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error::{closure#0}(_1: &{closure@src/main.rs:247:10: 247:15}, _2: AppDirsError) -> AppDirsError {
    debug v => _2;
    let mut _0: app_dirs::AppDirsError;

    bb0: {
        _0 = move _2;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &CreateConfigDir, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "CreateConfigDir";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::clone(_1: &CreateConfigDir) -> CreateConfigDir {
    debug self => _1;
    let mut _0: CreateConfigDir;

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error(_1: CreateConfigDir, _2: std::io::Error) -> Error {
    debug self => const CreateConfigDir;
    debug error => _2;
    let mut _0: Error;
    let mut _3: std::io::Error;
    let mut _4: (std::io::Error,);
    let mut _5: &{closure@src/main.rs:247:10: 247:15};

    bb0: {
        _5 = const _;
        _4 = (move _2,);
        _3 = <{closure@src/main.rs:247:10: 247:15} as Fn<(std::io::Error,)>>::call(_5, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Error::CreateConfigDir { source: move _3 };
        return;
    }
}

promoted[0] in <impl at src/main.rs:247:10: 247:15>::into_error: &{closure@src/main.rs:247:10: 247:15} = {
    let mut _0: &{closure@src/main.rs:247:10: 247:15};
    let mut _1: {closure@src/main.rs:247:10: 247:15};

    bb0: {
        _1 = {closure@src/main.rs:247:10: 247:15};
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error::{closure#0}(_1: &{closure@src/main.rs:247:10: 247:15}, _2: std::io::Error) -> std::io::Error {
    debug v => _2;
    let mut _0: std::io::Error;

    bb0: {
        _0 = move _2;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &CreateConfigFile, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "CreateConfigFile";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::clone(_1: &CreateConfigFile) -> CreateConfigFile {
    debug self => _1;
    let mut _0: CreateConfigFile;

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error(_1: CreateConfigFile, _2: std::io::Error) -> Error {
    debug self => const CreateConfigFile;
    debug error => _2;
    let mut _0: Error;
    let mut _3: std::io::Error;
    let mut _4: (std::io::Error,);
    let mut _5: &{closure@src/main.rs:247:10: 247:15};

    bb0: {
        _5 = const _;
        _4 = (move _2,);
        _3 = <{closure@src/main.rs:247:10: 247:15} as Fn<(std::io::Error,)>>::call(_5, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Error::CreateConfigFile { source: move _3 };
        return;
    }
}

promoted[0] in <impl at src/main.rs:247:10: 247:15>::into_error: &{closure@src/main.rs:247:10: 247:15} = {
    let mut _0: &{closure@src/main.rs:247:10: 247:15};
    let mut _1: {closure@src/main.rs:247:10: 247:15};

    bb0: {
        _1 = {closure@src/main.rs:247:10: 247:15};
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error::{closure#0}(_1: &{closure@src/main.rs:247:10: 247:15}, _2: std::io::Error) -> std::io::Error {
    debug v => _2;
    let mut _0: std::io::Error;

    bb0: {
        _0 = move _2;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &WriteConfigFile, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "WriteConfigFile";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::clone(_1: &WriteConfigFile) -> WriteConfigFile {
    debug self => _1;
    let mut _0: WriteConfigFile;

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error(_1: WriteConfigFile, _2: serde_yaml::Error) -> Error {
    debug self => const WriteConfigFile;
    debug error => _2;
    let mut _0: Error;
    let mut _3: serde_yaml::Error;
    let mut _4: (serde_yaml::Error,);
    let mut _5: &{closure@src/main.rs:247:10: 247:15};

    bb0: {
        _5 = const _;
        _4 = (move _2,);
        _3 = <{closure@src/main.rs:247:10: 247:15} as Fn<(serde_yaml::Error,)>>::call(_5, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Error::WriteConfigFile { source: move _3 };
        return;
    }
}

promoted[0] in <impl at src/main.rs:247:10: 247:15>::into_error: &{closure@src/main.rs:247:10: 247:15} = {
    let mut _0: &{closure@src/main.rs:247:10: 247:15};
    let mut _1: {closure@src/main.rs:247:10: 247:15};

    bb0: {
        _1 = {closure@src/main.rs:247:10: 247:15};
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error::{closure#0}(_1: &{closure@src/main.rs:247:10: 247:15}, _2: serde_yaml::Error) -> serde_yaml::Error {
    debug v => _2;
    let mut _0: serde_yaml::Error;

    bb0: {
        _0 = move _2;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &OpenConfigFile, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "OpenConfigFile";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::clone(_1: &OpenConfigFile) -> OpenConfigFile {
    debug self => _1;
    let mut _0: OpenConfigFile;

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error(_1: OpenConfigFile, _2: std::io::Error) -> Error {
    debug self => const OpenConfigFile;
    debug error => _2;
    let mut _0: Error;
    let mut _3: std::io::Error;
    let mut _4: (std::io::Error,);
    let mut _5: &{closure@src/main.rs:247:10: 247:15};

    bb0: {
        _5 = const _;
        _4 = (move _2,);
        _3 = <{closure@src/main.rs:247:10: 247:15} as Fn<(std::io::Error,)>>::call(_5, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Error::OpenConfigFile { source: move _3 };
        return;
    }
}

promoted[0] in <impl at src/main.rs:247:10: 247:15>::into_error: &{closure@src/main.rs:247:10: 247:15} = {
    let mut _0: &{closure@src/main.rs:247:10: 247:15};
    let mut _1: {closure@src/main.rs:247:10: 247:15};

    bb0: {
        _1 = {closure@src/main.rs:247:10: 247:15};
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error::{closure#0}(_1: &{closure@src/main.rs:247:10: 247:15}, _2: std::io::Error) -> std::io::Error {
    debug v => _2;
    let mut _0: std::io::Error;

    bb0: {
        _0 = move _2;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &ReadConfigFile, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "ReadConfigFile";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::clone(_1: &ReadConfigFile) -> ReadConfigFile {
    debug self => _1;
    let mut _0: ReadConfigFile;

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error(_1: ReadConfigFile, _2: serde_yaml::Error) -> Error {
    debug self => const ReadConfigFile;
    debug error => _2;
    let mut _0: Error;
    let mut _3: serde_yaml::Error;
    let mut _4: (serde_yaml::Error,);
    let mut _5: &{closure@src/main.rs:247:10: 247:15};

    bb0: {
        _5 = const _;
        _4 = (move _2,);
        _3 = <{closure@src/main.rs:247:10: 247:15} as Fn<(serde_yaml::Error,)>>::call(_5, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Error::ReadConfigFile { source: move _3 };
        return;
    }
}

promoted[0] in <impl at src/main.rs:247:10: 247:15>::into_error: &{closure@src/main.rs:247:10: 247:15} = {
    let mut _0: &{closure@src/main.rs:247:10: 247:15};
    let mut _1: {closure@src/main.rs:247:10: 247:15};

    bb0: {
        _1 = {closure@src/main.rs:247:10: 247:15};
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error::{closure#0}(_1: &{closure@src/main.rs:247:10: 247:15}, _2: serde_yaml::Error) -> serde_yaml::Error {
    debug v => _2;
    let mut _0: serde_yaml::Error;

    bb0: {
        _0 = move _2;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &EncodeJwt, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "EncodeJwt";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::clone(_1: &EncodeJwt) -> EncodeJwt {
    debug self => _1;
    let mut _0: EncodeJwt;

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error(_1: EncodeJwt, _2: jsonwebtoken::errors::Error) -> Error {
    debug self => const EncodeJwt;
    debug error => _2;
    let mut _0: Error;
    let mut _3: jsonwebtoken::errors::Error;
    let mut _4: (jsonwebtoken::errors::Error,);
    let mut _5: &{closure@src/main.rs:247:10: 247:15};

    bb0: {
        _5 = const _;
        _4 = (move _2,);
        _3 = <{closure@src/main.rs:247:10: 247:15} as Fn<(jsonwebtoken::errors::Error,)>>::call(_5, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Error::EncodeJwt { source: move _3 };
        return;
    }
}

promoted[0] in <impl at src/main.rs:247:10: 247:15>::into_error: &{closure@src/main.rs:247:10: 247:15} = {
    let mut _0: &{closure@src/main.rs:247:10: 247:15};
    let mut _1: {closure@src/main.rs:247:10: 247:15};

    bb0: {
        _1 = {closure@src/main.rs:247:10: 247:15};
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::into_error::{closure#0}(_1: &{closure@src/main.rs:247:10: 247:15}, _2: jsonwebtoken::errors::Error) -> jsonwebtoken::errors::Error {
    debug v => _2;
    let mut _0: jsonwebtoken::errors::Error;

    bb0: {
        _0 = move _2;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::fmt(_1: &Error, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __snafu_display_formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&clap::Error;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &&std::io::Error;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let _31: &&app_dirs::AppDirsError;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: [core::fmt::rt::Argument<'_>; 1];
    let mut _38: core::fmt::rt::Argument<'_>;
    let _39: &&std::io::Error;
    let mut _41: std::fmt::Arguments<'_>;
    let mut _42: &[&str];
    let mut _43: &[core::fmt::rt::Argument<'_>];
    let _44: &[core::fmt::rt::Argument<'_>; 1];
    let _45: [core::fmt::rt::Argument<'_>; 1];
    let mut _46: core::fmt::rt::Argument<'_>;
    let _47: &&std::io::Error;
    let mut _49: std::fmt::Arguments<'_>;
    let mut _50: &[&str];
    let mut _51: &[core::fmt::rt::Argument<'_>];
    let _52: &[core::fmt::rt::Argument<'_>; 1];
    let _53: [core::fmt::rt::Argument<'_>; 1];
    let mut _54: core::fmt::rt::Argument<'_>;
    let _55: &&serde_yaml::Error;
    let mut _57: std::fmt::Arguments<'_>;
    let mut _58: &[&str];
    let mut _59: &[core::fmt::rt::Argument<'_>];
    let _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: [core::fmt::rt::Argument<'_>; 1];
    let mut _62: core::fmt::rt::Argument<'_>;
    let _63: &&std::io::Error;
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[core::fmt::rt::Argument<'_>];
    let _68: &[core::fmt::rt::Argument<'_>; 1];
    let _69: [core::fmt::rt::Argument<'_>; 1];
    let mut _70: core::fmt::rt::Argument<'_>;
    let _71: &&serde_yaml::Error;
    let mut _73: std::fmt::Arguments<'_>;
    let mut _74: &[&str];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: [core::fmt::rt::Argument<'_>; 1];
    let mut _78: core::fmt::rt::Argument<'_>;
    let _79: &&jsonwebtoken::errors::Error;
    scope 1 {
        let _4: &clap::Error;
        let _12: &std::io::Error;
        let _24: &app_dirs::AppDirsError;
        let _32: &std::io::Error;
        let _40: &std::io::Error;
        let _48: &serde_yaml::Error;
        let _56: &std::io::Error;
        let _64: &serde_yaml::Error;
        let _72: &jsonwebtoken::errors::Error;
        let mut _87: &[&str; 1];
        let mut _88: &[&str; 1];
        scope 2 {
            debug source => _4;
            let mut _90: &[&str; 1];
        }
        scope 3 {
            debug source => _12;
            let mut _89: &[&str; 1];
        }
        scope 4 {
            debug source => _24;
            let mut _86: &[&str; 1];
        }
        scope 5 {
            debug source => _32;
            let mut _85: &[&str; 1];
        }
        scope 6 {
            debug source => _40;
            let mut _84: &[&str; 1];
        }
        scope 7 {
            debug source => _48;
            let mut _83: &[&str; 1];
        }
        scope 8 {
            debug source => _56;
            let mut _82: &[&str; 1];
        }
        scope 9 {
            debug source => _64;
            let mut _81: &[&str; 1];
        }
        scope 10 {
            debug source => _72;
            let mut _80: &[&str; 1];
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb6, 2: bb9, 3: bb11, 4: bb13, 5: bb16, 6: bb19, 7: bb22, 8: bb25, 9: bb28, 10: bb1, otherwise: bb2];
    }

    bb1: {
        _72 = &(((*_1) as EncodeJwt).0: jsonwebtoken::errors::Error);
        _80 = const _;
        _74 = _80 as &[&str] (PointerCoercion(Unsize));
        _79 = &_72;
        _78 = core::fmt::rt::Argument::<'_>::new_display::<&jsonwebtoken::errors::Error>(_79) -> [return: bb31, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as ParseCli).0: clap::Error);
        _90 = const _;
        _6 = _90 as &[&str] (PointerCoercion(Unsize));
        _11 = &_4;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<&clap::Error>(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = Formatter::<'_>::write_fmt(_2, move _5) -> [return: bb33, unwind continue];
    }

    bb6: {
        _12 = &(((*_1) as RunServer).0: std::io::Error);
        _89 = const _;
        _14 = _89 as &[&str] (PointerCoercion(Unsize));
        _19 = &_12;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<&std::io::Error>(_19) -> [return: bb7, unwind continue];
    }

    bb7: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = Formatter::<'_>::write_fmt(_2, move _13) -> [return: bb33, unwind continue];
    }

    bb9: {
        _88 = const _;
        _21 = _88 as &[&str] (PointerCoercion(Unsize));
        _20 = Arguments::<'_>::new_const(move _21) -> [return: bb10, unwind continue];
    }

    bb10: {
        _0 = Formatter::<'_>::write_fmt(_2, move _20) -> [return: bb33, unwind continue];
    }

    bb11: {
        _87 = const _;
        _23 = _87 as &[&str] (PointerCoercion(Unsize));
        _22 = Arguments::<'_>::new_const(move _23) -> [return: bb12, unwind continue];
    }

    bb12: {
        _0 = Formatter::<'_>::write_fmt(_2, move _22) -> [return: bb33, unwind continue];
    }

    bb13: {
        _24 = &(((*_1) as GetConfigDir).0: app_dirs::AppDirsError);
        _86 = const _;
        _26 = _86 as &[&str] (PointerCoercion(Unsize));
        _31 = &_24;
        _30 = core::fmt::rt::Argument::<'_>::new_display::<&AppDirsError>(_31) -> [return: bb14, unwind continue];
    }

    bb14: {
        _29 = [move _30];
        _28 = &_29;
        _27 = _28 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> [return: bb15, unwind continue];
    }

    bb15: {
        _0 = Formatter::<'_>::write_fmt(_2, move _25) -> [return: bb33, unwind continue];
    }

    bb16: {
        _32 = &(((*_1) as CreateConfigDir).0: std::io::Error);
        _85 = const _;
        _34 = _85 as &[&str] (PointerCoercion(Unsize));
        _39 = &_32;
        _38 = core::fmt::rt::Argument::<'_>::new_display::<&std::io::Error>(_39) -> [return: bb17, unwind continue];
    }

    bb17: {
        _37 = [move _38];
        _36 = &_37;
        _35 = _36 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _33 = Arguments::<'_>::new_v1(move _34, move _35) -> [return: bb18, unwind continue];
    }

    bb18: {
        _0 = Formatter::<'_>::write_fmt(_2, move _33) -> [return: bb33, unwind continue];
    }

    bb19: {
        _40 = &(((*_1) as CreateConfigFile).0: std::io::Error);
        _84 = const _;
        _42 = _84 as &[&str] (PointerCoercion(Unsize));
        _47 = &_40;
        _46 = core::fmt::rt::Argument::<'_>::new_display::<&std::io::Error>(_47) -> [return: bb20, unwind continue];
    }

    bb20: {
        _45 = [move _46];
        _44 = &_45;
        _43 = _44 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _41 = Arguments::<'_>::new_v1(move _42, move _43) -> [return: bb21, unwind continue];
    }

    bb21: {
        _0 = Formatter::<'_>::write_fmt(_2, move _41) -> [return: bb33, unwind continue];
    }

    bb22: {
        _48 = &(((*_1) as WriteConfigFile).0: serde_yaml::Error);
        _83 = const _;
        _50 = _83 as &[&str] (PointerCoercion(Unsize));
        _55 = &_48;
        _54 = core::fmt::rt::Argument::<'_>::new_display::<&serde_yaml::Error>(_55) -> [return: bb23, unwind continue];
    }

    bb23: {
        _53 = [move _54];
        _52 = &_53;
        _51 = _52 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _49 = Arguments::<'_>::new_v1(move _50, move _51) -> [return: bb24, unwind continue];
    }

    bb24: {
        _0 = Formatter::<'_>::write_fmt(_2, move _49) -> [return: bb33, unwind continue];
    }

    bb25: {
        _56 = &(((*_1) as OpenConfigFile).0: std::io::Error);
        _82 = const _;
        _58 = _82 as &[&str] (PointerCoercion(Unsize));
        _63 = &_56;
        _62 = core::fmt::rt::Argument::<'_>::new_display::<&std::io::Error>(_63) -> [return: bb26, unwind continue];
    }

    bb26: {
        _61 = [move _62];
        _60 = &_61;
        _59 = _60 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _57 = Arguments::<'_>::new_v1(move _58, move _59) -> [return: bb27, unwind continue];
    }

    bb27: {
        _0 = Formatter::<'_>::write_fmt(_2, move _57) -> [return: bb33, unwind continue];
    }

    bb28: {
        _64 = &(((*_1) as ReadConfigFile).0: serde_yaml::Error);
        _81 = const _;
        _66 = _81 as &[&str] (PointerCoercion(Unsize));
        _71 = &_64;
        _70 = core::fmt::rt::Argument::<'_>::new_display::<&serde_yaml::Error>(_71) -> [return: bb29, unwind continue];
    }

    bb29: {
        _69 = [move _70];
        _68 = &_69;
        _67 = _68 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _65 = Arguments::<'_>::new_v1(move _66, move _67) -> [return: bb30, unwind continue];
    }

    bb30: {
        _0 = Formatter::<'_>::write_fmt(_2, move _65) -> [return: bb33, unwind continue];
    }

    bb31: {
        _77 = [move _78];
        _76 = &_77;
        _75 = _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _73 = Arguments::<'_>::new_v1(move _74, move _75) -> [return: bb32, unwind continue];
    }

    bb32: {
        _0 = Formatter::<'_>::write_fmt(_2, move _73) -> [return: bb33, unwind continue];
    }

    bb33: {
        return;
    }
}

promoted[0] in <impl at src/main.rs:247:10: 247:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Error while encoding the JWT root token: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in <impl at src/main.rs:247:10: 247:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unable to read the Lucid configuration file: "];
        _0 = &_1;
        return;
    }
}

promoted[2] in <impl at src/main.rs:247:10: 247:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unable to open the Lucid configuration file: "];
        _0 = &_1;
        return;
    }
}

promoted[3] in <impl at src/main.rs:247:10: 247:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unable to write the Lucid configuration file: "];
        _0 = &_1;
        return;
    }
}

promoted[4] in <impl at src/main.rs:247:10: 247:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unable to create the Lucid configuration file: "];
        _0 = &_1;
        return;
    }
}

promoted[5] in <impl at src/main.rs:247:10: 247:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unable to create the Lucid configuration directory: "];
        _0 = &_1;
        return;
    }
}

promoted[6] in <impl at src/main.rs:247:10: 247:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unable to get the Lucid configuration directory: "];
        _0 = &_1;
        return;
    }
}

promoted[7] in <impl at src/main.rs:247:10: 247:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "The Lucid node has already been initialized."];
        _0 = &_1;
        return;
    }
}

promoted[8] in <impl at src/main.rs:247:10: 247:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Configuration file not found."];
        _0 = &_1;
        return;
    }
}

promoted[9] in <impl at src/main.rs:247:10: 247:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[10] in <impl at src/main.rs:247:10: 247:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::description(_1: &Error) -> &str {
    debug self => _1;
    let mut _0: &str;
    let mut _2: isize;
    let _3: &str;
    let _4: &str;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;
    let _10: &str;
    let _11: &str;
    let _12: &str;
    let _13: &str;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb1, otherwise: bb2];
    }

    bb1: {
        _13 = const "Error :: EncodeJwt";
        _0 = _13;
        goto -> bb13;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = const "Error :: ParseCli";
        _0 = _3;
        goto -> bb13;
    }

    bb4: {
        _4 = const "Error :: RunServer";
        _0 = _4;
        goto -> bb13;
    }

    bb5: {
        _5 = const "Error :: ConfigurationNotFound";
        _0 = _5;
        goto -> bb13;
    }

    bb6: {
        _6 = const "Error :: AlreadyInitialized";
        _0 = _6;
        goto -> bb13;
    }

    bb7: {
        _7 = const "Error :: GetConfigDir";
        _0 = _7;
        goto -> bb13;
    }

    bb8: {
        _8 = const "Error :: CreateConfigDir";
        _0 = _8;
        goto -> bb13;
    }

    bb9: {
        _9 = const "Error :: CreateConfigFile";
        _0 = _9;
        goto -> bb13;
    }

    bb10: {
        _10 = const "Error :: WriteConfigFile";
        _0 = _10;
        goto -> bb13;
    }

    bb11: {
        _11 = const "Error :: OpenConfigFile";
        _0 = _11;
        goto -> bb13;
    }

    bb12: {
        _12 = const "Error :: ReadConfigFile";
        _0 = _12;
        goto -> bb13;
    }

    bb13: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::cause(_1: &Error) -> std::option::Option<&dyn StdError> {
    debug self => _1;
    let mut _0: std::option::Option<&dyn snafu::Error>;
    let mut _2: isize;
    let _3: &clap::Error;
    let _4: &dyn snafu::Error;
    let _5: &std::io::Error;
    let _6: &dyn snafu::Error;
    let _7: &app_dirs::AppDirsError;
    let _8: &dyn snafu::Error;
    let _9: &std::io::Error;
    let _10: &dyn snafu::Error;
    let _11: &std::io::Error;
    let _12: &dyn snafu::Error;
    let _13: &serde_yaml::Error;
    let _14: &dyn snafu::Error;
    let _15: &std::io::Error;
    let _16: &dyn snafu::Error;
    let _17: &serde_yaml::Error;
    let _18: &dyn snafu::Error;
    let _19: &jsonwebtoken::errors::Error;
    let _20: &dyn snafu::Error;
    scope 1 {
        debug source => _3;
    }
    scope 2 {
        debug source => _5;
    }
    scope 3 {
        debug source => _7;
    }
    scope 4 {
        debug source => _9;
    }
    scope 5 {
        debug source => _11;
    }
    scope 6 {
        debug source => _13;
    }
    scope 7 {
        debug source => _15;
    }
    scope 8 {
        debug source => _17;
    }
    scope 9 {
        debug source => _19;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb7, 3: bb8, 4: bb9, 5: bb11, 6: bb13, 7: bb15, 8: bb17, 9: bb19, 10: bb1, otherwise: bb2];
    }

    bb1: {
        _19 = &(((*_1) as EncodeJwt).0: jsonwebtoken::errors::Error);
        _20 = <jsonwebtoken::errors::Error as AsErrorSource>::as_error_source(_19) -> [return: bb21, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as ParseCli).0: clap::Error);
        _4 = <clap::Error as AsErrorSource>::as_error_source(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = std::option::Option::<&dyn StdError>::Some(_4);
        goto -> bb22;
    }

    bb5: {
        _5 = &(((*_1) as RunServer).0: std::io::Error);
        _6 = <std::io::Error as AsErrorSource>::as_error_source(_5) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = std::option::Option::<&dyn StdError>::Some(_6);
        goto -> bb22;
    }

    bb7: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb22;
    }

    bb8: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb22;
    }

    bb9: {
        _7 = &(((*_1) as GetConfigDir).0: app_dirs::AppDirsError);
        _8 = <AppDirsError as AsErrorSource>::as_error_source(_7) -> [return: bb10, unwind continue];
    }

    bb10: {
        _0 = std::option::Option::<&dyn StdError>::Some(_8);
        goto -> bb22;
    }

    bb11: {
        _9 = &(((*_1) as CreateConfigDir).0: std::io::Error);
        _10 = <std::io::Error as AsErrorSource>::as_error_source(_9) -> [return: bb12, unwind continue];
    }

    bb12: {
        _0 = std::option::Option::<&dyn StdError>::Some(_10);
        goto -> bb22;
    }

    bb13: {
        _11 = &(((*_1) as CreateConfigFile).0: std::io::Error);
        _12 = <std::io::Error as AsErrorSource>::as_error_source(_11) -> [return: bb14, unwind continue];
    }

    bb14: {
        _0 = std::option::Option::<&dyn StdError>::Some(_12);
        goto -> bb22;
    }

    bb15: {
        _13 = &(((*_1) as WriteConfigFile).0: serde_yaml::Error);
        _14 = <serde_yaml::Error as AsErrorSource>::as_error_source(_13) -> [return: bb16, unwind continue];
    }

    bb16: {
        _0 = std::option::Option::<&dyn StdError>::Some(_14);
        goto -> bb22;
    }

    bb17: {
        _15 = &(((*_1) as OpenConfigFile).0: std::io::Error);
        _16 = <std::io::Error as AsErrorSource>::as_error_source(_15) -> [return: bb18, unwind continue];
    }

    bb18: {
        _0 = std::option::Option::<&dyn StdError>::Some(_16);
        goto -> bb22;
    }

    bb19: {
        _17 = &(((*_1) as ReadConfigFile).0: serde_yaml::Error);
        _18 = <serde_yaml::Error as AsErrorSource>::as_error_source(_17) -> [return: bb20, unwind continue];
    }

    bb20: {
        _0 = std::option::Option::<&dyn StdError>::Some(_18);
        goto -> bb22;
    }

    bb21: {
        _0 = std::option::Option::<&dyn StdError>::Some(_20);
        goto -> bb22;
    }

    bb22: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::source(_1: &Error) -> std::option::Option<&dyn StdError> {
    debug self => _1;
    let mut _0: std::option::Option<&dyn snafu::Error>;
    let mut _2: isize;
    let _3: &clap::Error;
    let _4: &dyn snafu::Error;
    let _5: &std::io::Error;
    let _6: &dyn snafu::Error;
    let _7: &app_dirs::AppDirsError;
    let _8: &dyn snafu::Error;
    let _9: &std::io::Error;
    let _10: &dyn snafu::Error;
    let _11: &std::io::Error;
    let _12: &dyn snafu::Error;
    let _13: &serde_yaml::Error;
    let _14: &dyn snafu::Error;
    let _15: &std::io::Error;
    let _16: &dyn snafu::Error;
    let _17: &serde_yaml::Error;
    let _18: &dyn snafu::Error;
    let _19: &jsonwebtoken::errors::Error;
    let _20: &dyn snafu::Error;
    scope 1 {
        debug source => _3;
    }
    scope 2 {
        debug source => _5;
    }
    scope 3 {
        debug source => _7;
    }
    scope 4 {
        debug source => _9;
    }
    scope 5 {
        debug source => _11;
    }
    scope 6 {
        debug source => _13;
    }
    scope 7 {
        debug source => _15;
    }
    scope 8 {
        debug source => _17;
    }
    scope 9 {
        debug source => _19;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb7, 3: bb8, 4: bb9, 5: bb11, 6: bb13, 7: bb15, 8: bb17, 9: bb19, 10: bb1, otherwise: bb2];
    }

    bb1: {
        _19 = &(((*_1) as EncodeJwt).0: jsonwebtoken::errors::Error);
        _20 = <jsonwebtoken::errors::Error as AsErrorSource>::as_error_source(_19) -> [return: bb21, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as ParseCli).0: clap::Error);
        _4 = <clap::Error as AsErrorSource>::as_error_source(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = std::option::Option::<&dyn StdError>::Some(_4);
        goto -> bb22;
    }

    bb5: {
        _5 = &(((*_1) as RunServer).0: std::io::Error);
        _6 = <std::io::Error as AsErrorSource>::as_error_source(_5) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = std::option::Option::<&dyn StdError>::Some(_6);
        goto -> bb22;
    }

    bb7: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb22;
    }

    bb8: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb22;
    }

    bb9: {
        _7 = &(((*_1) as GetConfigDir).0: app_dirs::AppDirsError);
        _8 = <AppDirsError as AsErrorSource>::as_error_source(_7) -> [return: bb10, unwind continue];
    }

    bb10: {
        _0 = std::option::Option::<&dyn StdError>::Some(_8);
        goto -> bb22;
    }

    bb11: {
        _9 = &(((*_1) as CreateConfigDir).0: std::io::Error);
        _10 = <std::io::Error as AsErrorSource>::as_error_source(_9) -> [return: bb12, unwind continue];
    }

    bb12: {
        _0 = std::option::Option::<&dyn StdError>::Some(_10);
        goto -> bb22;
    }

    bb13: {
        _11 = &(((*_1) as CreateConfigFile).0: std::io::Error);
        _12 = <std::io::Error as AsErrorSource>::as_error_source(_11) -> [return: bb14, unwind continue];
    }

    bb14: {
        _0 = std::option::Option::<&dyn StdError>::Some(_12);
        goto -> bb22;
    }

    bb15: {
        _13 = &(((*_1) as WriteConfigFile).0: serde_yaml::Error);
        _14 = <serde_yaml::Error as AsErrorSource>::as_error_source(_13) -> [return: bb16, unwind continue];
    }

    bb16: {
        _0 = std::option::Option::<&dyn StdError>::Some(_14);
        goto -> bb22;
    }

    bb17: {
        _15 = &(((*_1) as OpenConfigFile).0: std::io::Error);
        _16 = <std::io::Error as AsErrorSource>::as_error_source(_15) -> [return: bb18, unwind continue];
    }

    bb18: {
        _0 = std::option::Option::<&dyn StdError>::Some(_16);
        goto -> bb22;
    }

    bb19: {
        _17 = &(((*_1) as ReadConfigFile).0: serde_yaml::Error);
        _18 = <serde_yaml::Error as AsErrorSource>::as_error_source(_17) -> [return: bb20, unwind continue];
    }

    bb20: {
        _0 = std::option::Option::<&dyn StdError>::Some(_18);
        goto -> bb22;
    }

    bb21: {
        _0 = std::option::Option::<&dyn StdError>::Some(_20);
        goto -> bb22;
    }

    bb22: {
        return;
    }
}

fn <impl at src/main.rs:247:10: 247:15>::backtrace(_1: &Error) -> std::option::Option<&snafu::Backtrace> {
    debug self => _1;
    let mut _0: std::option::Option<&snafu::Backtrace>;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb13;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb13;
    }

    bb4: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb13;
    }

    bb5: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb13;
    }

    bb6: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb13;
    }

    bb7: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb13;
    }

    bb8: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb13;
    }

    bb9: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb13;
    }

    bb10: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb13;
    }

    bb11: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb13;
    }

    bb12: {
        _0 = std::option::Option::<&snafu::Backtrace>::None;
        goto -> bb13;
    }

    bb13: {
        return;
    }
}

fn <impl at src/main.rs:273:1: 273:26>::fmt(_1: &Error, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;

    bb0: {
        _0 = <Error as std::fmt::Display>::fmt(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
